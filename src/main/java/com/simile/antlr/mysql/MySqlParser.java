// Generated from /Users/haizhi/Documents/workspace/work/plan-antlr/src/main/resources/antlr/mysql/MySqlParser.g4 by ANTLR 4.9.1
package com.simile.antlr.mysql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IN=76, INDEX=77, INFILE=78, INNER=79, 
		INOUT=80, INSERT=81, INTERVAL=82, INTO=83, IS=84, ITERATE=85, JOIN=86, 
		KEY=87, KEYS=88, KILL=89, LEADING=90, LEAVE=91, LEFT=92, LIKE=93, LIMIT=94, 
		LINEAR=95, LINES=96, LOAD=97, LOCK=98, LOOP=99, LOW_PRIORITY=100, MASTER_BIND=101, 
		MASTER_SSL_VERIFY_SERVER_CERT=102, MATCH=103, MAXVALUE=104, MODIFIES=105, 
		NATURAL=106, NOT=107, NO_WRITE_TO_BINLOG=108, NULL_LITERAL=109, NUMBER=110, 
		ON=111, OPTIMIZE=112, OPTION=113, OPTIONAL=114, OPTIONALLY=115, OR=116, 
		ORDER=117, OUT=118, OVER=119, OUTER=120, OUTFILE=121, PARTITION=122, PRIMARY=123, 
		PROCEDURE=124, PURGE=125, RANGE=126, READ=127, READS=128, REFERENCES=129, 
		REGEXP=130, RELEASE=131, RENAME=132, REPEAT=133, REPLACE=134, REQUIRE=135, 
		RESIGNAL=136, RESTRICT=137, RETAIN=138, RETURN=139, REVOKE=140, RIGHT=141, 
		RLIKE=142, SCHEMA=143, SCHEMAS=144, SELECT=145, SET=146, SEPARATOR=147, 
		SHOW=148, SIGNAL=149, SPATIAL=150, SQL=151, SQLEXCEPTION=152, SQLSTATE=153, 
		SQLWARNING=154, SQL_BIG_RESULT=155, SQL_CALC_FOUND_ROWS=156, SQL_SMALL_RESULT=157, 
		SSL=158, STACKED=159, STARTING=160, STRAIGHT_JOIN=161, TABLE=162, TERMINATED=163, 
		THEN=164, TO=165, TRAILING=166, TRIGGER=167, TRUE=168, UNDO=169, UNION=170, 
		UNIQUE=171, UNLOCK=172, UNSIGNED=173, UPDATE=174, USAGE=175, USE=176, 
		USING=177, VALUES=178, WHEN=179, WHERE=180, WHILE=181, WITH=182, WRITE=183, 
		XOR=184, ZEROFILL=185, TINYINT=186, SMALLINT=187, MEDIUMINT=188, MIDDLEINT=189, 
		INT=190, INT1=191, INT2=192, INT3=193, INT4=194, INT8=195, INTEGER=196, 
		BIGINT=197, REAL=198, DOUBLE=199, PRECISION=200, FLOAT=201, FLOAT4=202, 
		FLOAT8=203, DECIMAL=204, DEC=205, NUMERIC=206, DATE=207, TIME=208, TIMESTAMP=209, 
		DATETIME=210, YEAR=211, CHAR=212, VARCHAR=213, NVARCHAR=214, NATIONAL=215, 
		BINARY=216, VARBINARY=217, TINYBLOB=218, BLOB=219, MEDIUMBLOB=220, LONG=221, 
		LONGBLOB=222, TINYTEXT=223, TEXT=224, MEDIUMTEXT=225, LONGTEXT=226, ENUM=227, 
		VARYING=228, SERIAL=229, YEAR_MONTH=230, DAY_HOUR=231, DAY_MINUTE=232, 
		DAY_SECOND=233, HOUR_MINUTE=234, HOUR_SECOND=235, MINUTE_SECOND=236, SECOND_MICROSECOND=237, 
		MINUTE_MICROSECOND=238, HOUR_MICROSECOND=239, DAY_MICROSECOND=240, JSON_ARRAY=241, 
		JSON_OBJECT=242, JSON_QUOTE=243, JSON_CONTAINS=244, JSON_CONTAINS_PATH=245, 
		JSON_EXTRACT=246, JSON_KEYS=247, JSON_OVERLAPS=248, JSON_SEARCH=249, JSON_VALUE=250, 
		JSON_ARRAY_APPEND=251, JSON_ARRAY_INSERT=252, JSON_INSERT=253, JSON_MERGE=254, 
		JSON_MERGE_PATCH=255, JSON_MERGE_PRESERVE=256, JSON_REMOVE=257, JSON_REPLACE=258, 
		JSON_SET=259, JSON_UNQUOTE=260, JSON_DEPTH=261, JSON_LENGTH=262, JSON_TYPE=263, 
		JSON_VALID=264, JSON_TABLE=265, JSON_SCHEMA_VALID=266, JSON_SCHEMA_VALIDATION_REPORT=267, 
		JSON_PRETTY=268, JSON_STORAGE_FREE=269, JSON_STORAGE_SIZE=270, JSON_ARRAYAGG=271, 
		JSON_OBJECTAGG=272, AVG=273, BIT_AND=274, BIT_OR=275, BIT_XOR=276, COUNT=277, 
		CUME_DIST=278, DENSE_RANK=279, FIRST_VALUE=280, GROUP_CONCAT=281, LAG=282, 
		LAST_VALUE=283, LEAD=284, MAX=285, MIN=286, NTILE=287, NTH_VALUE=288, 
		PERCENT_RANK=289, RANK=290, ROW_NUMBER=291, STD=292, STDDEV=293, STDDEV_POP=294, 
		STDDEV_SAMP=295, SUM=296, VAR_POP=297, VAR_SAMP=298, VARIANCE=299, CURRENT_DATE=300, 
		CURRENT_TIME=301, CURRENT_TIMESTAMP=302, LOCALTIME=303, CURDATE=304, CURTIME=305, 
		DATE_ADD=306, DATE_SUB=307, EXTRACT=308, LOCALTIMESTAMP=309, NOW=310, 
		POSITION=311, SUBSTR=312, SUBSTRING=313, SYSDATE=314, TRIM=315, UTC_DATE=316, 
		UTC_TIME=317, UTC_TIMESTAMP=318, ACCOUNT=319, ACTION=320, AFTER=321, AGGREGATE=322, 
		ALGORITHM=323, ANY=324, AT=325, AUTHORS=326, AUTOCOMMIT=327, AUTOEXTEND_SIZE=328, 
		AUTO_INCREMENT=329, AVG_ROW_LENGTH=330, BEGIN=331, BINLOG=332, BIT=333, 
		BLOCK=334, BOOL=335, BOOLEAN=336, BTREE=337, CACHE=338, CASCADED=339, 
		CHAIN=340, CHANGED=341, CHANNEL=342, CHECKSUM=343, PAGE_CHECKSUM=344, 
		CIPHER=345, CLASS_ORIGIN=346, CLIENT=347, CLOSE=348, COALESCE=349, CODE=350, 
		COLUMNS=351, COLUMN_FORMAT=352, COLUMN_NAME=353, COMMENT=354, COMMIT=355, 
		COMPACT=356, COMPLETION=357, COMPRESSED=358, COMPRESSION=359, CONCURRENT=360, 
		CONNECT=361, CONNECTION=362, CONSISTENT=363, CONSTRAINT_CATALOG=364, CONSTRAINT_SCHEMA=365, 
		CONSTRAINT_NAME=366, CONTAINS=367, CONTEXT=368, CONTRIBUTORS=369, COPY=370, 
		CPU=371, CURSOR_NAME=372, DATA=373, DATAFILE=374, DEALLOCATE=375, DEFAULT_AUTH=376, 
		DEFINER=377, DELAY_KEY_WRITE=378, DES_KEY_FILE=379, DIRECTORY=380, DISABLE=381, 
		DISCARD=382, DISK=383, DO=384, DUMPFILE=385, DUPLICATE=386, DYNAMIC=387, 
		ENABLE=388, ENCRYPTION=389, END=390, ENDS=391, ENGINE=392, ENGINES=393, 
		ERROR=394, ERRORS=395, ESCAPE=396, EVEN=397, EVENT=398, EVENTS=399, EVERY=400, 
		EXCHANGE=401, EXCLUSIVE=402, EXPIRE=403, EXPORT=404, EXTENDED=405, EXTENT_SIZE=406, 
		FAST=407, FAULTS=408, FIELDS=409, FILE_BLOCK_SIZE=410, FILTER=411, FIRST=412, 
		FIXED=413, FLUSH=414, FOLLOWING=415, FOLLOWS=416, FOUND=417, FULL=418, 
		FUNCTION=419, GENERAL=420, GLOBAL=421, GRANTS=422, GROUP_REPLICATION=423, 
		HANDLER=424, HASH=425, HELP=426, HOST=427, HOSTS=428, IDENTIFIED=429, 
		IGNORE_SERVER_IDS=430, IMPORT=431, INDEXES=432, INITIAL_SIZE=433, INPLACE=434, 
		INSERT_METHOD=435, INSTALL=436, INSTANCE=437, INSTANT=438, INVISIBLE=439, 
		INVOKER=440, IO=441, IO_THREAD=442, IPC=443, ISOLATION=444, ISSUER=445, 
		JSON=446, KEY_BLOCK_SIZE=447, LANGUAGE=448, LAST=449, LEAVES=450, LESS=451, 
		LEVEL=452, LIST=453, LOCAL=454, LOGFILE=455, LOGS=456, MASTER=457, MASTER_AUTO_POSITION=458, 
		MASTER_CONNECT_RETRY=459, MASTER_DELAY=460, MASTER_HEARTBEAT_PERIOD=461, 
		MASTER_HOST=462, MASTER_LOG_FILE=463, MASTER_LOG_POS=464, MASTER_PASSWORD=465, 
		MASTER_PORT=466, MASTER_RETRY_COUNT=467, MASTER_SSL=468, MASTER_SSL_CA=469, 
		MASTER_SSL_CAPATH=470, MASTER_SSL_CERT=471, MASTER_SSL_CIPHER=472, MASTER_SSL_CRL=473, 
		MASTER_SSL_CRLPATH=474, MASTER_SSL_KEY=475, MASTER_TLS_VERSION=476, MASTER_USER=477, 
		MAX_CONNECTIONS_PER_HOUR=478, MAX_QUERIES_PER_HOUR=479, MAX_ROWS=480, 
		MAX_SIZE=481, MAX_UPDATES_PER_HOUR=482, MAX_USER_CONNECTIONS=483, MEDIUM=484, 
		MEMBER=485, MERGE=486, MESSAGE_TEXT=487, MID=488, MIGRATE=489, MIN_ROWS=490, 
		MODE=491, MODIFY=492, MUTEX=493, MYSQL=494, MYSQL_ERRNO=495, NAME=496, 
		NAMES=497, NCHAR=498, NEVER=499, NEXT=500, NO=501, NODEGROUP=502, NONE=503, 
		ODBC=504, OFFLINE=505, OFFSET=506, OF=507, OJ=508, OLD_PASSWORD=509, ONE=510, 
		ONLINE=511, ONLY=512, OPEN=513, OPTIMIZER_COSTS=514, OPTIONS=515, OWNER=516, 
		PACK_KEYS=517, PAGE=518, PARSER=519, PARTIAL=520, PARTITIONING=521, PARTITIONS=522, 
		PASSWORD=523, PHASE=524, PLUGIN=525, PLUGIN_DIR=526, PLUGINS=527, PORT=528, 
		PRECEDES=529, PRECEDING=530, PREPARE=531, PRESERVE=532, PREV=533, PROCESSLIST=534, 
		PROFILE=535, PROFILES=536, PROXY=537, QUERY=538, QUICK=539, REBUILD=540, 
		RECOVER=541, REDO_BUFFER_SIZE=542, REDUNDANT=543, RELAY=544, RELAY_LOG_FILE=545, 
		RELAY_LOG_POS=546, RELAYLOG=547, REMOVE=548, REORGANIZE=549, REPAIR=550, 
		REPLICATE_DO_DB=551, REPLICATE_DO_TABLE=552, REPLICATE_IGNORE_DB=553, 
		REPLICATE_IGNORE_TABLE=554, REPLICATE_REWRITE_DB=555, REPLICATE_WILD_DO_TABLE=556, 
		REPLICATE_WILD_IGNORE_TABLE=557, REPLICATION=558, RESET=559, RESUME=560, 
		RETURNED_SQLSTATE=561, RETURNING=562, RETURNS=563, ROLE=564, ROLLBACK=565, 
		ROLLUP=566, ROTATE=567, ROW=568, ROWS=569, ROW_FORMAT=570, SAVEPOINT=571, 
		SCHEDULE=572, SECURITY=573, SERVER=574, SESSION=575, SHARE=576, SHARED=577, 
		SIGNED=578, SIMPLE=579, SLAVE=580, SLOW=581, SNAPSHOT=582, SOCKET=583, 
		SOME=584, SONAME=585, SOUNDS=586, SOURCE=587, SQL_AFTER_GTIDS=588, SQL_AFTER_MTS_GAPS=589, 
		SQL_BEFORE_GTIDS=590, SQL_BUFFER_RESULT=591, SQL_CACHE=592, SQL_NO_CACHE=593, 
		SQL_THREAD=594, START=595, STARTS=596, STATS_AUTO_RECALC=597, STATS_PERSISTENT=598, 
		STATS_SAMPLE_PAGES=599, STATUS=600, STOP=601, STORAGE=602, STORED=603, 
		STRING=604, SUBCLASS_ORIGIN=605, SUBJECT=606, SUBPARTITION=607, SUBPARTITIONS=608, 
		SUSPEND=609, SWAPS=610, SWITCHES=611, TABLE_NAME=612, TABLESPACE=613, 
		TABLE_TYPE=614, TEMPORARY=615, TEMPTABLE=616, THAN=617, TRADITIONAL=618, 
		TRANSACTION=619, TRANSACTIONAL=620, TRIGGERS=621, TRUNCATE=622, UNBOUNDED=623, 
		UNDEFINED=624, UNDOFILE=625, UNDO_BUFFER_SIZE=626, UNINSTALL=627, UNKNOWN=628, 
		UNTIL=629, UPGRADE=630, USER=631, USE_FRM=632, USER_RESOURCES=633, VALIDATION=634, 
		VALUE=635, VARIABLES=636, VIEW=637, VIRTUAL=638, VISIBLE=639, WAIT=640, 
		WARNINGS=641, WINDOW=642, WITHOUT=643, WORK=644, WRAPPER=645, X509=646, 
		XA=647, XML=648, EUR=649, USA=650, JIS=651, ISO=652, INTERNAL=653, QUARTER=654, 
		MONTH=655, DAY=656, HOUR=657, MINUTE=658, WEEK=659, SECOND=660, MICROSECOND=661, 
		TABLES=662, ROUTINE=663, EXECUTE=664, FILE=665, PROCESS=666, RELOAD=667, 
		SHUTDOWN=668, SUPER=669, PRIVILEGES=670, APPLICATION_PASSWORD_ADMIN=671, 
		AUDIT_ADMIN=672, BACKUP_ADMIN=673, BINLOG_ADMIN=674, BINLOG_ENCRYPTION_ADMIN=675, 
		CLONE_ADMIN=676, CONNECTION_ADMIN=677, ENCRYPTION_KEY_ADMIN=678, FIREWALL_ADMIN=679, 
		FIREWALL_USER=680, FLUSH_OPTIMIZER_COSTS=681, FLUSH_STATUS=682, FLUSH_TABLES=683, 
		FLUSH_USER_RESOURCES=684, ADMIN=685, GROUP_REPLICATION_ADMIN=686, INNODB_REDO_LOG_ARCHIVE=687, 
		INNODB_REDO_LOG_ENABLE=688, NDB_STORED_USER=689, PERSIST_RO_VARIABLES_ADMIN=690, 
		REPLICATION_APPLIER=691, REPLICATION_SLAVE_ADMIN=692, RESOURCE_GROUP_ADMIN=693, 
		RESOURCE_GROUP_USER=694, ROLE_ADMIN=695, SERVICE_CONNECTION_ADMIN=696, 
		SESSION_VARIABLES_ADMIN=697, SET_USER_ID=698, SHOW_ROUTINE=699, SYSTEM_VARIABLES_ADMIN=700, 
		TABLE_ENCRYPTION_ADMIN=701, VERSION_TOKEN_ADMIN=702, XA_RECOVER_ADMIN=703, 
		ARMSCII8=704, ASCII=705, BIG5=706, CP1250=707, CP1251=708, CP1256=709, 
		CP1257=710, CP850=711, CP852=712, CP866=713, CP932=714, DEC8=715, EUCJPMS=716, 
		EUCKR=717, GB18030=718, GB2312=719, GBK=720, GEOSTD8=721, GREEK=722, HEBREW=723, 
		HP8=724, KEYBCS2=725, KOI8R=726, KOI8U=727, LATIN1=728, LATIN2=729, LATIN5=730, 
		LATIN7=731, MACCE=732, MACROMAN=733, SJIS=734, SWE7=735, TIS620=736, UCS2=737, 
		UJIS=738, UTF16=739, UTF16LE=740, UTF32=741, UTF8=742, UTF8MB3=743, UTF8MB4=744, 
		ARCHIVE=745, BLACKHOLE=746, CSV=747, FEDERATED=748, INNODB=749, MEMORY=750, 
		MRG_MYISAM=751, MYISAM=752, NDB=753, NDBCLUSTER=754, PERFORMANCE_SCHEMA=755, 
		TOKUDB=756, REPEATABLE=757, COMMITTED=758, UNCOMMITTED=759, SERIALIZABLE=760, 
		GEOMETRYCOLLECTION=761, GEOMCOLLECTION=762, GEOMETRY=763, LINESTRING=764, 
		MULTILINESTRING=765, MULTIPOINT=766, MULTIPOLYGON=767, POINT=768, POLYGON=769, 
		ABS=770, ACOS=771, ADDDATE=772, ADDTIME=773, AES_DECRYPT=774, AES_ENCRYPT=775, 
		AREA=776, ASBINARY=777, ASIN=778, ASTEXT=779, ASWKB=780, ASWKT=781, ASYMMETRIC_DECRYPT=782, 
		ASYMMETRIC_DERIVE=783, ASYMMETRIC_ENCRYPT=784, ASYMMETRIC_SIGN=785, ASYMMETRIC_VERIFY=786, 
		ATAN=787, ATAN2=788, BENCHMARK=789, BIN=790, BIT_COUNT=791, BIT_LENGTH=792, 
		BUFFER=793, CATALOG_NAME=794, CEIL=795, CEILING=796, CENTROID=797, CHARACTER_LENGTH=798, 
		CHARSET=799, CHAR_LENGTH=800, COERCIBILITY=801, COLLATION=802, COMPRESS=803, 
		CONCAT=804, CONCAT_WS=805, CONNECTION_ID=806, CONV=807, CONVERT_TZ=808, 
		COS=809, COT=810, CRC32=811, CREATE_ASYMMETRIC_PRIV_KEY=812, CREATE_ASYMMETRIC_PUB_KEY=813, 
		CREATE_DH_PARAMETERS=814, CREATE_DIGEST=815, CROSSES=816, DATEDIFF=817, 
		DATE_FORMAT=818, DAYNAME=819, DAYOFMONTH=820, DAYOFWEEK=821, DAYOFYEAR=822, 
		DECODE=823, DEGREES=824, DES_DECRYPT=825, DES_ENCRYPT=826, DIMENSION=827, 
		DISJOINT=828, ELT=829, ENCODE=830, ENCRYPT=831, ENDPOINT=832, ENVELOPE=833, 
		EQUALS=834, EXP=835, EXPORT_SET=836, EXTERIORRING=837, EXTRACTVALUE=838, 
		FIELD=839, FIND_IN_SET=840, FLOOR=841, FORMAT=842, FOUND_ROWS=843, FROM_BASE64=844, 
		FROM_DAYS=845, FROM_UNIXTIME=846, GEOMCOLLFROMTEXT=847, GEOMCOLLFROMWKB=848, 
		GEOMETRYCOLLECTIONFROMTEXT=849, GEOMETRYCOLLECTIONFROMWKB=850, GEOMETRYFROMTEXT=851, 
		GEOMETRYFROMWKB=852, GEOMETRYN=853, GEOMETRYTYPE=854, GEOMFROMTEXT=855, 
		GEOMFROMWKB=856, GET_FORMAT=857, GET_LOCK=858, GLENGTH=859, GREATEST=860, 
		GTID_SUBSET=861, GTID_SUBTRACT=862, HEX=863, IFNULL=864, INET6_ATON=865, 
		INET6_NTOA=866, INET_ATON=867, INET_NTOA=868, INSTR=869, INTERIORRINGN=870, 
		INTERSECTS=871, ISCLOSED=872, ISEMPTY=873, ISNULL=874, ISSIMPLE=875, IS_FREE_LOCK=876, 
		IS_IPV4=877, IS_IPV4_COMPAT=878, IS_IPV4_MAPPED=879, IS_IPV6=880, IS_USED_LOCK=881, 
		LAST_INSERT_ID=882, LCASE=883, LEAST=884, LENGTH=885, LINEFROMTEXT=886, 
		LINEFROMWKB=887, LINESTRINGFROMTEXT=888, LINESTRINGFROMWKB=889, LN=890, 
		LOAD_FILE=891, LOCATE=892, LOG=893, LOG10=894, LOG2=895, LOWER=896, LPAD=897, 
		LTRIM=898, MAKEDATE=899, MAKETIME=900, MAKE_SET=901, MASTER_POS_WAIT=902, 
		MBRCONTAINS=903, MBRDISJOINT=904, MBREQUAL=905, MBRINTERSECTS=906, MBROVERLAPS=907, 
		MBRTOUCHES=908, MBRWITHIN=909, MD5=910, MLINEFROMTEXT=911, MLINEFROMWKB=912, 
		MONTHNAME=913, MPOINTFROMTEXT=914, MPOINTFROMWKB=915, MPOLYFROMTEXT=916, 
		MPOLYFROMWKB=917, MULTILINESTRINGFROMTEXT=918, MULTILINESTRINGFROMWKB=919, 
		MULTIPOINTFROMTEXT=920, MULTIPOINTFROMWKB=921, MULTIPOLYGONFROMTEXT=922, 
		MULTIPOLYGONFROMWKB=923, NAME_CONST=924, NULLIF=925, NUMGEOMETRIES=926, 
		NUMINTERIORRINGS=927, NUMPOINTS=928, OCT=929, OCTET_LENGTH=930, ORD=931, 
		OVERLAPS=932, PERIOD_ADD=933, PERIOD_DIFF=934, PI=935, POINTFROMTEXT=936, 
		POINTFROMWKB=937, POINTN=938, POLYFROMTEXT=939, POLYFROMWKB=940, POLYGONFROMTEXT=941, 
		POLYGONFROMWKB=942, POW=943, POWER=944, QUOTE=945, RADIANS=946, RAND=947, 
		RANDOM_BYTES=948, RELEASE_LOCK=949, REVERSE=950, ROUND=951, ROW_COUNT=952, 
		RPAD=953, RTRIM=954, SEC_TO_TIME=955, SESSION_USER=956, SHA=957, SHA1=958, 
		SHA2=959, SCHEMA_NAME=960, SIGN=961, SIN=962, SLEEP=963, SOUNDEX=964, 
		SQL_THREAD_WAIT_AFTER_GTIDS=965, SQRT=966, SRID=967, STARTPOINT=968, STRCMP=969, 
		STR_TO_DATE=970, ST_AREA=971, ST_ASBINARY=972, ST_ASTEXT=973, ST_ASWKB=974, 
		ST_ASWKT=975, ST_BUFFER=976, ST_CENTROID=977, ST_CONTAINS=978, ST_CROSSES=979, 
		ST_DIFFERENCE=980, ST_DIMENSION=981, ST_DISJOINT=982, ST_DISTANCE=983, 
		ST_ENDPOINT=984, ST_ENVELOPE=985, ST_EQUALS=986, ST_EXTERIORRING=987, 
		ST_GEOMCOLLFROMTEXT=988, ST_GEOMCOLLFROMTXT=989, ST_GEOMCOLLFROMWKB=990, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=991, ST_GEOMETRYCOLLECTIONFROMWKB=992, ST_GEOMETRYFROMTEXT=993, 
		ST_GEOMETRYFROMWKB=994, ST_GEOMETRYN=995, ST_GEOMETRYTYPE=996, ST_GEOMFROMTEXT=997, 
		ST_GEOMFROMWKB=998, ST_INTERIORRINGN=999, ST_INTERSECTION=1000, ST_INTERSECTS=1001, 
		ST_ISCLOSED=1002, ST_ISEMPTY=1003, ST_ISSIMPLE=1004, ST_LINEFROMTEXT=1005, 
		ST_LINEFROMWKB=1006, ST_LINESTRINGFROMTEXT=1007, ST_LINESTRINGFROMWKB=1008, 
		ST_NUMGEOMETRIES=1009, ST_NUMINTERIORRING=1010, ST_NUMINTERIORRINGS=1011, 
		ST_NUMPOINTS=1012, ST_OVERLAPS=1013, ST_POINTFROMTEXT=1014, ST_POINTFROMWKB=1015, 
		ST_POINTN=1016, ST_POLYFROMTEXT=1017, ST_POLYFROMWKB=1018, ST_POLYGONFROMTEXT=1019, 
		ST_POLYGONFROMWKB=1020, ST_SRID=1021, ST_STARTPOINT=1022, ST_SYMDIFFERENCE=1023, 
		ST_TOUCHES=1024, ST_UNION=1025, ST_WITHIN=1026, ST_X=1027, ST_Y=1028, 
		SUBDATE=1029, SUBSTRING_INDEX=1030, SUBTIME=1031, SYSTEM_USER=1032, TAN=1033, 
		TIMEDIFF=1034, TIMESTAMPADD=1035, TIMESTAMPDIFF=1036, TIME_FORMAT=1037, 
		TIME_TO_SEC=1038, TOUCHES=1039, TO_BASE64=1040, TO_DAYS=1041, TO_SECONDS=1042, 
		UCASE=1043, UNCOMPRESS=1044, UNCOMPRESSED_LENGTH=1045, UNHEX=1046, UNIX_TIMESTAMP=1047, 
		UPDATEXML=1048, UPPER=1049, UUID=1050, UUID_SHORT=1051, VALIDATE_PASSWORD_STRENGTH=1052, 
		VERSION=1053, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1054, WEEKDAY=1055, WEEKOFYEAR=1056, 
		WEIGHT_STRING=1057, WITHIN=1058, YEARWEEK=1059, Y_FUNCTION=1060, X_FUNCTION=1061, 
		VAR_ASSIGN=1062, PLUS_ASSIGN=1063, MINUS_ASSIGN=1064, MULT_ASSIGN=1065, 
		DIV_ASSIGN=1066, MOD_ASSIGN=1067, AND_ASSIGN=1068, XOR_ASSIGN=1069, OR_ASSIGN=1070, 
		STAR=1071, DIVIDE=1072, MODULE=1073, PLUS=1074, MINUS=1075, DIV=1076, 
		MOD=1077, EQUAL_SYMBOL=1078, GREATER_SYMBOL=1079, LESS_SYMBOL=1080, EXCLAMATION_SYMBOL=1081, 
		BIT_NOT_OP=1082, BIT_OR_OP=1083, BIT_AND_OP=1084, BIT_XOR_OP=1085, DOT=1086, 
		LR_BRACKET=1087, RR_BRACKET=1088, COMMA=1089, SEMI=1090, AT_SIGN=1091, 
		ZERO_DECIMAL=1092, ONE_DECIMAL=1093, TWO_DECIMAL=1094, SINGLE_QUOTE_SYMB=1095, 
		DOUBLE_QUOTE_SYMB=1096, REVERSE_QUOTE_SYMB=1097, COLON_SYMB=1098, CHARSET_REVERSE_QOUTE_STRING=1099, 
		FILESIZE_LITERAL=1100, START_NATIONAL_STRING_LITERAL=1101, STRING_LITERAL=1102, 
		DECIMAL_LITERAL=1103, HEXADECIMAL_LITERAL=1104, REAL_LITERAL=1105, NULL_SPEC_LITERAL=1106, 
		BIT_STRING=1107, STRING_CHARSET_NAME=1108, DOT_ID=1109, ID=1110, REVERSE_QUOTE_ID=1111, 
		STRING_USER_NAME=1112, IP_ADDRESS=1113, LOCAL_ID=1114, GLOBAL_ID=1115, 
		ERROR_RECONGNIGION=1116;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_charSet = 25, RULE_ownerStatement = 26, RULE_scheduleExpression = 27, 
		RULE_timestampValue = 28, RULE_intervalExpr = 29, RULE_intervalType = 30, 
		RULE_enableType = 31, RULE_indexType = 32, RULE_indexOption = 33, RULE_procedureParameter = 34, 
		RULE_functionParameter = 35, RULE_routineOption = 36, RULE_serverOption = 37, 
		RULE_createDefinitions = 38, RULE_createDefinition = 39, RULE_columnDefinition = 40, 
		RULE_columnConstraint = 41, RULE_tableConstraint = 42, RULE_referenceDefinition = 43, 
		RULE_referenceAction = 44, RULE_referenceControlType = 45, RULE_indexColumnDefinition = 46, 
		RULE_tableOption = 47, RULE_tableType = 48, RULE_tablespaceStorage = 49, 
		RULE_partitionDefinitions = 50, RULE_partitionFunctionDefinition = 51, 
		RULE_subpartitionFunctionDefinition = 52, RULE_partitionDefinition = 53, 
		RULE_partitionDefinerAtom = 54, RULE_partitionDefinerVector = 55, RULE_subpartitionDefinition = 56, 
		RULE_partitionOption = 57, RULE_alterDatabase = 58, RULE_alterEvent = 59, 
		RULE_alterFunction = 60, RULE_alterInstance = 61, RULE_alterLogfileGroup = 62, 
		RULE_alterProcedure = 63, RULE_alterServer = 64, RULE_alterTable = 65, 
		RULE_alterTablespace = 66, RULE_alterView = 67, RULE_alterSpecification = 68, 
		RULE_dropDatabase = 69, RULE_dropEvent = 70, RULE_dropIndex = 71, RULE_dropLogfileGroup = 72, 
		RULE_dropProcedure = 73, RULE_dropFunction = 74, RULE_dropServer = 75, 
		RULE_dropTable = 76, RULE_dropTablespace = 77, RULE_dropTrigger = 78, 
		RULE_dropView = 79, RULE_renameTable = 80, RULE_renameTableClause = 81, 
		RULE_truncateTable = 82, RULE_callStatement = 83, RULE_deleteStatement = 84, 
		RULE_doStatement = 85, RULE_handlerStatement = 86, RULE_insertStatement = 87, 
		RULE_loadDataStatement = 88, RULE_loadXmlStatement = 89, RULE_replaceStatement = 90, 
		RULE_selectStatement = 91, RULE_updateStatement = 92, RULE_insertStatementValue = 93, 
		RULE_updatedElement = 94, RULE_assignmentField = 95, RULE_lockClause = 96, 
		RULE_singleDeleteStatement = 97, RULE_multipleDeleteStatement = 98, RULE_handlerOpenStatement = 99, 
		RULE_handlerReadIndexStatement = 100, RULE_handlerReadStatement = 101, 
		RULE_handlerCloseStatement = 102, RULE_singleUpdateStatement = 103, RULE_multipleUpdateStatement = 104, 
		RULE_orderByClause = 105, RULE_orderByExpression = 106, RULE_tableSources = 107, 
		RULE_tableSource = 108, RULE_tableSourceItem = 109, RULE_indexHint = 110, 
		RULE_indexHintType = 111, RULE_joinPart = 112, RULE_queryExpression = 113, 
		RULE_queryExpressionNointo = 114, RULE_querySpecification = 115, RULE_querySpecificationNointo = 116, 
		RULE_unionParenthesis = 117, RULE_unionStatement = 118, RULE_selectSpec = 119, 
		RULE_selectElements = 120, RULE_selectElement = 121, RULE_selectIntoExpression = 122, 
		RULE_selectFieldsInto = 123, RULE_selectLinesInto = 124, RULE_fromClause = 125, 
		RULE_groupByClause = 126, RULE_havingClause = 127, RULE_windowClause = 128, 
		RULE_groupByItem = 129, RULE_limitClause = 130, RULE_limitClauseAtom = 131, 
		RULE_startTransaction = 132, RULE_beginWork = 133, RULE_commitWork = 134, 
		RULE_rollbackWork = 135, RULE_savepointStatement = 136, RULE_rollbackStatement = 137, 
		RULE_releaseStatement = 138, RULE_lockTables = 139, RULE_unlockTables = 140, 
		RULE_setAutocommitStatement = 141, RULE_setTransactionStatement = 142, 
		RULE_transactionMode = 143, RULE_lockTableElement = 144, RULE_lockAction = 145, 
		RULE_transactionOption = 146, RULE_transactionLevel = 147, RULE_changeMaster = 148, 
		RULE_changeReplicationFilter = 149, RULE_purgeBinaryLogs = 150, RULE_resetMaster = 151, 
		RULE_resetSlave = 152, RULE_startSlave = 153, RULE_stopSlave = 154, RULE_startGroupReplication = 155, 
		RULE_stopGroupReplication = 156, RULE_masterOption = 157, RULE_stringMasterOption = 158, 
		RULE_decimalMasterOption = 159, RULE_boolMasterOption = 160, RULE_channelOption = 161, 
		RULE_replicationFilter = 162, RULE_tablePair = 163, RULE_threadType = 164, 
		RULE_untilOption = 165, RULE_connectionOption = 166, RULE_gtuidSet = 167, 
		RULE_xaStartTransaction = 168, RULE_xaEndTransaction = 169, RULE_xaPrepareStatement = 170, 
		RULE_xaCommitWork = 171, RULE_xaRollbackWork = 172, RULE_xaRecoverWork = 173, 
		RULE_prepareStatement = 174, RULE_executeStatement = 175, RULE_deallocatePrepare = 176, 
		RULE_routineBody = 177, RULE_blockStatement = 178, RULE_caseStatement = 179, 
		RULE_ifStatement = 180, RULE_iterateStatement = 181, RULE_leaveStatement = 182, 
		RULE_loopStatement = 183, RULE_repeatStatement = 184, RULE_returnStatement = 185, 
		RULE_whileStatement = 186, RULE_cursorStatement = 187, RULE_declareVariable = 188, 
		RULE_declareCondition = 189, RULE_declareCursor = 190, RULE_declareHandler = 191, 
		RULE_handlerConditionValue = 192, RULE_procedureSqlStatement = 193, RULE_caseAlternative = 194, 
		RULE_elifAlternative = 195, RULE_alterUser = 196, RULE_createUser = 197, 
		RULE_dropUser = 198, RULE_grantStatement = 199, RULE_roleOption = 200, 
		RULE_grantProxy = 201, RULE_renameUser = 202, RULE_revokeStatement = 203, 
		RULE_revokeProxy = 204, RULE_setPasswordStatement = 205, RULE_userSpecification = 206, 
		RULE_userAuthOption = 207, RULE_tlsOption = 208, RULE_userResourceOption = 209, 
		RULE_userPasswordOption = 210, RULE_userLockOption = 211, RULE_privelegeClause = 212, 
		RULE_privilege = 213, RULE_privilegeLevel = 214, RULE_renameUserClause = 215, 
		RULE_analyzeTable = 216, RULE_checkTable = 217, RULE_checksumTable = 218, 
		RULE_optimizeTable = 219, RULE_repairTable = 220, RULE_checkTableOption = 221, 
		RULE_createUdfunction = 222, RULE_installPlugin = 223, RULE_uninstallPlugin = 224, 
		RULE_setStatement = 225, RULE_showStatement = 226, RULE_variableClause = 227, 
		RULE_showCommonEntity = 228, RULE_showFilter = 229, RULE_showGlobalInfoClause = 230, 
		RULE_showSchemaEntity = 231, RULE_showProfileType = 232, RULE_binlogStatement = 233, 
		RULE_cacheIndexStatement = 234, RULE_flushStatement = 235, RULE_killStatement = 236, 
		RULE_loadIndexIntoCache = 237, RULE_resetStatement = 238, RULE_shutdownStatement = 239, 
		RULE_tableIndexes = 240, RULE_flushOption = 241, RULE_flushTableOption = 242, 
		RULE_loadedTableIndexes = 243, RULE_simpleDescribeStatement = 244, RULE_fullDescribeStatement = 245, 
		RULE_helpStatement = 246, RULE_useStatement = 247, RULE_signalStatement = 248, 
		RULE_resignalStatement = 249, RULE_signalConditionInformation = 250, RULE_diagnosticsStatement = 251, 
		RULE_diagnosticsConditionInformationName = 252, RULE_describeObjectClause = 253, 
		RULE_fullId = 254, RULE_tableName = 255, RULE_fullColumnName = 256, RULE_indexColumnName = 257, 
		RULE_userName = 258, RULE_mysqlVariable = 259, RULE_charsetName = 260, 
		RULE_collationName = 261, RULE_engineName = 262, RULE_uuidSet = 263, RULE_xid = 264, 
		RULE_xuidStringId = 265, RULE_authPlugin = 266, RULE_uid = 267, RULE_simpleId = 268, 
		RULE_dottedId = 269, RULE_decimalLiteral = 270, RULE_fileSizeLiteral = 271, 
		RULE_stringLiteral = 272, RULE_booleanLiteral = 273, RULE_hexadecimalLiteral = 274, 
		RULE_nullNotnull = 275, RULE_constant = 276, RULE_dataType = 277, RULE_collectionOptions = 278, 
		RULE_convertedDataType = 279, RULE_lengthOneDimension = 280, RULE_lengthTwoDimension = 281, 
		RULE_lengthTwoOptionalDimension = 282, RULE_uidList = 283, RULE_tables = 284, 
		RULE_indexColumnNames = 285, RULE_expressions = 286, RULE_expressionsWithDefaults = 287, 
		RULE_constants = 288, RULE_simpleStrings = 289, RULE_userVariables = 290, 
		RULE_defaultValue = 291, RULE_currentTimestamp = 292, RULE_expressionOrDefault = 293, 
		RULE_ifExists = 294, RULE_ifNotExists = 295, RULE_functionCall = 296, 
		RULE_specificFunction = 297, RULE_caseFuncAlternative = 298, RULE_levelsInWeightString = 299, 
		RULE_levelInWeightListElement = 300, RULE_aggregateWindowedFunction = 301, 
		RULE_nonAggregateWindowedFunction = 302, RULE_overClause = 303, RULE_windowSpec = 304, 
		RULE_windowName = 305, RULE_frameClause = 306, RULE_frameUnits = 307, 
		RULE_frameExtent = 308, RULE_frameBetween = 309, RULE_frameRange = 310, 
		RULE_partitionClause = 311, RULE_scalarFunctionName = 312, RULE_passwordFunctionClause = 313, 
		RULE_functionArgs = 314, RULE_functionArg = 315, RULE_expression = 316, 
		RULE_predicate = 317, RULE_expressionAtom = 318, RULE_unaryOperator = 319, 
		RULE_comparisonOperator = 320, RULE_logicalOperator = 321, RULE_bitOperator = 322, 
		RULE_mathOperator = 323, RULE_jsonOperator = 324, RULE_charsetNameBase = 325, 
		RULE_transactionLevelBase = 326, RULE_privilegesBase = 327, RULE_intervalTypeBase = 328, 
		RULE_dataTypeBase = 329, RULE_keywordsCanBeId = 330, RULE_functionNameBase = 331;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
			"charSet", "ownerStatement", "scheduleExpression", "timestampValue", 
			"intervalExpr", "intervalType", "enableType", "indexType", "indexOption", 
			"procedureParameter", "functionParameter", "routineOption", "serverOption", 
			"createDefinitions", "createDefinition", "columnDefinition", "columnConstraint", 
			"tableConstraint", "referenceDefinition", "referenceAction", "referenceControlType", 
			"indexColumnDefinition", "tableOption", "tableType", "tablespaceStorage", 
			"partitionDefinitions", "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
			"partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
			"subpartitionDefinition", "partitionOption", "alterDatabase", "alterEvent", 
			"alterFunction", "alterInstance", "alterLogfileGroup", "alterProcedure", 
			"alterServer", "alterTable", "alterTablespace", "alterView", "alterSpecification", 
			"dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", "dropProcedure", 
			"dropFunction", "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
			"dropView", "renameTable", "renameTableClause", "truncateTable", "callStatement", 
			"deleteStatement", "doStatement", "handlerStatement", "insertStatement", 
			"loadDataStatement", "loadXmlStatement", "replaceStatement", "selectStatement", 
			"updateStatement", "insertStatementValue", "updatedElement", "assignmentField", 
			"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
			"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
			"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", 
			"orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
			"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
			"querySpecification", "querySpecificationNointo", "unionParenthesis", 
			"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
			"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
			"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
			"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
			"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
			"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
			"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
			"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
			"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
			"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
			"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
			"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
			"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
			"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
			"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
			"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
			"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
			"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
			"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
			"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
			"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
			"tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
			"privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
			"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
			"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
			"setStatement", "showStatement", "variableClause", "showCommonEntity", 
			"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
			"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
			"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
			"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
			"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
			"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
			"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
			"tableName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable", 
			"charsetName", "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
			"authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
			"stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
			"constant", "dataType", "collectionOptions", "convertedDataType", "lengthOneDimension", 
			"lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "tables", 
			"indexColumnNames", "expressions", "expressionsWithDefaults", "constants", 
			"simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
			"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
			"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
			"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
			"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
			"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
			"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
			"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
			"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
			"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
			"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IN'", 
			"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
			"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
			"'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
			"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
			"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
			"'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", 
			"'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", 
			"'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
			"'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", 
			"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
			"'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
			"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
			"'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
			"'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", 
			"'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
			"'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", 
			"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
			"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
			"'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
			"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
			"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", 
			"'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
			"'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
			"'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", 
			"'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
			"'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", 
			"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
			"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
			"'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
			"'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
			"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
			"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
			"'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
			"'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
			"'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
			"'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
			"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
			"'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'", 
			"'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
			"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
			"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
			"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
			"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
			"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
			"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
			"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
			"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
			"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
			"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
			"'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
			"'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", 
			"'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
			"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
			"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
			"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
			"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", 
			"'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
			"'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
			"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
			"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
			"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
			"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
			"'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'ROLE'", "'ROLLBACK'", 
			"'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", 
			"'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
			"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
			"'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
			"'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
			"'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
			"'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
			"'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
			"'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
			"'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
			"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", 
			"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
			"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", 
			"'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
			"'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
			"'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", 
			"'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
			"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
			"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
			"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
			"KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
			"LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
			"OR", "ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
			"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
			"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
			"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", 
			"SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
			"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
			"CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
			"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
			"INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", 
			"IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", 
			"PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
			"REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
			"RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
			"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
			"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
			"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
			"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
			"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
			"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
			"TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
			"TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", 
			"UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
			"UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
			"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
			"WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", 
			"JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", 
			"WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
			"PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
			"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
			"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
			"FLUSH_USER_RESOURCES", "ADMIN", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
			"INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
			"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
			"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
			"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
			"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
			"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
			"DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
			"HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", 
			"LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", 
			"UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", 
			"BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
			"NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
			"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
			"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
			"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
			"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
			"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
			"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
			"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
			"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
			"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
			"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
			"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
			"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
			"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (GET - 68)) | (1L << (GRANT - 68)) | (1L << (INSERT - 68)) | (1L << (KILL - 68)) | (1L << (LOAD - 68)) | (1L << (LOCK - 68)) | (1L << (OPTIMIZE - 68)) | (1L << (PURGE - 68)) | (1L << (RELEASE - 68)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (RENAME - 132)) | (1L << (REPLACE - 132)) | (1L << (RESIGNAL - 132)) | (1L << (REVOKE - 132)) | (1L << (SELECT - 132)) | (1L << (SET - 132)) | (1L << (SHOW - 132)) | (1L << (SIGNAL - 132)) | (1L << (UNLOCK - 132)) | (1L << (UPDATE - 132)) | (1L << (USE - 132)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (BEGIN - 331)) | (1L << (BINLOG - 331)) | (1L << (CACHE - 331)) | (1L << (CHECKSUM - 331)) | (1L << (COMMIT - 331)) | (1L << (DEALLOCATE - 331)) | (1L << (DO - 331)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (FLUSH - 414)) | (1L << (HANDLER - 414)) | (1L << (HELP - 414)) | (1L << (INSTALL - 414)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PREPARE - 531)) | (1L << (REPAIR - 531)) | (1L << (RESET - 531)) | (1L << (ROLLBACK - 531)) | (1L << (SAVEPOINT - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (START - 595)) | (1L << (STOP - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (XA - 595)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(664);
				sqlStatements();
				}
			}

			setState(669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(667);
				match(MINUS);
				setState(668);
				match(MINUS);
				}
			}

			setState(671);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(684);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(682);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(673);
						sqlStatement();
						setState(676);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(674);
							match(MINUS);
							setState(675);
							match(MINUS);
							}
						}

						setState(679);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(678);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(681);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(686);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(687);
				sqlStatement();
				setState(693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(690);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(688);
						match(MINUS);
						setState(689);
						match(MINUS);
						}
					}

					setState(692);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(695);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(698);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(699);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(700);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(701);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(702);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(703);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(704);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmptyStatement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(707);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(709);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(710);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(711);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(712);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(713);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(714);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(715);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(716);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(717);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(718);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(719);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(720);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(721);
				alterDatabase();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(722);
				alterEvent();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(723);
				alterFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(724);
				alterInstance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(725);
				alterLogfileGroup();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(726);
				alterProcedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(727);
				alterServer();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(728);
				alterTable();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(729);
				alterTablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(730);
				alterView();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(731);
				dropDatabase();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(732);
				dropEvent();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(733);
				dropIndex();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(734);
				dropLogfileGroup();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(735);
				dropProcedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(736);
				dropFunction();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(737);
				dropServer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(738);
				dropTable();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(739);
				dropTablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(740);
				dropTrigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(741);
				dropView();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(742);
				renameTable();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(743);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(746);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(747);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(748);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(749);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(750);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(751);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(752);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(753);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(754);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(755);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(758);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(759);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(760);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(761);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(762);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(763);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(764);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(765);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(766);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(769);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(770);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(771);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(772);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(773);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(774);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(775);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(776);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(777);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(778);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(779);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(780);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(781);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(782);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(783);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(789);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(786);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(787);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(788);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(791);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(792);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(793);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(794);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(795);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(796);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(797);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(798);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(799);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(800);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(803);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(804);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(805);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(806);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(807);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(808);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(809);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(810);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(811);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(812);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(813);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(814);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(815);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(816);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(817);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(818);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(819);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(820);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(821);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(822);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(823);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(824);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(825);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(826);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(827);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(830);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(831);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(832);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(833);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(834);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(835);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(836);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(839);
			match(CREATE);
			setState(840);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(841);
				ifNotExists();
				}
			}

			setState(844);
			uid();
			setState(848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET) {
				{
				{
				setState(845);
				createDatabaseOption();
				}
				}
				setState(850);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(851);
			match(CREATE);
			setState(853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(852);
				ownerStatement();
				}
			}

			setState(855);
			match(EVENT);
			setState(857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(856);
				ifNotExists();
				}
			}

			setState(859);
			fullId();
			setState(860);
			match(ON);
			setState(861);
			match(SCHEDULE);
			setState(862);
			scheduleExpression();
			setState(869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(863);
				match(ON);
				setState(864);
				match(COMPLETION);
				setState(866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(865);
					match(NOT);
					}
				}

				setState(868);
				match(PRESERVE);
				}
			}

			setState(872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(871);
				enableType();
				}
			}

			setState(876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(874);
				match(COMMENT);
				setState(875);
				match(STRING_LITERAL);
				}
			}

			setState(878);
			match(DO);
			setState(879);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(881);
			match(CREATE);
			setState(883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(882);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(885);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(888);
			match(INDEX);
			setState(889);
			uid();
			setState(891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(890);
				indexType();
				}
			}

			setState(893);
			match(ON);
			setState(894);
			tableName();
			setState(895);
			indexColumnNames();
			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				setState(896);
				indexOption();
				}
				}
				setState(901);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(914);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(912);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(902);
						match(ALGORITHM);
						setState(904);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(903);
							match(EQUAL_SYMBOL);
							}
						}

						setState(906);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(907);
						match(LOCK);
						setState(909);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(908);
							match(EQUAL_SYMBOL);
							}
						}

						setState(911);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(916);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(917);
			match(CREATE);
			setState(918);
			match(LOGFILE);
			setState(919);
			match(GROUP);
			setState(920);
			uid();
			setState(921);
			match(ADD);
			setState(922);
			match(UNDOFILE);
			setState(923);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(924);
				match(INITIAL_SIZE);
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(925);
					match(EQUAL_SYMBOL);
					}
				}

				setState(928);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(931);
				match(UNDO_BUFFER_SIZE);
				setState(933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(932);
					match(EQUAL_SYMBOL);
					}
				}

				setState(935);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(938);
				match(REDO_BUFFER_SIZE);
				setState(940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(939);
					match(EQUAL_SYMBOL);
					}
				}

				setState(942);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(945);
				match(NODEGROUP);
				setState(947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(946);
					match(EQUAL_SYMBOL);
					}
				}

				setState(949);
				uid();
				}
			}

			setState(953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(952);
				match(WAIT);
				}
			}

			setState(960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(955);
				match(COMMENT);
				setState(957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(956);
					match(EQUAL_SYMBOL);
					}
				}

				setState(959);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(962);
			match(ENGINE);
			setState(964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(963);
				match(EQUAL_SYMBOL);
				}
			}

			setState(966);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(968);
			match(CREATE);
			setState(970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(969);
				ownerStatement();
				}
			}

			setState(972);
			match(PROCEDURE);
			setState(973);
			fullId();
			setState(974);
			match(LR_BRACKET);
			setState(976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IN - 34)) | (1L << (INOUT - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (OUT - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(975);
				procedureParameter();
				}
			}

			setState(982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(978);
				match(COMMA);
				setState(979);
				procedureParameter();
				}
				}
				setState(984);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(985);
			match(RR_BRACKET);
			setState(989);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(986);
					routineOption();
					}
					} 
				}
				setState(991);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(992);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(994);
			match(CREATE);
			setState(996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(995);
				ownerStatement();
				}
			}

			setState(998);
			match(FUNCTION);
			setState(999);
			fullId();
			setState(1000);
			match(LR_BRACKET);
			setState(1002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(1001);
				functionParameter();
				}
			}

			setState(1008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1004);
				match(COMMA);
				setState(1005);
				functionParameter();
				}
				}
				setState(1010);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1011);
			match(RR_BRACKET);
			setState(1012);
			match(RETURNS);
			setState(1013);
			dataType();
			setState(1017);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1014);
					routineOption();
					}
					} 
				}
				setState(1019);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			}
			setState(1022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(1020);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(1021);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1024);
			match(CREATE);
			setState(1025);
			match(SERVER);
			setState(1026);
			uid();
			setState(1027);
			match(FOREIGN);
			setState(1028);
			match(DATA);
			setState(1029);
			match(WRAPPER);
			setState(1030);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1031);
			match(OPTIONS);
			setState(1032);
			match(LR_BRACKET);
			setState(1033);
			serverOption();
			setState(1038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1034);
				match(COMMA);
				setState(1035);
				serverOption();
				}
				}
				setState(1040);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1041);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1043);
				match(CREATE);
				setState(1045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1044);
					match(TEMPORARY);
					}
				}

				setState(1047);
				match(TABLE);
				setState(1049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1048);
					ifNotExists();
					}
				}

				setState(1051);
				tableName();
				setState(1059);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1052);
					match(LIKE);
					setState(1053);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1054);
					match(LR_BRACKET);
					setState(1055);
					match(LIKE);
					setState(1056);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1057);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1061);
				match(CREATE);
				setState(1063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1062);
					match(TEMPORARY);
					}
				}

				setState(1065);
				match(TABLE);
				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1066);
					ifNotExists();
					}
				}

				setState(1069);
				tableName();
				setState(1071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1070);
					createDefinitions();
					}
					break;
				}
				setState(1083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (AUTO_INCREMENT - 329)) | (1L << (AVG_ROW_LENGTH - 329)) | (1L << (CHECKSUM - 329)) | (1L << (PAGE_CHECKSUM - 329)) | (1L << (COMMENT - 329)) | (1L << (COMPRESSION - 329)) | (1L << (CONNECTION - 329)) | (1L << (DATA - 329)) | (1L << (DELAY_KEY_WRITE - 329)) | (1L << (ENCRYPTION - 329)) | (1L << (ENGINE - 329)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (INSERT_METHOD - 435)) | (1L << (KEY_BLOCK_SIZE - 435)) | (1L << (MAX_ROWS - 435)) | (1L << (MIN_ROWS - 435)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (PACK_KEYS - 517)) | (1L << (PASSWORD - 517)) | (1L << (ROW_FORMAT - 517)))) != 0) || ((((_la - 597)) & ~0x3f) == 0 && ((1L << (_la - 597)) & ((1L << (STATS_AUTO_RECALC - 597)) | (1L << (STATS_PERSISTENT - 597)) | (1L << (STATS_SAMPLE_PAGES - 597)) | (1L << (STORAGE - 597)) | (1L << (TABLESPACE - 597)) | (1L << (TABLE_TYPE - 597)))) != 0) || _la==CHARSET) {
					{
					setState(1073);
					tableOption();
					setState(1080);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (AUTO_INCREMENT - 329)) | (1L << (AVG_ROW_LENGTH - 329)) | (1L << (CHECKSUM - 329)) | (1L << (PAGE_CHECKSUM - 329)) | (1L << (COMMENT - 329)) | (1L << (COMPRESSION - 329)) | (1L << (CONNECTION - 329)) | (1L << (DATA - 329)) | (1L << (DELAY_KEY_WRITE - 329)) | (1L << (ENCRYPTION - 329)) | (1L << (ENGINE - 329)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (INSERT_METHOD - 435)) | (1L << (KEY_BLOCK_SIZE - 435)) | (1L << (MAX_ROWS - 435)) | (1L << (MIN_ROWS - 435)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (PACK_KEYS - 517)) | (1L << (PASSWORD - 517)) | (1L << (ROW_FORMAT - 517)))) != 0) || ((((_la - 597)) & ~0x3f) == 0 && ((1L << (_la - 597)) & ((1L << (STATS_AUTO_RECALC - 597)) | (1L << (STATS_PERSISTENT - 597)) | (1L << (STATS_SAMPLE_PAGES - 597)) | (1L << (STORAGE - 597)) | (1L << (TABLESPACE - 597)) | (1L << (TABLE_TYPE - 597)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1075);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1074);
							match(COMMA);
							}
						}

						setState(1077);
						tableOption();
						}
						}
						setState(1082);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1085);
					partitionDefinitions();
					}
				}

				setState(1089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1088);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1091);
					match(AS);
					}
				}

				setState(1094);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1096);
				match(CREATE);
				setState(1098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1097);
					match(TEMPORARY);
					}
				}

				setState(1100);
				match(TABLE);
				setState(1102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1101);
					ifNotExists();
					}
				}

				setState(1104);
				tableName();
				setState(1105);
				createDefinitions();
				setState(1116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1106);
					tableOption();
					setState(1113);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1108);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1107);
								match(COMMA);
								}
							}

							setState(1110);
							tableOption();
							}
							} 
						}
						setState(1115);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					}
					}
					break;
				}
				setState(1119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1118);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1123);
			match(CREATE);
			setState(1124);
			match(TABLESPACE);
			setState(1125);
			uid();
			setState(1126);
			match(ADD);
			setState(1127);
			match(DATAFILE);
			setState(1128);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1129);
				match(FILE_BLOCK_SIZE);
				setState(1130);
				match(EQUAL_SYMBOL);
				setState(1131);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1134);
				match(ENGINE);
				setState(1136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1135);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1138);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1141);
			match(CREATE);
			setState(1142);
			match(TABLESPACE);
			setState(1143);
			uid();
			setState(1144);
			match(ADD);
			setState(1145);
			match(DATAFILE);
			setState(1146);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1147);
			match(USE);
			setState(1148);
			match(LOGFILE);
			setState(1149);
			match(GROUP);
			setState(1150);
			uid();
			setState(1156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1151);
				match(EXTENT_SIZE);
				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1152);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1155);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1158);
				match(INITIAL_SIZE);
				setState(1160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1159);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1162);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1165);
				match(AUTOEXTEND_SIZE);
				setState(1167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1166);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1169);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1172);
				match(MAX_SIZE);
				setState(1174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1173);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1176);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1179);
				match(NODEGROUP);
				setState(1181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1180);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1183);
				uid();
				}
			}

			setState(1187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1186);
				match(WAIT);
				}
			}

			setState(1194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1189);
				match(COMMENT);
				setState(1191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1190);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1193);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1196);
			match(ENGINE);
			setState(1198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1197);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1200);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(CREATE);
			setState(1204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1203);
				ownerStatement();
				}
			}

			setState(1206);
			match(TRIGGER);
			setState(1207);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1208);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1209);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1210);
			match(ON);
			setState(1211);
			tableName();
			setState(1212);
			match(FOR);
			setState(1213);
			match(EACH);
			setState(1214);
			match(ROW);
			setState(1217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1215);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1216);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1219);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1221);
			match(CREATE);
			setState(1224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1222);
				match(OR);
				setState(1223);
				match(REPLACE);
				}
			}

			setState(1229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1226);
				match(ALGORITHM);
				setState(1227);
				match(EQUAL_SYMBOL);
				setState(1228);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1231);
				ownerStatement();
				}
			}

			setState(1237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1234);
				match(SQL);
				setState(1235);
				match(SECURITY);
				setState(1236);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1239);
			match(VIEW);
			setState(1240);
			fullId();
			setState(1245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1241);
				match(LR_BRACKET);
				setState(1242);
				uidList();
				setState(1243);
				match(RR_BRACKET);
				}
			}

			setState(1247);
			match(AS);
			setState(1248);
			selectStatement();
			setState(1255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1249);
				match(WITH);
				setState(1251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1250);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1253);
				match(CHECK);
				setState(1254);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1257);
					match(DEFAULT);
					}
				}

				setState(1260);
				charSet();
				setState(1262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1261);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1266);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1264);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1265);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1268);
					match(DEFAULT);
					}
				}

				setState(1271);
				match(COLLATE);
				setState(1273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1272);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1275);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharSetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharSetContext charSet() throws RecognitionException {
		CharSetContext _localctx = new CharSetContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_charSet);
		try {
			setState(1283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1278);
				match(CHARACTER);
				setState(1279);
				match(SET);
				}
				break;
			case CHARSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1280);
				match(CHARSET);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1281);
				match(CHAR);
				setState(1282);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			match(DEFINER);
			setState(1286);
			match(EQUAL_SYMBOL);
			setState(1293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				setState(1287);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1288);
				match(CURRENT_USER);
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1289);
					match(LR_BRACKET);
					setState(1290);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_scheduleExpression);
		int _la;
		try {
			setState(1329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1295);
				match(AT);
				setState(1296);
				timestampValue();
				setState(1300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1297);
					intervalExpr();
					}
					}
					setState(1302);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1303);
				match(EVERY);
				setState(1306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1304);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1305);
					expression(0);
					}
					break;
				}
				setState(1308);
				intervalType();
				setState(1317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1309);
					match(STARTS);
					setState(1310);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1314);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1311);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1316);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1319);
					match(ENDS);
					setState(1320);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1324);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1321);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1326);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_timestampValue);
		try {
			setState(1335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1331);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1332);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1333);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1334);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1337);
			match(PLUS);
			setState(1338);
			match(INTERVAL);
			setState(1341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1339);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1340);
				expression(0);
				}
				break;
			}
			setState(1343);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_intervalType);
		try {
			setState(1358);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1345);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1346);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1347);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1348);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1349);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1350);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1351);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1352);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1353);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1354);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1355);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1356);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1357);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_enableType);
		try {
			setState(1365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1360);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1361);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1362);
				match(DISABLE);
				setState(1363);
				match(ON);
				setState(1364);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1367);
			match(USING);
			setState(1368);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_indexOption);
		int _la;
		try {
			setState(1383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1370);
				match(KEY_BLOCK_SIZE);
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1371);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1374);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1375);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1376);
				match(WITH);
				setState(1377);
				match(PARSER);
				setState(1378);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1379);
				match(COMMENT);
				setState(1380);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1381);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1382);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (IN - 76)) | (1L << (INOUT - 76)) | (1L << (OUT - 76)))) != 0)) {
				{
				setState(1385);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (IN - 76)) | (1L << (INOUT - 76)) | (1L << (OUT - 76)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1388);
			uid();
			setState(1389);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1391);
			uid();
			setState(1392);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_routineOption);
		int _la;
		try {
			setState(1417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1394);
				match(COMMENT);
				setState(1395);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1396);
				match(LANGUAGE);
				setState(1397);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1398);
					match(NOT);
					}
				}

				setState(1401);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1412);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1402);
					match(CONTAINS);
					setState(1403);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1404);
					match(NO);
					setState(1405);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1406);
					match(READS);
					setState(1407);
					match(SQL);
					setState(1408);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1409);
					match(MODIFIES);
					setState(1410);
					match(SQL);
					setState(1411);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1414);
				match(SQL);
				setState(1415);
				match(SECURITY);
				setState(1416);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_serverOption);
		try {
			setState(1433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1419);
				match(HOST);
				setState(1420);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1421);
				match(DATABASE);
				setState(1422);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1423);
				match(USER);
				setState(1424);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1425);
				match(PASSWORD);
				setState(1426);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1427);
				match(SOCKET);
				setState(1428);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1429);
				match(OWNER);
				setState(1430);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1431);
				match(PORT);
				setState(1432);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			match(LR_BRACKET);
			setState(1436);
			createDefinition();
			setState(1441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1437);
				match(COMMA);
				setState(1438);
				createDefinition();
				}
				}
				setState(1443);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1444);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createDefinition);
		try {
			setState(1451);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1446);
				uid();
				setState(1447);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1449);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1450);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1453);
			dataType();
			setState(1457);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1454);
					columnConstraint();
					}
					} 
				}
				setState(1459);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_columnConstraint);
		int _la;
		try {
			setState(1513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1460);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1461);
				match(DEFAULT);
				setState(1462);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1463);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1464);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1469);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1465);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1466);
					match(ON);
					setState(1467);
					match(UPDATE);
					setState(1468);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1471);
					match(PRIMARY);
					}
				}

				setState(1474);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1475);
				match(UNIQUE);
				setState(1477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1476);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1479);
				match(COMMENT);
				setState(1480);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1481);
				match(COLUMN_FORMAT);
				setState(1482);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1483);
				match(STORAGE);
				setState(1484);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1485);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1486);
				match(COLLATE);
				setState(1487);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1488);
					match(GENERATED);
					setState(1489);
					match(ALWAYS);
					}
				}

				setState(1492);
				match(AS);
				setState(1493);
				match(LR_BRACKET);
				setState(1494);
				expression(0);
				setState(1495);
				match(RR_BRACKET);
				setState(1497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1496);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1499);
				match(SERIAL);
				setState(1500);
				match(DEFAULT);
				setState(1501);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1502);
					match(CONSTRAINT);
					setState(1504);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(1503);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1508);
				match(CHECK);
				setState(1509);
				match(LR_BRACKET);
				setState(1510);
				expression(0);
				setState(1511);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_tableConstraint);
		int _la;
		try {
			setState(1584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1515);
					match(CONSTRAINT);
					setState(1517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(1516);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1521);
				match(PRIMARY);
				setState(1522);
				match(KEY);
				setState(1524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(1523);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1526);
					indexType();
					}
				}

				setState(1529);
				indexColumnNames();
				setState(1533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1530);
					indexOption();
					}
					}
					setState(1535);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1536);
					match(CONSTRAINT);
					setState(1538);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(1537);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1542);
				match(UNIQUE);
				setState(1544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1543);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(1546);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1549);
					indexType();
					}
				}

				setState(1552);
				indexColumnNames();
				setState(1556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1553);
					indexOption();
					}
					}
					setState(1558);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1559);
					match(CONSTRAINT);
					setState(1561);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(1560);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1565);
				match(FOREIGN);
				setState(1566);
				match(KEY);
				setState(1568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(1567);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1570);
				indexColumnNames();
				setState(1571);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1573);
					match(CONSTRAINT);
					setState(1575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(1574);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1579);
				match(CHECK);
				setState(1580);
				match(LR_BRACKET);
				setState(1581);
				expression(0);
				setState(1582);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			match(REFERENCES);
			setState(1587);
			tableName();
			setState(1589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1588);
				indexColumnNames();
				}
				break;
			}
			setState(1593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1591);
				match(MATCH);
				setState(1592);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1595);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceAction);
		try {
			setState(1614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1598);
				match(ON);
				setState(1599);
				match(DELETE);
				setState(1600);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1604);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1601);
					match(ON);
					setState(1602);
					match(UPDATE);
					setState(1603);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1606);
				match(ON);
				setState(1607);
				match(UPDATE);
				setState(1608);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1612);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					setState(1609);
					match(ON);
					setState(1610);
					match(DELETE);
					setState(1611);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_referenceControlType);
		try {
			setState(1622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1616);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1617);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1618);
				match(SET);
				setState(1619);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1620);
				match(NO);
				setState(1621);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1624);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(1625);
					uid();
					}
				}

				setState(1629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1628);
					indexType();
					}
				}

				setState(1631);
				indexColumnNames();
				setState(1635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1632);
					indexOption();
					}
					}
					setState(1637);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1638);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1639);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(1642);
					uid();
					}
				}

				setState(1645);
				indexColumnNames();
				setState(1649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1646);
					indexOption();
					}
					}
					setState(1651);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTableType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableOption);
		int _la;
		try {
			setState(1799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1654);
				match(ENGINE);
				setState(1656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1655);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECT || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (ARCHIVE - 745)) | (1L << (BLACKHOLE - 745)) | (1L << (CSV - 745)) | (1L << (FEDERATED - 745)) | (1L << (INNODB - 745)) | (1L << (MEMORY - 745)) | (1L << (MRG_MYISAM - 745)) | (1L << (MYISAM - 745)) | (1L << (NDB - 745)) | (1L << (NDBCLUSTER - 745)) | (1L << (PERFORMANCE_SCHEMA - 745)) | (1L << (TOKUDB - 745)))) != 0) || ((((_la - 1102)) & ~0x3f) == 0 && ((1L << (_la - 1102)) & ((1L << (STRING_LITERAL - 1102)) | (1L << (ID - 1102)) | (1L << (REVERSE_QUOTE_ID - 1102)))) != 0)) {
					{
					setState(1658);
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1661);
				match(AUTO_INCREMENT);
				setState(1663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1662);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1665);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1666);
				match(AVG_ROW_LENGTH);
				setState(1668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1667);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1670);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1671);
					match(DEFAULT);
					}
				}

				setState(1674);
				charSet();
				setState(1676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1675);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1680);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1678);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1679);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1682);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1683);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1686);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1687);
					match(DEFAULT);
					}
				}

				setState(1690);
				match(COLLATE);
				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1691);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1694);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1695);
				match(COMMENT);
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1696);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1699);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1700);
				match(COMPRESSION);
				setState(1702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1701);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1704);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1705);
				match(CONNECTION);
				setState(1707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1706);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1709);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1710);
				match(DATA);
				setState(1711);
				match(DIRECTORY);
				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1712);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1715);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1716);
				match(DELAY_KEY_WRITE);
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1717);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1720);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1721);
				match(ENCRYPTION);
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1722);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1725);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1726);
				match(INDEX);
				setState(1727);
				match(DIRECTORY);
				setState(1729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1728);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1731);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1732);
				match(INSERT_METHOD);
				setState(1734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1733);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1736);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1737);
				match(KEY_BLOCK_SIZE);
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1738);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1741);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1742);
				match(MAX_ROWS);
				setState(1744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1743);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1746);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1747);
				match(MIN_ROWS);
				setState(1749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1748);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1751);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1752);
				match(PACK_KEYS);
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1753);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1756);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1757);
				match(PASSWORD);
				setState(1759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1758);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1761);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1762);
				match(ROW_FORMAT);
				setState(1764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1763);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1766);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMPACT - 356)) | (1L << (COMPRESSED - 356)) | (1L << (DYNAMIC - 356)) | (1L << (FIXED - 356)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1767);
				match(STATS_AUTO_RECALC);
				setState(1769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1768);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1771);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1772);
				match(STATS_PERSISTENT);
				setState(1774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1773);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1776);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1777);
				match(STATS_SAMPLE_PAGES);
				setState(1779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1778);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1781);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1782);
				match(TABLESPACE);
				setState(1783);
				uid();
				setState(1785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					setState(1784);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1787);
				match(TABLE_TYPE);
				setState(1788);
				match(EQUAL_SYMBOL);
				setState(1789);
				tableType();
				}
				break;
			case 26:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1790);
				tablespaceStorage();
				}
				break;
			case 27:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1791);
				match(UNION);
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1792);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1795);
				match(LR_BRACKET);
				setState(1796);
				tables();
				setState(1797);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803);
			match(STORAGE);
			setState(1804);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			match(PARTITION);
			setState(1807);
			match(BY);
			setState(1808);
			partitionFunctionDefinition();
			setState(1811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1809);
				match(PARTITIONS);
				setState(1810);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1813);
				match(SUBPARTITION);
				setState(1814);
				match(BY);
				setState(1815);
				subpartitionFunctionDefinition();
				setState(1818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1816);
					match(SUBPARTITIONS);
					setState(1817);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(1822);
				match(LR_BRACKET);
				setState(1823);
				partitionDefinition();
				setState(1828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1824);
					match(COMMA);
					setState(1825);
					partitionDefinition();
					}
					}
					setState(1830);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1831);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1835);
					match(LINEAR);
					}
				}

				setState(1838);
				match(HASH);
				setState(1839);
				match(LR_BRACKET);
				setState(1840);
				expression(0);
				setState(1841);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1843);
					match(LINEAR);
					}
				}

				setState(1846);
				match(KEY);
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1847);
					match(ALGORITHM);
					setState(1848);
					match(EQUAL_SYMBOL);
					setState(1849);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1852);
				match(LR_BRACKET);
				setState(1853);
				uidList();
				setState(1854);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1856);
				match(RANGE);
				setState(1866);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1857);
					match(LR_BRACKET);
					setState(1858);
					expression(0);
					setState(1859);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1861);
					match(COLUMNS);
					setState(1862);
					match(LR_BRACKET);
					setState(1863);
					uidList();
					setState(1864);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1868);
				match(LIST);
				setState(1878);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1869);
					match(LR_BRACKET);
					setState(1870);
					expression(0);
					setState(1871);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1873);
					match(COLUMNS);
					setState(1874);
					match(LR_BRACKET);
					setState(1875);
					uidList();
					setState(1876);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1882);
					match(LINEAR);
					}
				}

				setState(1885);
				match(HASH);
				setState(1886);
				match(LR_BRACKET);
				setState(1887);
				expression(0);
				setState(1888);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1890);
					match(LINEAR);
					}
				}

				setState(1893);
				match(KEY);
				setState(1897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1894);
					match(ALGORITHM);
					setState(1895);
					match(EQUAL_SYMBOL);
					setState(1896);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1899);
				match(LR_BRACKET);
				setState(1900);
				uidList();
				setState(1901);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinition);
		int _la;
		try {
			setState(2051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1905);
				match(PARTITION);
				setState(1906);
				uid();
				setState(1907);
				match(VALUES);
				setState(1908);
				match(LESS);
				setState(1909);
				match(THAN);
				setState(1910);
				match(LR_BRACKET);
				setState(1911);
				partitionDefinerAtom();
				setState(1916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1912);
					match(COMMA);
					setState(1913);
					partitionDefinerAtom();
					}
					}
					setState(1918);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1919);
				match(RR_BRACKET);
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (COMMENT - 354)) | (1L << (DATA - 354)) | (1L << (ENGINE - 354)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_ROWS - 480)) | (1L << (MIN_ROWS - 480)) | (1L << (NODEGROUP - 480)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1920);
					partitionOption();
					}
					}
					setState(1925);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1926);
					match(LR_BRACKET);
					setState(1927);
					subpartitionDefinition();
					setState(1932);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1928);
						match(COMMA);
						setState(1929);
						subpartitionDefinition();
						}
						}
						setState(1934);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1935);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1939);
				match(PARTITION);
				setState(1940);
				uid();
				setState(1941);
				match(VALUES);
				setState(1942);
				match(LESS);
				setState(1943);
				match(THAN);
				setState(1944);
				partitionDefinerAtom();
				setState(1948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (COMMENT - 354)) | (1L << (DATA - 354)) | (1L << (ENGINE - 354)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_ROWS - 480)) | (1L << (MIN_ROWS - 480)) | (1L << (NODEGROUP - 480)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1945);
					partitionOption();
					}
					}
					setState(1950);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1951);
					match(LR_BRACKET);
					setState(1952);
					subpartitionDefinition();
					setState(1957);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1953);
						match(COMMA);
						setState(1954);
						subpartitionDefinition();
						}
						}
						setState(1959);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1960);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1964);
				match(PARTITION);
				setState(1965);
				uid();
				setState(1966);
				match(VALUES);
				setState(1967);
				match(IN);
				setState(1968);
				match(LR_BRACKET);
				setState(1969);
				partitionDefinerAtom();
				setState(1974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1970);
					match(COMMA);
					setState(1971);
					partitionDefinerAtom();
					}
					}
					setState(1976);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1977);
				match(RR_BRACKET);
				setState(1981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (COMMENT - 354)) | (1L << (DATA - 354)) | (1L << (ENGINE - 354)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_ROWS - 480)) | (1L << (MIN_ROWS - 480)) | (1L << (NODEGROUP - 480)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1978);
					partitionOption();
					}
					}
					setState(1983);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1984);
					match(LR_BRACKET);
					setState(1985);
					subpartitionDefinition();
					setState(1990);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1986);
						match(COMMA);
						setState(1987);
						subpartitionDefinition();
						}
						}
						setState(1992);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1993);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1997);
				match(PARTITION);
				setState(1998);
				uid();
				setState(1999);
				match(VALUES);
				setState(2000);
				match(IN);
				setState(2001);
				match(LR_BRACKET);
				setState(2002);
				partitionDefinerVector();
				setState(2007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2003);
					match(COMMA);
					setState(2004);
					partitionDefinerVector();
					}
					}
					setState(2009);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2010);
				match(RR_BRACKET);
				setState(2014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (COMMENT - 354)) | (1L << (DATA - 354)) | (1L << (ENGINE - 354)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_ROWS - 480)) | (1L << (MIN_ROWS - 480)) | (1L << (NODEGROUP - 480)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2011);
					partitionOption();
					}
					}
					setState(2016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2017);
					match(LR_BRACKET);
					setState(2018);
					subpartitionDefinition();
					setState(2023);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2019);
						match(COMMA);
						setState(2020);
						subpartitionDefinition();
						}
						}
						setState(2025);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2026);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2030);
				match(PARTITION);
				setState(2031);
				uid();
				setState(2035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (COMMENT - 354)) | (1L << (DATA - 354)) | (1L << (ENGINE - 354)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_ROWS - 480)) | (1L << (MIN_ROWS - 480)) | (1L << (NODEGROUP - 480)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2032);
					partitionOption();
					}
					}
					setState(2037);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2038);
					match(LR_BRACKET);
					setState(2039);
					subpartitionDefinition();
					setState(2044);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2040);
						match(COMMA);
						setState(2041);
						subpartitionDefinition();
						}
						}
						setState(2046);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2047);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_partitionDefinerAtom);
		try {
			setState(2056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2053);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2054);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2055);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2058);
			match(LR_BRACKET);
			setState(2059);
			partitionDefinerAtom();
			setState(2062); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2060);
				match(COMMA);
				setState(2061);
				partitionDefinerAtom();
				}
				}
				setState(2064); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2066);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2068);
			match(SUBPARTITION);
			setState(2069);
			uid();
			setState(2073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (COMMENT - 354)) | (1L << (DATA - 354)) | (1L << (ENGINE - 354)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (MAX_ROWS - 480)) | (1L << (MIN_ROWS - 480)) | (1L << (NODEGROUP - 480)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2070);
				partitionOption();
				}
				}
				setState(2075);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_partitionOption);
		int _la;
		try {
			setState(2124);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2076);
					match(DEFAULT);
					}
				}

				setState(2080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2079);
					match(STORAGE);
					}
				}

				setState(2082);
				match(ENGINE);
				setState(2084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2083);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2086);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2087);
				match(COMMENT);
				setState(2089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2088);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2091);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2092);
				match(DATA);
				setState(2093);
				match(DIRECTORY);
				setState(2095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2094);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2097);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2098);
				match(INDEX);
				setState(2099);
				match(DIRECTORY);
				setState(2101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2100);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2103);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2104);
				match(MAX_ROWS);
				setState(2106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2105);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2108);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2109);
				match(MIN_ROWS);
				setState(2111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2110);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2113);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2114);
				match(TABLESPACE);
				setState(2116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2115);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2118);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2119);
				match(NODEGROUP);
				setState(2121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2120);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2123);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterDatabase);
		int _la;
		try {
			setState(2144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2126);
				match(ALTER);
				setState(2127);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2128);
					uid();
					}
					break;
				}
				setState(2132); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2131);
					createDatabaseOption();
					}
					}
					setState(2134); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2136);
				match(ALTER);
				setState(2137);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2138);
				uid();
				setState(2139);
				match(UPGRADE);
				setState(2140);
				match(DATA);
				setState(2141);
				match(DIRECTORY);
				setState(2142);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2146);
			match(ALTER);
			setState(2148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2147);
				ownerStatement();
				}
			}

			setState(2150);
			match(EVENT);
			setState(2151);
			fullId();
			setState(2155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2152);
				match(ON);
				setState(2153);
				match(SCHEDULE);
				setState(2154);
				scheduleExpression();
				}
				break;
			}
			setState(2163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2157);
				match(ON);
				setState(2158);
				match(COMPLETION);
				setState(2160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2159);
					match(NOT);
					}
				}

				setState(2162);
				match(PRESERVE);
				}
			}

			setState(2168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(2165);
				match(RENAME);
				setState(2166);
				match(TO);
				setState(2167);
				fullId();
				}
				break;
			}
			setState(2171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2170);
				enableType();
				}
			}

			setState(2175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2173);
				match(COMMENT);
				setState(2174);
				match(STRING_LITERAL);
				}
			}

			setState(2179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(2177);
				match(DO);
				setState(2178);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2181);
			match(ALTER);
			setState(2182);
			match(FUNCTION);
			setState(2183);
			fullId();
			setState(2187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (MODIFIES - 105)) | (1L << (NOT - 105)) | (1L << (READS - 105)) | (1L << (SQL - 105)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2184);
				routineOption();
				}
				}
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			match(ALTER);
			setState(2191);
			match(INSTANCE);
			setState(2192);
			match(ROTATE);
			setState(2193);
			match(INNODB);
			setState(2194);
			match(MASTER);
			setState(2195);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2197);
			match(ALTER);
			setState(2198);
			match(LOGFILE);
			setState(2199);
			match(GROUP);
			setState(2200);
			uid();
			setState(2201);
			match(ADD);
			setState(2202);
			match(UNDOFILE);
			setState(2203);
			match(STRING_LITERAL);
			setState(2209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2204);
				match(INITIAL_SIZE);
				setState(2206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2205);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2208);
				fileSizeLiteral();
				}
			}

			setState(2212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2211);
				match(WAIT);
				}
			}

			setState(2214);
			match(ENGINE);
			setState(2216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2215);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2218);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2220);
			match(ALTER);
			setState(2221);
			match(PROCEDURE);
			setState(2222);
			fullId();
			setState(2226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (MODIFIES - 105)) | (1L << (NOT - 105)) | (1L << (READS - 105)) | (1L << (SQL - 105)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2223);
				routineOption();
				}
				}
				setState(2228);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			match(ALTER);
			setState(2230);
			match(SERVER);
			setState(2231);
			uid();
			setState(2232);
			match(OPTIONS);
			setState(2233);
			match(LR_BRACKET);
			setState(2234);
			serverOption();
			setState(2239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2235);
				match(COMMA);
				setState(2236);
				serverOption();
				}
				}
				setState(2241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2242);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2244);
			match(ALTER);
			setState(2246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2245);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2248);
				match(IGNORE);
				}
			}

			setState(2251);
			match(TABLE);
			setState(2252);
			tableName();
			setState(2261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2253);
				alterSpecification();
				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2254);
					match(COMMA);
					setState(2255);
					alterSpecification();
					}
					}
					setState(2260);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2263);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2266);
			match(ALTER);
			setState(2267);
			match(TABLESPACE);
			setState(2268);
			uid();
			setState(2269);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2270);
			match(DATAFILE);
			setState(2271);
			match(STRING_LITERAL);
			setState(2275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2272);
				match(INITIAL_SIZE);
				setState(2273);
				match(EQUAL_SYMBOL);
				setState(2274);
				fileSizeLiteral();
				}
			}

			setState(2278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2277);
				match(WAIT);
				}
			}

			setState(2280);
			match(ENGINE);
			setState(2282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2281);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2284);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2286);
			match(ALTER);
			setState(2290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2287);
				match(ALGORITHM);
				setState(2288);
				match(EQUAL_SYMBOL);
				setState(2289);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2292);
				ownerStatement();
				}
			}

			setState(2298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2295);
				match(SQL);
				setState(2296);
				match(SECURITY);
				setState(2297);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2300);
			match(VIEW);
			setState(2301);
			fullId();
			setState(2306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2302);
				match(LR_BRACKET);
				setState(2303);
				uidList();
				setState(2304);
				match(RR_BRACKET);
				}
			}

			setState(2308);
			match(AS);
			setState(2309);
			selectStatement();
			setState(2316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2310);
				match(WITH);
				setState(2312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2311);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2314);
				match(CHECK);
				setState(2315);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropConstraintCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropConstraintCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropConstraintCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAlterIndexVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAlterIndexVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2318);
				tableOption();
				setState(2325);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2320);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2319);
							match(COMMA);
							}
						}

						setState(2322);
						tableOption();
						}
						} 
					}
					setState(2327);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2328);
				match(ADD);
				setState(2330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2329);
					match(COLUMN);
					}
				}

				setState(2332);
				uid();
				setState(2333);
				columnDefinition();
				setState(2337);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2334);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2335);
					match(AFTER);
					setState(2336);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2339);
				match(ADD);
				setState(2341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2340);
					match(COLUMN);
					}
				}

				setState(2343);
				match(LR_BRACKET);
				setState(2344);
				uid();
				setState(2345);
				columnDefinition();
				setState(2352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2346);
					match(COMMA);
					setState(2347);
					uid();
					setState(2348);
					columnDefinition();
					}
					}
					setState(2354);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2355);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2357);
				match(ADD);
				setState(2358);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(2359);
					uid();
					}
				}

				setState(2363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2362);
					indexType();
					}
				}

				setState(2365);
				indexColumnNames();
				setState(2369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2366);
					indexOption();
					}
					}
					setState(2371);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2372);
				match(ADD);
				setState(2377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2373);
					match(CONSTRAINT);
					setState(2375);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(2374);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2379);
				match(PRIMARY);
				setState(2380);
				match(KEY);
				setState(2382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(2381);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2384);
					indexType();
					}
				}

				setState(2387);
				indexColumnNames();
				setState(2391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2388);
					indexOption();
					}
					}
					setState(2393);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2394);
				match(ADD);
				setState(2399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2395);
					match(CONSTRAINT);
					setState(2397);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(2396);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2401);
				match(UNIQUE);
				setState(2403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2402);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(2405);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2408);
					indexType();
					}
				}

				setState(2411);
				indexColumnNames();
				setState(2415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2412);
					indexOption();
					}
					}
					setState(2417);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2418);
				match(ADD);
				setState(2419);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2420);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(2423);
					uid();
					}
				}

				setState(2426);
				indexColumnNames();
				setState(2430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2427);
					indexOption();
					}
					}
					setState(2432);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2433);
				match(ADD);
				setState(2438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2434);
					match(CONSTRAINT);
					setState(2436);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(2435);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2440);
				match(FOREIGN);
				setState(2441);
				match(KEY);
				setState(2443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(2442);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2445);
				indexColumnNames();
				setState(2446);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2448);
				match(ADD);
				setState(2453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2449);
					match(CONSTRAINT);
					setState(2451);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
						{
						setState(2450);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2455);
				match(CHECK);
				setState(2456);
				match(LR_BRACKET);
				setState(2457);
				expression(0);
				setState(2458);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2460);
				match(ALGORITHM);
				setState(2462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2461);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2464);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2465);
				match(ALTER);
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2466);
					match(COLUMN);
					}
				}

				setState(2469);
				uid();
				setState(2475);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2470);
					match(SET);
					setState(2471);
					match(DEFAULT);
					setState(2472);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2473);
					match(DROP);
					setState(2474);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2477);
				match(CHANGE);
				setState(2479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2478);
					match(COLUMN);
					}
				}

				setState(2481);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2482);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2483);
				columnDefinition();
				setState(2487);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2484);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2485);
					match(AFTER);
					setState(2486);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2489);
				match(RENAME);
				setState(2490);
				match(COLUMN);
				setState(2491);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2492);
				match(TO);
				setState(2493);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2495);
				match(LOCK);
				setState(2497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2496);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2499);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2500);
				match(MODIFY);
				setState(2502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2501);
					match(COLUMN);
					}
				}

				setState(2504);
				uid();
				setState(2505);
				columnDefinition();
				setState(2509);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2506);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2507);
					match(AFTER);
					setState(2508);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2511);
				match(DROP);
				setState(2513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2512);
					match(COLUMN);
					}
				}

				setState(2515);
				uid();
				setState(2517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2516);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2519);
				match(DROP);
				setState(2520);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2521);
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2522);
				match(DROP);
				setState(2523);
				match(PRIMARY);
				setState(2524);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2525);
				match(RENAME);
				setState(2526);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2527);
				uid();
				setState(2528);
				match(TO);
				setState(2529);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2531);
				match(ALTER);
				setState(2532);
				match(INDEX);
				setState(2533);
				uid();
				setState(2534);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2536);
				match(DROP);
				setState(2537);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2538);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2539);
				match(DROP);
				setState(2540);
				match(FOREIGN);
				setState(2541);
				match(KEY);
				setState(2542);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2543);
				match(DISABLE);
				setState(2544);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2545);
				match(ENABLE);
				setState(2546);
				match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2547);
				match(RENAME);
				setState(2549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2548);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(2551);
					uid();
					}
					break;
				case 2:
					{
					setState(2552);
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2555);
				match(ORDER);
				setState(2556);
				match(BY);
				setState(2557);
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2558);
				match(CONVERT);
				setState(2559);
				match(TO);
				setState(2560);
				match(CHARACTER);
				setState(2561);
				match(SET);
				setState(2562);
				charsetName();
				setState(2565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2563);
					match(COLLATE);
					setState(2564);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2567);
					match(DEFAULT);
					}
				}

				setState(2570);
				match(CHARACTER);
				setState(2571);
				match(SET);
				setState(2572);
				match(EQUAL_SYMBOL);
				setState(2573);
				charsetName();
				setState(2577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2574);
					match(COLLATE);
					setState(2575);
					match(EQUAL_SYMBOL);
					setState(2576);
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2579);
				match(DISCARD);
				setState(2580);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2581);
				match(IMPORT);
				setState(2582);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2583);
				match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2584);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2585);
				match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2586);
				match(ADD);
				setState(2587);
				match(PARTITION);
				setState(2588);
				match(LR_BRACKET);
				setState(2589);
				partitionDefinition();
				setState(2594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2590);
					match(COMMA);
					setState(2591);
					partitionDefinition();
					}
					}
					setState(2596);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2597);
				match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2599);
				match(DROP);
				setState(2600);
				match(PARTITION);
				setState(2601);
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2602);
				match(DISCARD);
				setState(2603);
				match(PARTITION);
				setState(2606);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2604);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2605);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2608);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2609);
				match(IMPORT);
				setState(2610);
				match(PARTITION);
				setState(2613);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2611);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2612);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2615);
				match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2616);
				match(TRUNCATE);
				setState(2617);
				match(PARTITION);
				setState(2620);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2618);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2619);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2622);
				match(COALESCE);
				setState(2623);
				match(PARTITION);
				setState(2624);
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2625);
				match(REORGANIZE);
				setState(2626);
				match(PARTITION);
				setState(2627);
				uidList();
				setState(2628);
				match(INTO);
				setState(2629);
				match(LR_BRACKET);
				setState(2630);
				partitionDefinition();
				setState(2635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2631);
					match(COMMA);
					setState(2632);
					partitionDefinition();
					}
					}
					setState(2637);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2638);
				match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2640);
				match(EXCHANGE);
				setState(2641);
				match(PARTITION);
				setState(2642);
				uid();
				setState(2643);
				match(WITH);
				setState(2644);
				match(TABLE);
				setState(2645);
				tableName();
				setState(2648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2646);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2647);
					match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2650);
				match(ANALYZE);
				setState(2651);
				match(PARTITION);
				setState(2654);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2652);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2653);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2656);
				match(CHECK);
				setState(2657);
				match(PARTITION);
				setState(2660);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2658);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2659);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2662);
				match(OPTIMIZE);
				setState(2663);
				match(PARTITION);
				setState(2666);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2664);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2665);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2668);
				match(REBUILD);
				setState(2669);
				match(PARTITION);
				setState(2672);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2670);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2671);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2674);
				match(REPAIR);
				setState(2675);
				match(PARTITION);
				setState(2678);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2676);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2677);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2680);
				match(REMOVE);
				setState(2681);
				match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2682);
				match(UPGRADE);
				setState(2683);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2686);
			match(DROP);
			setState(2687);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2688);
				ifExists();
				}
			}

			setState(2691);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693);
			match(DROP);
			setState(2694);
			match(EVENT);
			setState(2696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2695);
				ifExists();
				}
			}

			setState(2698);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			match(DROP);
			setState(2701);
			match(INDEX);
			setState(2703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				setState(2702);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2705);
			uid();
			setState(2706);
			match(ON);
			setState(2707);
			tableName();
			setState(2720);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2718);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2708);
						match(ALGORITHM);
						setState(2710);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2709);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2712);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2713);
						match(LOCK);
						setState(2715);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2714);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2717);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2722);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2723);
			match(DROP);
			setState(2724);
			match(LOGFILE);
			setState(2725);
			match(GROUP);
			setState(2726);
			uid();
			setState(2727);
			match(ENGINE);
			setState(2728);
			match(EQUAL_SYMBOL);
			setState(2729);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2731);
			match(DROP);
			setState(2732);
			match(PROCEDURE);
			setState(2734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2733);
				ifExists();
				}
			}

			setState(2736);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			match(DROP);
			setState(2739);
			match(FUNCTION);
			setState(2741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2740);
				ifExists();
				}
			}

			setState(2743);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2745);
			match(DROP);
			setState(2746);
			match(SERVER);
			setState(2748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2747);
				ifExists();
				}
			}

			setState(2750);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			match(DROP);
			setState(2754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2753);
				match(TEMPORARY);
				}
			}

			setState(2756);
			match(TABLE);
			setState(2758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2757);
				ifExists();
				}
			}

			setState(2760);
			tables();
			setState(2762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2761);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2764);
			match(DROP);
			setState(2765);
			match(TABLESPACE);
			setState(2766);
			uid();
			setState(2772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2767);
				match(ENGINE);
				setState(2769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2768);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2771);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2774);
			match(DROP);
			setState(2775);
			match(TRIGGER);
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2776);
				ifExists();
				}
			}

			setState(2779);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2781);
			match(DROP);
			setState(2782);
			match(VIEW);
			setState(2784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2783);
				ifExists();
				}
			}

			setState(2786);
			fullId();
			setState(2791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2787);
				match(COMMA);
				setState(2788);
				fullId();
				}
				}
				setState(2793);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2795);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2794);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2797);
			match(RENAME);
			setState(2798);
			match(TABLE);
			setState(2799);
			renameTableClause();
			setState(2804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2800);
				match(COMMA);
				setState(2801);
				renameTableClause();
				}
				}
				setState(2806);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2807);
			tableName();
			setState(2808);
			match(TO);
			setState(2809);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2811);
			match(TRUNCATE);
			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2812);
				match(TABLE);
				}
			}

			setState(2815);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2817);
			match(CALL);
			setState(2818);
			fullId();
			setState(2825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(2819);
				match(LR_BRACKET);
				setState(2822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(2820);
					constants();
					}
					break;
				case 2:
					{
					setState(2821);
					expressions();
					}
					break;
				}
				setState(2824);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_deleteStatement);
		try {
			setState(2829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2827);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2828);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			match(DO);
			setState(2832);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_handlerStatement);
		try {
			setState(2838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2834);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2835);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2836);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2837);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			match(INSERT);
			setState(2842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				setState(2841);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2844);
				match(IGNORE);
				}
			}

			setState(2848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2847);
				match(INTO);
				}
			}

			setState(2850);
			tableName();
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2851);
				match(PARTITION);
				setState(2852);
				match(LR_BRACKET);
				setState(2854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(2853);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(2856);
				match(RR_BRACKET);
				}
			}

			setState(2875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(2859);
					match(LR_BRACKET);
					setState(2860);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(2861);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2865);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2866);
				match(SET);
				setState(2867);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2868);
					match(COMMA);
					setState(2869);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2874);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2877);
				match(ON);
				setState(2878);
				match(DUPLICATE);
				setState(2879);
				match(KEY);
				setState(2880);
				match(UPDATE);
				setState(2881);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2882);
					match(COMMA);
					setState(2883);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2891);
			match(LOAD);
			setState(2892);
			match(DATA);
			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2893);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2896);
				match(LOCAL);
				}
			}

			setState(2899);
			match(INFILE);
			setState(2900);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2901);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2904);
			match(INTO);
			setState(2905);
			match(TABLE);
			setState(2906);
			tableName();
			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2907);
				match(PARTITION);
				setState(2908);
				match(LR_BRACKET);
				setState(2909);
				uidList();
				setState(2910);
				match(RR_BRACKET);
				}
			}

			setState(2917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2914);
				match(CHARACTER);
				setState(2915);
				match(SET);
				setState(2916);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2919);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2921); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2920);
					selectFieldsInto();
					}
					}
					setState(2923); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2927);
				match(LINES);
				setState(2929); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2928);
					selectLinesInto();
					}
					}
					setState(2931); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2935);
				match(IGNORE);
				setState(2936);
				decimalLiteral();
				setState(2937);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(2941);
				match(LR_BRACKET);
				setState(2942);
				assignmentField();
				setState(2947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2943);
					match(COMMA);
					setState(2944);
					assignmentField();
					}
					}
					setState(2949);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2950);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				setState(2954);
				match(SET);
				setState(2955);
				updatedElement();
				setState(2960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2956);
					match(COMMA);
					setState(2957);
					updatedElement();
					}
					}
					setState(2962);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2965);
			match(LOAD);
			setState(2966);
			match(XML);
			setState(2968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2967);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2970);
				match(LOCAL);
				}
			}

			setState(2973);
			match(INFILE);
			setState(2974);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2975);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2978);
			match(INTO);
			setState(2979);
			match(TABLE);
			setState(2980);
			tableName();
			setState(2984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2981);
				match(CHARACTER);
				setState(2982);
				match(SET);
				setState(2983);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2986);
				match(ROWS);
				setState(2987);
				match(IDENTIFIED);
				setState(2988);
				match(BY);
				setState(2989);
				match(LESS_SYMBOL);
				setState(2990);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(2991);
				match(GREATER_SYMBOL);
				}
			}

			setState(2998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2994);
				match(IGNORE);
				setState(2995);
				decimalLiteral();
				setState(2996);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3000);
				match(LR_BRACKET);
				setState(3001);
				assignmentField();
				setState(3006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3002);
					match(COMMA);
					setState(3003);
					assignmentField();
					}
					}
					setState(3008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3009);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3013);
				match(SET);
				setState(3014);
				updatedElement();
				setState(3019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3015);
					match(COMMA);
					setState(3016);
					updatedElement();
					}
					}
					setState(3021);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3024);
			match(REPLACE);
			setState(3026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(3025);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3028);
				match(INTO);
				}
			}

			setState(3031);
			tableName();
			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3032);
				match(PARTITION);
				setState(3033);
				match(LR_BRACKET);
				setState(3034);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(3035);
				match(RR_BRACKET);
				}
			}

			setState(3055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3043);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(3039);
					match(LR_BRACKET);
					setState(3040);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(3041);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3045);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3046);
				match(SET);
				setState(3047);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(3052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3048);
					match(COMMA);
					setState(3049);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(3054);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3057);
				querySpecification();
				setState(3059);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3058);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3061);
				queryExpression();
				setState(3063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(3062);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3065);
				querySpecificationNointo();
				setState(3067); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3066);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3069); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3071);
					match(UNION);
					setState(3073);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3072);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3077);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(3075);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3076);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
				case 1:
					{
					setState(3081);
					orderByClause();
					}
					break;
				}
				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3084);
					limitClause();
					}
				}

				setState(3088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3087);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3090);
				queryExpressionNointo();
				setState(3092); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3091);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3094); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3096);
					match(UNION);
					setState(3098);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3097);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3100);
					queryExpression();
					}
				}

				setState(3104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3103);
					orderByClause();
					}
					break;
				}
				setState(3107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3106);
					limitClause();
					}
				}

				setState(3110);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					setState(3109);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_updateStatement);
		try {
			setState(3116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3114);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3115);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_insertStatementValue);
		int _la;
		try {
			setState(3136);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3118);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3119);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3120);
				match(LR_BRACKET);
				setState(3122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(3121);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3124);
				match(RR_BRACKET);
				setState(3133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3125);
					match(COMMA);
					setState(3126);
					match(LR_BRACKET);
					setState(3128);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
					case 1:
						{
						setState(3127);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3130);
					match(RR_BRACKET);
					}
					}
					setState(3135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3138);
			fullColumnName();
			setState(3139);
			match(EQUAL_SYMBOL);
			setState(3142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3140);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3141);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_assignmentField);
		try {
			setState(3146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3144);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3145);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_lockClause);
		try {
			setState(3154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3148);
				match(FOR);
				setState(3149);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3150);
				match(LOCK);
				setState(3151);
				match(IN);
				setState(3152);
				match(SHARE);
				setState(3153);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			match(DELETE);
			setState(3158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3157);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3160);
				match(QUICK);
				}
			}

			setState(3164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3163);
				match(IGNORE);
				}
			}

			setState(3166);
			match(FROM);
			setState(3167);
			tableName();
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3168);
				match(PARTITION);
				setState(3169);
				match(LR_BRACKET);
				setState(3170);
				uidList();
				setState(3171);
				match(RR_BRACKET);
				}
			}

			setState(3177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3175);
				match(WHERE);
				setState(3176);
				expression(0);
				}
			}

			setState(3180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3179);
				orderByClause();
				}
			}

			setState(3184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3182);
				match(LIMIT);
				setState(3183);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3186);
			match(DELETE);
			setState(3188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3187);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3190);
				match(QUICK);
				}
				break;
			}
			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3193);
				match(IGNORE);
				}
			}

			setState(3235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3196);
				tableName();
				setState(3199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3197);
					match(DOT);
					setState(3198);
					match(STAR);
					}
				}

				setState(3209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3201);
					match(COMMA);
					setState(3202);
					tableName();
					setState(3205);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3203);
						match(DOT);
						setState(3204);
						match(STAR);
						}
					}

					}
					}
					setState(3211);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3212);
				match(FROM);
				setState(3213);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3215);
				match(FROM);
				setState(3216);
				tableName();
				setState(3219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3217);
					match(DOT);
					setState(3218);
					match(STAR);
					}
				}

				setState(3229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3221);
					match(COMMA);
					setState(3222);
					tableName();
					setState(3225);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3223);
						match(DOT);
						setState(3224);
						match(STAR);
						}
					}

					}
					}
					setState(3231);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3232);
				match(USING);
				setState(3233);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3237);
				match(WHERE);
				setState(3238);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3241);
			match(HANDLER);
			setState(3242);
			tableName();
			setState(3243);
			match(OPEN);
			setState(3248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3244);
					match(AS);
					}
				}

				setState(3247);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3250);
			match(HANDLER);
			setState(3251);
			tableName();
			setState(3252);
			match(READ);
			setState(3253);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3254);
				comparisonOperator();
				setState(3255);
				match(LR_BRACKET);
				setState(3256);
				constants();
				setState(3257);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3259);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3262);
				match(WHERE);
				setState(3263);
				expression(0);
				}
			}

			setState(3268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3266);
				match(LIMIT);
				setState(3267);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3270);
			match(HANDLER);
			setState(3271);
			tableName();
			setState(3272);
			match(READ);
			setState(3273);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3274);
				match(WHERE);
				setState(3275);
				expression(0);
				}
			}

			setState(3280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3278);
				match(LIMIT);
				setState(3279);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3282);
			match(HANDLER);
			setState(3283);
			tableName();
			setState(3284);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3286);
			match(UPDATE);
			setState(3288);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3287);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3290);
				match(IGNORE);
				}
			}

			setState(3293);
			tableName();
			setState(3298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (AS - 12)) | (1L << (CURRENT - 12)) | (1L << (DATABASE - 12)) | (1L << (DIAGNOSTICS - 12)) | (1L << (EXCEPT - 12)) | (1L << (GROUP - 12)))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LEFT - 92)) | (1L << (NUMBER - 92)) | (1L << (OPTIONAL - 92)) | (1L << (ORDER - 92)) | (1L << (RIGHT - 92)) | (1L << (SCHEMA - 92)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (STACKED - 159)) | (1L << (DATE - 159)) | (1L << (TIME - 159)) | (1L << (TIMESTAMP - 159)) | (1L << (DATETIME - 159)) | (1L << (YEAR - 159)) | (1L << (BINARY - 159)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXT - 224)) | (1L << (ENUM - 224)) | (1L << (SERIAL - 224)) | (1L << (JSON_ARRAY - 224)) | (1L << (JSON_OBJECT - 224)) | (1L << (JSON_QUOTE - 224)) | (1L << (JSON_CONTAINS - 224)) | (1L << (JSON_CONTAINS_PATH - 224)) | (1L << (JSON_EXTRACT - 224)) | (1L << (JSON_KEYS - 224)) | (1L << (JSON_OVERLAPS - 224)) | (1L << (JSON_SEARCH - 224)) | (1L << (JSON_VALUE - 224)) | (1L << (JSON_ARRAY_APPEND - 224)) | (1L << (JSON_ARRAY_INSERT - 224)) | (1L << (JSON_INSERT - 224)) | (1L << (JSON_MERGE - 224)) | (1L << (JSON_MERGE_PATCH - 224)) | (1L << (JSON_MERGE_PRESERVE - 224)) | (1L << (JSON_REMOVE - 224)) | (1L << (JSON_REPLACE - 224)) | (1L << (JSON_SET - 224)) | (1L << (JSON_UNQUOTE - 224)) | (1L << (JSON_DEPTH - 224)) | (1L << (JSON_LENGTH - 224)) | (1L << (JSON_TYPE - 224)) | (1L << (JSON_VALID - 224)) | (1L << (JSON_TABLE - 224)) | (1L << (JSON_SCHEMA_VALID - 224)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 224)) | (1L << (JSON_PRETTY - 224)) | (1L << (JSON_STORAGE_FREE - 224)) | (1L << (JSON_STORAGE_SIZE - 224)) | (1L << (JSON_ARRAYAGG - 224)) | (1L << (JSON_OBJECTAGG - 224)) | (1L << (AVG - 224)) | (1L << (BIT_AND - 224)) | (1L << (BIT_OR - 224)) | (1L << (BIT_XOR - 224)) | (1L << (COUNT - 224)) | (1L << (GROUP_CONCAT - 224)) | (1L << (MAX - 224)) | (1L << (MIN - 224)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (STD - 292)) | (1L << (STDDEV - 292)) | (1L << (STDDEV_POP - 292)) | (1L << (STDDEV_SAMP - 292)) | (1L << (SUM - 292)) | (1L << (VAR_POP - 292)) | (1L << (VAR_SAMP - 292)) | (1L << (VARIANCE - 292)) | (1L << (POSITION - 292)) | (1L << (ACCOUNT - 292)) | (1L << (ACTION - 292)) | (1L << (AFTER - 292)) | (1L << (AGGREGATE - 292)) | (1L << (ALGORITHM - 292)) | (1L << (ANY - 292)) | (1L << (AT - 292)) | (1L << (AUTHORS - 292)) | (1L << (AUTOCOMMIT - 292)) | (1L << (AUTOEXTEND_SIZE - 292)) | (1L << (AUTO_INCREMENT - 292)) | (1L << (AVG_ROW_LENGTH - 292)) | (1L << (BEGIN - 292)) | (1L << (BINLOG - 292)) | (1L << (BIT - 292)) | (1L << (BLOCK - 292)) | (1L << (BOOL - 292)) | (1L << (BOOLEAN - 292)) | (1L << (BTREE - 292)) | (1L << (CACHE - 292)) | (1L << (CASCADED - 292)) | (1L << (CHAIN - 292)) | (1L << (CHANGED - 292)) | (1L << (CHANNEL - 292)) | (1L << (CHECKSUM - 292)) | (1L << (PAGE_CHECKSUM - 292)) | (1L << (CIPHER - 292)) | (1L << (CLASS_ORIGIN - 292)) | (1L << (CLIENT - 292)) | (1L << (CLOSE - 292)) | (1L << (COALESCE - 292)) | (1L << (CODE - 292)) | (1L << (COLUMNS - 292)) | (1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMPACT - 356)) | (1L << (COMPLETION - 356)) | (1L << (COMPRESSED - 356)) | (1L << (COMPRESSION - 356)) | (1L << (CONCURRENT - 356)) | (1L << (CONNECT - 356)) | (1L << (CONNECTION - 356)) | (1L << (CONSISTENT - 356)) | (1L << (CONSTRAINT_CATALOG - 356)) | (1L << (CONSTRAINT_SCHEMA - 356)) | (1L << (CONSTRAINT_NAME - 356)) | (1L << (CONTAINS - 356)) | (1L << (CONTEXT - 356)) | (1L << (CONTRIBUTORS - 356)) | (1L << (COPY - 356)) | (1L << (CPU - 356)) | (1L << (CURSOR_NAME - 356)) | (1L << (DATA - 356)) | (1L << (DATAFILE - 356)) | (1L << (DEALLOCATE - 356)) | (1L << (DEFAULT_AUTH - 356)) | (1L << (DEFINER - 356)) | (1L << (DELAY_KEY_WRITE - 356)) | (1L << (DES_KEY_FILE - 356)) | (1L << (DIRECTORY - 356)) | (1L << (DISABLE - 356)) | (1L << (DISCARD - 356)) | (1L << (DISK - 356)) | (1L << (DO - 356)) | (1L << (DUMPFILE - 356)) | (1L << (DUPLICATE - 356)) | (1L << (DYNAMIC - 356)) | (1L << (ENABLE - 356)) | (1L << (ENCRYPTION - 356)) | (1L << (END - 356)) | (1L << (ENDS - 356)) | (1L << (ENGINE - 356)) | (1L << (ENGINES - 356)) | (1L << (ERROR - 356)) | (1L << (ERRORS - 356)) | (1L << (ESCAPE - 356)) | (1L << (EVEN - 356)) | (1L << (EVENT - 356)) | (1L << (EVENTS - 356)) | (1L << (EVERY - 356)) | (1L << (EXCHANGE - 356)) | (1L << (EXCLUSIVE - 356)) | (1L << (EXPIRE - 356)) | (1L << (EXPORT - 356)) | (1L << (EXTENDED - 356)) | (1L << (EXTENT_SIZE - 356)) | (1L << (FAST - 356)) | (1L << (FAULTS - 356)) | (1L << (FIELDS - 356)) | (1L << (FILE_BLOCK_SIZE - 356)) | (1L << (FILTER - 356)) | (1L << (FIRST - 356)) | (1L << (FIXED - 356)) | (1L << (FLUSH - 356)) | (1L << (FOLLOWS - 356)) | (1L << (FOUND - 356)) | (1L << (FULL - 356)) | (1L << (FUNCTION - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (GENERAL - 420)) | (1L << (GLOBAL - 420)) | (1L << (GRANTS - 420)) | (1L << (GROUP_REPLICATION - 420)) | (1L << (HANDLER - 420)) | (1L << (HASH - 420)) | (1L << (HELP - 420)) | (1L << (HOST - 420)) | (1L << (HOSTS - 420)) | (1L << (IDENTIFIED - 420)) | (1L << (IGNORE_SERVER_IDS - 420)) | (1L << (IMPORT - 420)) | (1L << (INDEXES - 420)) | (1L << (INITIAL_SIZE - 420)) | (1L << (INPLACE - 420)) | (1L << (INSERT_METHOD - 420)) | (1L << (INSTALL - 420)) | (1L << (INSTANCE - 420)) | (1L << (INSTANT - 420)) | (1L << (INVISIBLE - 420)) | (1L << (INVOKER - 420)) | (1L << (IO - 420)) | (1L << (IO_THREAD - 420)) | (1L << (IPC - 420)) | (1L << (ISOLATION - 420)) | (1L << (ISSUER - 420)) | (1L << (JSON - 420)) | (1L << (KEY_BLOCK_SIZE - 420)) | (1L << (LANGUAGE - 420)) | (1L << (LAST - 420)) | (1L << (LEAVES - 420)) | (1L << (LESS - 420)) | (1L << (LEVEL - 420)) | (1L << (LIST - 420)) | (1L << (LOCAL - 420)) | (1L << (LOGFILE - 420)) | (1L << (LOGS - 420)) | (1L << (MASTER - 420)) | (1L << (MASTER_AUTO_POSITION - 420)) | (1L << (MASTER_CONNECT_RETRY - 420)) | (1L << (MASTER_DELAY - 420)) | (1L << (MASTER_HEARTBEAT_PERIOD - 420)) | (1L << (MASTER_HOST - 420)) | (1L << (MASTER_LOG_FILE - 420)) | (1L << (MASTER_LOG_POS - 420)) | (1L << (MASTER_PASSWORD - 420)) | (1L << (MASTER_PORT - 420)) | (1L << (MASTER_RETRY_COUNT - 420)) | (1L << (MASTER_SSL - 420)) | (1L << (MASTER_SSL_CA - 420)) | (1L << (MASTER_SSL_CAPATH - 420)) | (1L << (MASTER_SSL_CERT - 420)) | (1L << (MASTER_SSL_CIPHER - 420)) | (1L << (MASTER_SSL_CRL - 420)) | (1L << (MASTER_SSL_CRLPATH - 420)) | (1L << (MASTER_SSL_KEY - 420)) | (1L << (MASTER_TLS_VERSION - 420)) | (1L << (MASTER_USER - 420)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 420)) | (1L << (MAX_QUERIES_PER_HOUR - 420)) | (1L << (MAX_ROWS - 420)) | (1L << (MAX_SIZE - 420)) | (1L << (MAX_UPDATES_PER_HOUR - 420)) | (1L << (MAX_USER_CONNECTIONS - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (MEDIUM - 484)) | (1L << (MEMBER - 484)) | (1L << (MERGE - 484)) | (1L << (MESSAGE_TEXT - 484)) | (1L << (MID - 484)) | (1L << (MIGRATE - 484)) | (1L << (MIN_ROWS - 484)) | (1L << (MODE - 484)) | (1L << (MODIFY - 484)) | (1L << (MUTEX - 484)) | (1L << (MYSQL - 484)) | (1L << (MYSQL_ERRNO - 484)) | (1L << (NAME - 484)) | (1L << (NAMES - 484)) | (1L << (NCHAR - 484)) | (1L << (NEVER - 484)) | (1L << (NEXT - 484)) | (1L << (NO - 484)) | (1L << (NODEGROUP - 484)) | (1L << (NONE - 484)) | (1L << (ODBC - 484)) | (1L << (OFFLINE - 484)) | (1L << (OFFSET - 484)) | (1L << (OF - 484)) | (1L << (OJ - 484)) | (1L << (OLD_PASSWORD - 484)) | (1L << (ONE - 484)) | (1L << (ONLINE - 484)) | (1L << (ONLY - 484)) | (1L << (OPEN - 484)) | (1L << (OPTIMIZER_COSTS - 484)) | (1L << (OPTIONS - 484)) | (1L << (OWNER - 484)) | (1L << (PACK_KEYS - 484)) | (1L << (PAGE - 484)) | (1L << (PARSER - 484)) | (1L << (PARTIAL - 484)) | (1L << (PARTITIONING - 484)) | (1L << (PARTITIONS - 484)) | (1L << (PASSWORD - 484)) | (1L << (PHASE - 484)) | (1L << (PLUGIN - 484)) | (1L << (PLUGIN_DIR - 484)) | (1L << (PLUGINS - 484)) | (1L << (PORT - 484)) | (1L << (PRECEDES - 484)) | (1L << (PREPARE - 484)) | (1L << (PRESERVE - 484)) | (1L << (PREV - 484)) | (1L << (PROCESSLIST - 484)) | (1L << (PROFILE - 484)) | (1L << (PROFILES - 484)) | (1L << (PROXY - 484)) | (1L << (QUERY - 484)) | (1L << (QUICK - 484)) | (1L << (REBUILD - 484)) | (1L << (RECOVER - 484)) | (1L << (REDO_BUFFER_SIZE - 484)) | (1L << (REDUNDANT - 484)) | (1L << (RELAY - 484)) | (1L << (RELAY_LOG_FILE - 484)) | (1L << (RELAY_LOG_POS - 484)) | (1L << (RELAYLOG - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (REMOVE - 548)) | (1L << (REORGANIZE - 548)) | (1L << (REPAIR - 548)) | (1L << (REPLICATE_DO_DB - 548)) | (1L << (REPLICATE_DO_TABLE - 548)) | (1L << (REPLICATE_IGNORE_DB - 548)) | (1L << (REPLICATE_IGNORE_TABLE - 548)) | (1L << (REPLICATE_REWRITE_DB - 548)) | (1L << (REPLICATE_WILD_DO_TABLE - 548)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 548)) | (1L << (REPLICATION - 548)) | (1L << (RESET - 548)) | (1L << (RESUME - 548)) | (1L << (RETURNED_SQLSTATE - 548)) | (1L << (RETURNS - 548)) | (1L << (ROLE - 548)) | (1L << (ROLLBACK - 548)) | (1L << (ROLLUP - 548)) | (1L << (ROTATE - 548)) | (1L << (ROW - 548)) | (1L << (ROWS - 548)) | (1L << (ROW_FORMAT - 548)) | (1L << (SAVEPOINT - 548)) | (1L << (SCHEDULE - 548)) | (1L << (SECURITY - 548)) | (1L << (SERVER - 548)) | (1L << (SESSION - 548)) | (1L << (SHARE - 548)) | (1L << (SHARED - 548)) | (1L << (SIGNED - 548)) | (1L << (SIMPLE - 548)) | (1L << (SLAVE - 548)) | (1L << (SLOW - 548)) | (1L << (SNAPSHOT - 548)) | (1L << (SOCKET - 548)) | (1L << (SOME - 548)) | (1L << (SONAME - 548)) | (1L << (SOUNDS - 548)) | (1L << (SOURCE - 548)) | (1L << (SQL_AFTER_GTIDS - 548)) | (1L << (SQL_AFTER_MTS_GAPS - 548)) | (1L << (SQL_BEFORE_GTIDS - 548)) | (1L << (SQL_BUFFER_RESULT - 548)) | (1L << (SQL_CACHE - 548)) | (1L << (SQL_NO_CACHE - 548)) | (1L << (SQL_THREAD - 548)) | (1L << (START - 548)) | (1L << (STARTS - 548)) | (1L << (STATS_AUTO_RECALC - 548)) | (1L << (STATS_PERSISTENT - 548)) | (1L << (STATS_SAMPLE_PAGES - 548)) | (1L << (STATUS - 548)) | (1L << (STOP - 548)) | (1L << (STORAGE - 548)) | (1L << (STRING - 548)) | (1L << (SUBCLASS_ORIGIN - 548)) | (1L << (SUBJECT - 548)) | (1L << (SUBPARTITION - 548)) | (1L << (SUBPARTITIONS - 548)) | (1L << (SUSPEND - 548)) | (1L << (SWAPS - 548)) | (1L << (SWITCHES - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (TABLE_NAME - 612)) | (1L << (TABLESPACE - 612)) | (1L << (TEMPORARY - 612)) | (1L << (TEMPTABLE - 612)) | (1L << (THAN - 612)) | (1L << (TRADITIONAL - 612)) | (1L << (TRANSACTION - 612)) | (1L << (TRANSACTIONAL - 612)) | (1L << (TRIGGERS - 612)) | (1L << (TRUNCATE - 612)) | (1L << (UNDEFINED - 612)) | (1L << (UNDOFILE - 612)) | (1L << (UNDO_BUFFER_SIZE - 612)) | (1L << (UNINSTALL - 612)) | (1L << (UNKNOWN - 612)) | (1L << (UNTIL - 612)) | (1L << (UPGRADE - 612)) | (1L << (USER - 612)) | (1L << (USE_FRM - 612)) | (1L << (USER_RESOURCES - 612)) | (1L << (VALIDATION - 612)) | (1L << (VALUE - 612)) | (1L << (VARIABLES - 612)) | (1L << (VIEW - 612)) | (1L << (VISIBLE - 612)) | (1L << (WAIT - 612)) | (1L << (WARNINGS - 612)) | (1L << (WITHOUT - 612)) | (1L << (WORK - 612)) | (1L << (WRAPPER - 612)) | (1L << (X509 - 612)) | (1L << (XA - 612)) | (1L << (XML - 612)) | (1L << (EUR - 612)) | (1L << (USA - 612)) | (1L << (JIS - 612)) | (1L << (ISO - 612)) | (1L << (INTERNAL - 612)) | (1L << (QUARTER - 612)) | (1L << (MONTH - 612)) | (1L << (DAY - 612)) | (1L << (HOUR - 612)) | (1L << (MINUTE - 612)) | (1L << (WEEK - 612)) | (1L << (SECOND - 612)) | (1L << (MICROSECOND - 612)) | (1L << (TABLES - 612)) | (1L << (ROUTINE - 612)) | (1L << (EXECUTE - 612)) | (1L << (FILE - 612)) | (1L << (PROCESS - 612)) | (1L << (RELOAD - 612)) | (1L << (SHUTDOWN - 612)) | (1L << (SUPER - 612)) | (1L << (PRIVILEGES - 612)) | (1L << (AUDIT_ADMIN - 612)) | (1L << (BACKUP_ADMIN - 612)) | (1L << (BINLOG_ADMIN - 612)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (CLONE_ADMIN - 676)) | (1L << (CONNECTION_ADMIN - 676)) | (1L << (ENCRYPTION_KEY_ADMIN - 676)) | (1L << (FIREWALL_ADMIN - 676)) | (1L << (FIREWALL_USER - 676)) | (1L << (ADMIN - 676)) | (1L << (GROUP_REPLICATION_ADMIN - 676)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 676)) | (1L << (NDB_STORED_USER - 676)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 676)) | (1L << (REPLICATION_APPLIER - 676)) | (1L << (REPLICATION_SLAVE_ADMIN - 676)) | (1L << (RESOURCE_GROUP_ADMIN - 676)) | (1L << (RESOURCE_GROUP_USER - 676)) | (1L << (ROLE_ADMIN - 676)) | (1L << (SESSION_VARIABLES_ADMIN - 676)) | (1L << (SET_USER_ID - 676)) | (1L << (SHOW_ROUTINE - 676)) | (1L << (SYSTEM_VARIABLES_ADMIN - 676)) | (1L << (TABLE_ENCRYPTION_ADMIN - 676)) | (1L << (VERSION_TOKEN_ADMIN - 676)) | (1L << (XA_RECOVER_ADMIN - 676)) | (1L << (ARMSCII8 - 676)) | (1L << (ASCII - 676)) | (1L << (BIG5 - 676)) | (1L << (CP1250 - 676)) | (1L << (CP1251 - 676)) | (1L << (CP1256 - 676)) | (1L << (CP1257 - 676)) | (1L << (CP850 - 676)) | (1L << (CP852 - 676)) | (1L << (CP866 - 676)) | (1L << (CP932 - 676)) | (1L << (DEC8 - 676)) | (1L << (EUCJPMS - 676)) | (1L << (EUCKR - 676)) | (1L << (GB18030 - 676)) | (1L << (GB2312 - 676)) | (1L << (GBK - 676)) | (1L << (GEOSTD8 - 676)) | (1L << (GREEK - 676)) | (1L << (HEBREW - 676)) | (1L << (HP8 - 676)) | (1L << (KEYBCS2 - 676)) | (1L << (KOI8R - 676)) | (1L << (KOI8U - 676)) | (1L << (LATIN1 - 676)) | (1L << (LATIN2 - 676)) | (1L << (LATIN5 - 676)) | (1L << (LATIN7 - 676)) | (1L << (MACCE - 676)) | (1L << (MACROMAN - 676)) | (1L << (SJIS - 676)) | (1L << (SWE7 - 676)) | (1L << (TIS620 - 676)) | (1L << (UCS2 - 676)) | (1L << (UJIS - 676)) | (1L << (UTF16 - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (UTF16LE - 740)) | (1L << (UTF32 - 740)) | (1L << (UTF8 - 740)) | (1L << (UTF8MB3 - 740)) | (1L << (UTF8MB4 - 740)) | (1L << (ARCHIVE - 740)) | (1L << (BLACKHOLE - 740)) | (1L << (CSV - 740)) | (1L << (FEDERATED - 740)) | (1L << (INNODB - 740)) | (1L << (MEMORY - 740)) | (1L << (MRG_MYISAM - 740)) | (1L << (MYISAM - 740)) | (1L << (NDB - 740)) | (1L << (NDBCLUSTER - 740)) | (1L << (PERFORMANCE_SCHEMA - 740)) | (1L << (TOKUDB - 740)) | (1L << (REPEATABLE - 740)) | (1L << (COMMITTED - 740)) | (1L << (UNCOMMITTED - 740)) | (1L << (SERIALIZABLE - 740)) | (1L << (GEOMETRYCOLLECTION - 740)) | (1L << (LINESTRING - 740)) | (1L << (MULTILINESTRING - 740)) | (1L << (MULTIPOINT - 740)) | (1L << (MULTIPOLYGON - 740)) | (1L << (POINT - 740)) | (1L << (POLYGON - 740)) | (1L << (ABS - 740)) | (1L << (ACOS - 740)) | (1L << (ADDDATE - 740)) | (1L << (ADDTIME - 740)) | (1L << (AES_DECRYPT - 740)) | (1L << (AES_ENCRYPT - 740)) | (1L << (AREA - 740)) | (1L << (ASBINARY - 740)) | (1L << (ASIN - 740)) | (1L << (ASTEXT - 740)) | (1L << (ASWKB - 740)) | (1L << (ASWKT - 740)) | (1L << (ASYMMETRIC_DECRYPT - 740)) | (1L << (ASYMMETRIC_DERIVE - 740)) | (1L << (ASYMMETRIC_ENCRYPT - 740)) | (1L << (ASYMMETRIC_SIGN - 740)) | (1L << (ASYMMETRIC_VERIFY - 740)) | (1L << (ATAN - 740)) | (1L << (ATAN2 - 740)) | (1L << (BENCHMARK - 740)) | (1L << (BIN - 740)) | (1L << (BIT_COUNT - 740)) | (1L << (BIT_LENGTH - 740)) | (1L << (BUFFER - 740)) | (1L << (CATALOG_NAME - 740)) | (1L << (CEIL - 740)) | (1L << (CEILING - 740)) | (1L << (CENTROID - 740)) | (1L << (CHARACTER_LENGTH - 740)) | (1L << (CHARSET - 740)) | (1L << (CHAR_LENGTH - 740)) | (1L << (COERCIBILITY - 740)) | (1L << (COLLATION - 740)) | (1L << (COMPRESS - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (CONCAT - 804)) | (1L << (CONCAT_WS - 804)) | (1L << (CONNECTION_ID - 804)) | (1L << (CONV - 804)) | (1L << (CONVERT_TZ - 804)) | (1L << (COS - 804)) | (1L << (COT - 804)) | (1L << (CRC32 - 804)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 804)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 804)) | (1L << (CREATE_DH_PARAMETERS - 804)) | (1L << (CREATE_DIGEST - 804)) | (1L << (CROSSES - 804)) | (1L << (DATEDIFF - 804)) | (1L << (DATE_FORMAT - 804)) | (1L << (DAYNAME - 804)) | (1L << (DAYOFMONTH - 804)) | (1L << (DAYOFWEEK - 804)) | (1L << (DAYOFYEAR - 804)) | (1L << (DECODE - 804)) | (1L << (DEGREES - 804)) | (1L << (DES_DECRYPT - 804)) | (1L << (DES_ENCRYPT - 804)) | (1L << (DIMENSION - 804)) | (1L << (DISJOINT - 804)) | (1L << (ELT - 804)) | (1L << (ENCODE - 804)) | (1L << (ENCRYPT - 804)) | (1L << (ENDPOINT - 804)) | (1L << (ENVELOPE - 804)) | (1L << (EQUALS - 804)) | (1L << (EXP - 804)) | (1L << (EXPORT_SET - 804)) | (1L << (EXTERIORRING - 804)) | (1L << (EXTRACTVALUE - 804)) | (1L << (FIELD - 804)) | (1L << (FIND_IN_SET - 804)) | (1L << (FLOOR - 804)) | (1L << (FORMAT - 804)) | (1L << (FOUND_ROWS - 804)) | (1L << (FROM_BASE64 - 804)) | (1L << (FROM_DAYS - 804)) | (1L << (FROM_UNIXTIME - 804)) | (1L << (GEOMCOLLFROMTEXT - 804)) | (1L << (GEOMCOLLFROMWKB - 804)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 804)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 804)) | (1L << (GEOMETRYFROMTEXT - 804)) | (1L << (GEOMETRYFROMWKB - 804)) | (1L << (GEOMETRYN - 804)) | (1L << (GEOMETRYTYPE - 804)) | (1L << (GEOMFROMTEXT - 804)) | (1L << (GEOMFROMWKB - 804)) | (1L << (GET_FORMAT - 804)) | (1L << (GET_LOCK - 804)) | (1L << (GLENGTH - 804)) | (1L << (GREATEST - 804)) | (1L << (GTID_SUBSET - 804)) | (1L << (GTID_SUBTRACT - 804)) | (1L << (HEX - 804)) | (1L << (IFNULL - 804)) | (1L << (INET6_ATON - 804)) | (1L << (INET6_NTOA - 804)) | (1L << (INET_ATON - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (INET_NTOA - 868)) | (1L << (INSTR - 868)) | (1L << (INTERIORRINGN - 868)) | (1L << (INTERSECTS - 868)) | (1L << (ISCLOSED - 868)) | (1L << (ISEMPTY - 868)) | (1L << (ISNULL - 868)) | (1L << (ISSIMPLE - 868)) | (1L << (IS_FREE_LOCK - 868)) | (1L << (IS_IPV4 - 868)) | (1L << (IS_IPV4_COMPAT - 868)) | (1L << (IS_IPV4_MAPPED - 868)) | (1L << (IS_IPV6 - 868)) | (1L << (IS_USED_LOCK - 868)) | (1L << (LAST_INSERT_ID - 868)) | (1L << (LCASE - 868)) | (1L << (LEAST - 868)) | (1L << (LENGTH - 868)) | (1L << (LINEFROMTEXT - 868)) | (1L << (LINEFROMWKB - 868)) | (1L << (LINESTRINGFROMTEXT - 868)) | (1L << (LINESTRINGFROMWKB - 868)) | (1L << (LN - 868)) | (1L << (LOAD_FILE - 868)) | (1L << (LOCATE - 868)) | (1L << (LOG - 868)) | (1L << (LOG10 - 868)) | (1L << (LOG2 - 868)) | (1L << (LOWER - 868)) | (1L << (LPAD - 868)) | (1L << (LTRIM - 868)) | (1L << (MAKEDATE - 868)) | (1L << (MAKETIME - 868)) | (1L << (MAKE_SET - 868)) | (1L << (MASTER_POS_WAIT - 868)) | (1L << (MBRCONTAINS - 868)) | (1L << (MBRDISJOINT - 868)) | (1L << (MBREQUAL - 868)) | (1L << (MBRINTERSECTS - 868)) | (1L << (MBROVERLAPS - 868)) | (1L << (MBRTOUCHES - 868)) | (1L << (MBRWITHIN - 868)) | (1L << (MD5 - 868)) | (1L << (MLINEFROMTEXT - 868)) | (1L << (MLINEFROMWKB - 868)) | (1L << (MONTHNAME - 868)) | (1L << (MPOINTFROMTEXT - 868)) | (1L << (MPOINTFROMWKB - 868)) | (1L << (MPOLYFROMTEXT - 868)) | (1L << (MPOLYFROMWKB - 868)) | (1L << (MULTILINESTRINGFROMTEXT - 868)) | (1L << (MULTILINESTRINGFROMWKB - 868)) | (1L << (MULTIPOINTFROMTEXT - 868)) | (1L << (MULTIPOINTFROMWKB - 868)) | (1L << (MULTIPOLYGONFROMTEXT - 868)) | (1L << (MULTIPOLYGONFROMWKB - 868)) | (1L << (NAME_CONST - 868)) | (1L << (NULLIF - 868)) | (1L << (NUMGEOMETRIES - 868)) | (1L << (NUMINTERIORRINGS - 868)) | (1L << (NUMPOINTS - 868)) | (1L << (OCT - 868)) | (1L << (OCTET_LENGTH - 868)) | (1L << (ORD - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (OVERLAPS - 932)) | (1L << (PERIOD_ADD - 932)) | (1L << (PERIOD_DIFF - 932)) | (1L << (PI - 932)) | (1L << (POINTFROMTEXT - 932)) | (1L << (POINTFROMWKB - 932)) | (1L << (POINTN - 932)) | (1L << (POLYFROMTEXT - 932)) | (1L << (POLYFROMWKB - 932)) | (1L << (POLYGONFROMTEXT - 932)) | (1L << (POLYGONFROMWKB - 932)) | (1L << (POW - 932)) | (1L << (POWER - 932)) | (1L << (QUOTE - 932)) | (1L << (RADIANS - 932)) | (1L << (RAND - 932)) | (1L << (RANDOM_BYTES - 932)) | (1L << (RELEASE_LOCK - 932)) | (1L << (REVERSE - 932)) | (1L << (ROUND - 932)) | (1L << (ROW_COUNT - 932)) | (1L << (RPAD - 932)) | (1L << (RTRIM - 932)) | (1L << (SEC_TO_TIME - 932)) | (1L << (SESSION_USER - 932)) | (1L << (SHA - 932)) | (1L << (SHA1 - 932)) | (1L << (SHA2 - 932)) | (1L << (SCHEMA_NAME - 932)) | (1L << (SIGN - 932)) | (1L << (SIN - 932)) | (1L << (SLEEP - 932)) | (1L << (SOUNDEX - 932)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 932)) | (1L << (SQRT - 932)) | (1L << (SRID - 932)) | (1L << (STARTPOINT - 932)) | (1L << (STRCMP - 932)) | (1L << (STR_TO_DATE - 932)) | (1L << (ST_AREA - 932)) | (1L << (ST_ASBINARY - 932)) | (1L << (ST_ASTEXT - 932)) | (1L << (ST_ASWKB - 932)) | (1L << (ST_ASWKT - 932)) | (1L << (ST_BUFFER - 932)) | (1L << (ST_CENTROID - 932)) | (1L << (ST_CONTAINS - 932)) | (1L << (ST_CROSSES - 932)) | (1L << (ST_DIFFERENCE - 932)) | (1L << (ST_DIMENSION - 932)) | (1L << (ST_DISJOINT - 932)) | (1L << (ST_DISTANCE - 932)) | (1L << (ST_ENDPOINT - 932)) | (1L << (ST_ENVELOPE - 932)) | (1L << (ST_EQUALS - 932)) | (1L << (ST_EXTERIORRING - 932)) | (1L << (ST_GEOMCOLLFROMTEXT - 932)) | (1L << (ST_GEOMCOLLFROMTXT - 932)) | (1L << (ST_GEOMCOLLFROMWKB - 932)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 932)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 932)) | (1L << (ST_GEOMETRYFROMTEXT - 932)) | (1L << (ST_GEOMETRYFROMWKB - 932)) | (1L << (ST_GEOMETRYN - 932)))) != 0) || ((((_la - 996)) & ~0x3f) == 0 && ((1L << (_la - 996)) & ((1L << (ST_GEOMETRYTYPE - 996)) | (1L << (ST_GEOMFROMTEXT - 996)) | (1L << (ST_GEOMFROMWKB - 996)) | (1L << (ST_INTERIORRINGN - 996)) | (1L << (ST_INTERSECTION - 996)) | (1L << (ST_INTERSECTS - 996)) | (1L << (ST_ISCLOSED - 996)) | (1L << (ST_ISEMPTY - 996)) | (1L << (ST_ISSIMPLE - 996)) | (1L << (ST_LINEFROMTEXT - 996)) | (1L << (ST_LINEFROMWKB - 996)) | (1L << (ST_LINESTRINGFROMTEXT - 996)) | (1L << (ST_LINESTRINGFROMWKB - 996)) | (1L << (ST_NUMGEOMETRIES - 996)) | (1L << (ST_NUMINTERIORRING - 996)) | (1L << (ST_NUMINTERIORRINGS - 996)) | (1L << (ST_NUMPOINTS - 996)) | (1L << (ST_OVERLAPS - 996)) | (1L << (ST_POINTFROMTEXT - 996)) | (1L << (ST_POINTFROMWKB - 996)) | (1L << (ST_POINTN - 996)) | (1L << (ST_POLYFROMTEXT - 996)) | (1L << (ST_POLYFROMWKB - 996)) | (1L << (ST_POLYGONFROMTEXT - 996)) | (1L << (ST_POLYGONFROMWKB - 996)) | (1L << (ST_SRID - 996)) | (1L << (ST_STARTPOINT - 996)) | (1L << (ST_SYMDIFFERENCE - 996)) | (1L << (ST_TOUCHES - 996)) | (1L << (ST_UNION - 996)) | (1L << (ST_WITHIN - 996)) | (1L << (ST_X - 996)) | (1L << (ST_Y - 996)) | (1L << (SUBDATE - 996)) | (1L << (SUBSTRING_INDEX - 996)) | (1L << (SUBTIME - 996)) | (1L << (SYSTEM_USER - 996)) | (1L << (TAN - 996)) | (1L << (TIMEDIFF - 996)) | (1L << (TIMESTAMPADD - 996)) | (1L << (TIMESTAMPDIFF - 996)) | (1L << (TIME_FORMAT - 996)) | (1L << (TIME_TO_SEC - 996)) | (1L << (TOUCHES - 996)) | (1L << (TO_BASE64 - 996)) | (1L << (TO_DAYS - 996)) | (1L << (TO_SECONDS - 996)) | (1L << (UCASE - 996)) | (1L << (UNCOMPRESS - 996)) | (1L << (UNCOMPRESSED_LENGTH - 996)) | (1L << (UNHEX - 996)) | (1L << (UNIX_TIMESTAMP - 996)) | (1L << (UPDATEXML - 996)) | (1L << (UPPER - 996)) | (1L << (UUID - 996)) | (1L << (UUID_SHORT - 996)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 996)) | (1L << (VERSION - 996)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 996)) | (1L << (WEEKDAY - 996)) | (1L << (WEEKOFYEAR - 996)) | (1L << (WEIGHT_STRING - 996)) | (1L << (WITHIN - 996)) | (1L << (YEARWEEK - 996)))) != 0) || ((((_la - 1060)) & ~0x3f) == 0 && ((1L << (_la - 1060)) & ((1L << (Y_FUNCTION - 1060)) | (1L << (X_FUNCTION - 1060)) | (1L << (MOD - 1060)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1060)) | (1L << (STRING_LITERAL - 1060)) | (1L << (ID - 1060)) | (1L << (REVERSE_QUOTE_ID - 1060)))) != 0)) {
				{
				setState(3295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3294);
					match(AS);
					}
				}

				setState(3297);
				uid();
				}
			}

			setState(3300);
			match(SET);
			setState(3301);
			updatedElement();
			setState(3306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3302);
				match(COMMA);
				setState(3303);
				updatedElement();
				}
				}
				setState(3308);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3309);
				match(WHERE);
				setState(3310);
				expression(0);
				}
			}

			setState(3314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3313);
				orderByClause();
				}
			}

			setState(3317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3316);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319);
			match(UPDATE);
			setState(3321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3320);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3323);
				match(IGNORE);
				}
			}

			setState(3326);
			tableSources();
			setState(3327);
			match(SET);
			setState(3328);
			updatedElement();
			setState(3333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3329);
				match(COMMA);
				setState(3330);
				updatedElement();
				}
				}
				setState(3335);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3336);
				match(WHERE);
				setState(3337);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			match(ORDER);
			setState(3341);
			match(BY);
			setState(3342);
			orderByExpression();
			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3343);
				match(COMMA);
				setState(3344);
				orderByExpression();
				}
				}
				setState(3349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3350);
			expression(0);
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(3351);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3354);
			tableSource();
			setState(3359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3355);
				match(COMMA);
				setState(3356);
				tableSource();
				}
				}
				setState(3361);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3362);
				tableSourceItem();
				setState(3366);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,464,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3363);
						joinPart();
						}
						} 
					}
					setState(3368);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,464,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3369);
				match(LR_BRACKET);
				setState(3370);
				tableSourceItem();
				setState(3374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NATURAL - 106)) | (1L << (RIGHT - 106)) | (1L << (STRAIGHT_JOIN - 106)))) != 0)) {
					{
					{
					setState(3371);
					joinPart();
					}
					}
					setState(3376);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3377);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3381);
				tableName();
				setState(3387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3382);
					match(PARTITION);
					setState(3383);
					match(LR_BRACKET);
					setState(3384);
					uidList();
					setState(3385);
					match(RR_BRACKET);
					}
				}

				setState(3393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3390);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3389);
						match(AS);
						}
					}

					setState(3392);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3395);
					indexHint();
					setState(3400);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3396);
							match(COMMA);
							setState(3397);
							indexHint();
							}
							} 
						}
						setState(3402);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3405);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3406);
					match(LR_BRACKET);
					setState(3407);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3408);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3412);
					match(AS);
					}
				}

				setState(3415);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3417);
				match(LR_BRACKET);
				setState(3418);
				tableSources();
				setState(3419);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3423);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3424);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3425);
				match(FOR);
				setState(3426);
				indexHintType();
				}
			}

			setState(3429);
			match(LR_BRACKET);
			setState(3430);
			uidList();
			setState(3431);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_indexHintType);
		try {
			setState(3438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3433);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3434);
				match(ORDER);
				setState(3435);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3436);
				match(GROUP);
				setState(3437);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_joinPart);
		int _la;
		try {
			setState(3484);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3440);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3443);
				match(JOIN);
				setState(3444);
				tableSourceItem();
				setState(3452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					setState(3445);
					match(ON);
					setState(3446);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3447);
					match(USING);
					setState(3448);
					match(LR_BRACKET);
					setState(3449);
					uidList();
					setState(3450);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3454);
				match(STRAIGHT_JOIN);
				setState(3455);
				tableSourceItem();
				setState(3458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3456);
					match(ON);
					setState(3457);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3460);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3461);
					match(OUTER);
					}
				}

				setState(3464);
				match(JOIN);
				setState(3465);
				tableSourceItem();
				setState(3473);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3466);
					match(ON);
					setState(3467);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3468);
					match(USING);
					setState(3469);
					match(LR_BRACKET);
					setState(3470);
					uidList();
					setState(3471);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3475);
				match(NATURAL);
				setState(3480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3476);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3478);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3477);
						match(OUTER);
						}
					}

					}
				}

				setState(3482);
				match(JOIN);
				setState(3483);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_queryExpression);
		try {
			setState(3494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3486);
				match(LR_BRACKET);
				setState(3487);
				querySpecification();
				setState(3488);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3490);
				match(LR_BRACKET);
				setState(3491);
				queryExpression();
				setState(3492);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_queryExpressionNointo);
		try {
			setState(3504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3496);
				match(LR_BRACKET);
				setState(3497);
				querySpecificationNointo();
				setState(3498);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3500);
				match(LR_BRACKET);
				setState(3501);
				queryExpressionNointo();
				setState(3502);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3506);
				match(SELECT);
				setState(3510);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3507);
						selectSpec();
						}
						} 
					}
					setState(3512);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
				}
				setState(3513);
				selectElements();
				setState(3515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3514);
					selectIntoExpression();
					}
				}

				setState(3518);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
				case 1:
					{
					setState(3517);
					fromClause();
					}
					break;
				}
				setState(3521);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(3520);
					groupByClause();
					}
					break;
				}
				setState(3524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3523);
					havingClause();
					}
				}

				setState(3527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3526);
					windowClause();
					}
				}

				setState(3530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(3529);
					orderByClause();
					}
					break;
				}
				setState(3533);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(3532);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3535);
				match(SELECT);
				setState(3539);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3536);
						selectSpec();
						}
						} 
					}
					setState(3541);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
				}
				setState(3542);
				selectElements();
				setState(3544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(3543);
					fromClause();
					}
					break;
				}
				setState(3547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
				case 1:
					{
					setState(3546);
					groupByClause();
					}
					break;
				}
				setState(3550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3549);
					havingClause();
					}
				}

				setState(3553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3552);
					windowClause();
					}
				}

				setState(3556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(3555);
					orderByClause();
					}
					break;
				}
				setState(3559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					setState(3558);
					limitClause();
					}
					break;
				}
				setState(3562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3561);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3566);
			match(SELECT);
			setState(3570);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,504,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3567);
					selectSpec();
					}
					} 
				}
				setState(3572);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,504,_ctx);
			}
			setState(3573);
			selectElements();
			setState(3575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(3574);
				fromClause();
				}
				break;
			}
			setState(3578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(3577);
				groupByClause();
				}
				break;
			}
			setState(3581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3580);
				havingClause();
				}
			}

			setState(3584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3583);
				windowClause();
				}
			}

			setState(3587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(3586);
				orderByClause();
				}
				break;
			}
			setState(3590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(3589);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			match(UNION);
			setState(3594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3593);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3596);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3598);
			match(UNION);
			setState(3600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3599);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3602);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3603);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectSpec);
		int _la;
		try {
			setState(3614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3606);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3607);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3608);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3609);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3610);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3611);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3612);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3613);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				setState(3616);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(3617);
				selectElement();
				}
				break;
			}
			setState(3624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3620);
				match(COMMA);
				setState(3621);
				selectElement();
				}
				}
				setState(3626);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_selectElement);
		int _la;
		try {
			setState(3656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3627);
				fullId();
				setState(3628);
				match(DOT);
				setState(3629);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3631);
				fullColumnName();
				setState(3636);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(3633);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3632);
						match(AS);
						}
					}

					setState(3635);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3638);
				functionCall();
				setState(3643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(3640);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3639);
						match(AS);
						}
					}

					setState(3642);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(3645);
					match(LOCAL_ID);
					setState(3646);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3649);
				expression(0);
				setState(3654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(3651);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3650);
						match(AS);
						}
					}

					setState(3653);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3658);
				match(INTO);
				setState(3659);
				assignmentField();
				setState(3664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3660);
					match(COMMA);
					setState(3661);
					assignmentField();
					}
					}
					setState(3666);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3667);
				match(INTO);
				setState(3668);
				match(DUMPFILE);
				setState(3669);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3670);
				match(INTO);
				setState(3671);
				match(OUTFILE);
				setState(3672);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3673);
					match(CHARACTER);
					setState(3674);
					match(SET);
					setState(3675);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3684);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(3678);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3680); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3679);
						selectFieldsInto();
						}
						}
						setState(3682); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3686);
					match(LINES);
					setState(3688); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3687);
						selectLinesInto();
						}
						}
						setState(3690); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3696);
				match(TERMINATED);
				setState(3697);
				match(BY);
				setState(3698);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3699);
					match(OPTIONALLY);
					}
				}

				setState(3702);
				match(ENCLOSED);
				setState(3703);
				match(BY);
				setState(3704);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3705);
				match(ESCAPED);
				setState(3706);
				match(BY);
				setState(3707);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_selectLinesInto);
		try {
			setState(3716);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3710);
				match(STARTING);
				setState(3711);
				match(BY);
				setState(3712);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3713);
				match(TERMINATED);
				setState(3714);
				match(BY);
				setState(3715);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3718);
				match(FROM);
				setState(3719);
				tableSources();
				}
			}

			setState(3724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3722);
				match(WHERE);
				setState(3723);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3726);
			match(GROUP);
			setState(3727);
			match(BY);
			setState(3728);
			groupByItem();
			setState(3733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3729);
				match(COMMA);
				setState(3730);
				groupByItem();
				}
				}
				setState(3735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(3736);
				match(WITH);
				setState(3737);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3740);
			match(HAVING);
			setState(3741);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(MySqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(MySqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			match(WINDOW);
			setState(3744);
			windowName();
			setState(3745);
			match(AS);
			setState(3746);
			match(LR_BRACKET);
			setState(3747);
			windowSpec();
			setState(3748);
			match(RR_BRACKET);
			setState(3758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3749);
				match(COMMA);
				setState(3750);
				windowName();
				setState(3751);
				match(AS);
				setState(3752);
				match(LR_BRACKET);
				setState(3753);
				windowSpec();
				setState(3754);
				match(RR_BRACKET);
				}
				}
				setState(3760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3761);
			expression(0);
			setState(3763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(3762);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			match(LIMIT);
			setState(3776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(3769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(3766);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3767);
					match(COMMA);
					}
					break;
				}
				setState(3771);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3772);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3773);
				match(OFFSET);
				setState(3774);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_limitClauseAtom);
		try {
			setState(3781);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3778);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3779);
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3780);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3783);
			match(START);
			setState(3784);
			match(TRANSACTION);
			setState(3793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3785);
				transactionMode();
				setState(3790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3786);
					match(COMMA);
					setState(3787);
					transactionMode();
					}
					}
					setState(3792);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3795);
			match(BEGIN);
			setState(3797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3796);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			match(COMMIT);
			setState(3801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3800);
				match(WORK);
				}
			}

			setState(3808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3803);
				match(AND);
				setState(3805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3804);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3807);
				match(CHAIN);
				}
			}

			setState(3814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(3811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3810);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3813);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816);
			match(ROLLBACK);
			setState(3818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3817);
				match(WORK);
				}
			}

			setState(3825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3820);
				match(AND);
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3821);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3824);
				match(CHAIN);
				}
			}

			setState(3831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(3828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3827);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3830);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3833);
			match(SAVEPOINT);
			setState(3834);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			match(ROLLBACK);
			setState(3838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3837);
				match(WORK);
				}
			}

			setState(3840);
			match(TO);
			setState(3842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(3841);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3844);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3846);
			match(RELEASE);
			setState(3847);
			match(SAVEPOINT);
			setState(3848);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			match(LOCK);
			setState(3851);
			match(TABLES);
			setState(3852);
			lockTableElement();
			setState(3857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3853);
				match(COMMA);
				setState(3854);
				lockTableElement();
				}
				}
				setState(3859);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3860);
			match(UNLOCK);
			setState(3861);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3863);
			match(SET);
			setState(3864);
			match(AUTOCOMMIT);
			setState(3865);
			match(EQUAL_SYMBOL);
			setState(3866);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			match(SET);
			setState(3870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3869);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3872);
			match(TRANSACTION);
			setState(3873);
			transactionOption();
			setState(3878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3874);
				match(COMMA);
				setState(3875);
				transactionOption();
				}
				}
				setState(3880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_transactionMode);
		try {
			setState(3888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3881);
				match(WITH);
				setState(3882);
				match(CONSISTENT);
				setState(3883);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3884);
				match(READ);
				setState(3885);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3886);
				match(READ);
				setState(3887);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3890);
			tableName();
			setState(3895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (AS - 12)) | (1L << (CURRENT - 12)) | (1L << (DATABASE - 12)) | (1L << (DIAGNOSTICS - 12)) | (1L << (EXCEPT - 12)) | (1L << (GROUP - 12)))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LEFT - 92)) | (1L << (NUMBER - 92)) | (1L << (OPTIONAL - 92)) | (1L << (ORDER - 92)) | (1L << (RIGHT - 92)) | (1L << (SCHEMA - 92)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (STACKED - 159)) | (1L << (DATE - 159)) | (1L << (TIME - 159)) | (1L << (TIMESTAMP - 159)) | (1L << (DATETIME - 159)) | (1L << (YEAR - 159)) | (1L << (BINARY - 159)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXT - 224)) | (1L << (ENUM - 224)) | (1L << (SERIAL - 224)) | (1L << (JSON_ARRAY - 224)) | (1L << (JSON_OBJECT - 224)) | (1L << (JSON_QUOTE - 224)) | (1L << (JSON_CONTAINS - 224)) | (1L << (JSON_CONTAINS_PATH - 224)) | (1L << (JSON_EXTRACT - 224)) | (1L << (JSON_KEYS - 224)) | (1L << (JSON_OVERLAPS - 224)) | (1L << (JSON_SEARCH - 224)) | (1L << (JSON_VALUE - 224)) | (1L << (JSON_ARRAY_APPEND - 224)) | (1L << (JSON_ARRAY_INSERT - 224)) | (1L << (JSON_INSERT - 224)) | (1L << (JSON_MERGE - 224)) | (1L << (JSON_MERGE_PATCH - 224)) | (1L << (JSON_MERGE_PRESERVE - 224)) | (1L << (JSON_REMOVE - 224)) | (1L << (JSON_REPLACE - 224)) | (1L << (JSON_SET - 224)) | (1L << (JSON_UNQUOTE - 224)) | (1L << (JSON_DEPTH - 224)) | (1L << (JSON_LENGTH - 224)) | (1L << (JSON_TYPE - 224)) | (1L << (JSON_VALID - 224)) | (1L << (JSON_TABLE - 224)) | (1L << (JSON_SCHEMA_VALID - 224)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 224)) | (1L << (JSON_PRETTY - 224)) | (1L << (JSON_STORAGE_FREE - 224)) | (1L << (JSON_STORAGE_SIZE - 224)) | (1L << (JSON_ARRAYAGG - 224)) | (1L << (JSON_OBJECTAGG - 224)) | (1L << (AVG - 224)) | (1L << (BIT_AND - 224)) | (1L << (BIT_OR - 224)) | (1L << (BIT_XOR - 224)) | (1L << (COUNT - 224)) | (1L << (GROUP_CONCAT - 224)) | (1L << (MAX - 224)) | (1L << (MIN - 224)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (STD - 292)) | (1L << (STDDEV - 292)) | (1L << (STDDEV_POP - 292)) | (1L << (STDDEV_SAMP - 292)) | (1L << (SUM - 292)) | (1L << (VAR_POP - 292)) | (1L << (VAR_SAMP - 292)) | (1L << (VARIANCE - 292)) | (1L << (POSITION - 292)) | (1L << (ACCOUNT - 292)) | (1L << (ACTION - 292)) | (1L << (AFTER - 292)) | (1L << (AGGREGATE - 292)) | (1L << (ALGORITHM - 292)) | (1L << (ANY - 292)) | (1L << (AT - 292)) | (1L << (AUTHORS - 292)) | (1L << (AUTOCOMMIT - 292)) | (1L << (AUTOEXTEND_SIZE - 292)) | (1L << (AUTO_INCREMENT - 292)) | (1L << (AVG_ROW_LENGTH - 292)) | (1L << (BEGIN - 292)) | (1L << (BINLOG - 292)) | (1L << (BIT - 292)) | (1L << (BLOCK - 292)) | (1L << (BOOL - 292)) | (1L << (BOOLEAN - 292)) | (1L << (BTREE - 292)) | (1L << (CACHE - 292)) | (1L << (CASCADED - 292)) | (1L << (CHAIN - 292)) | (1L << (CHANGED - 292)) | (1L << (CHANNEL - 292)) | (1L << (CHECKSUM - 292)) | (1L << (PAGE_CHECKSUM - 292)) | (1L << (CIPHER - 292)) | (1L << (CLASS_ORIGIN - 292)) | (1L << (CLIENT - 292)) | (1L << (CLOSE - 292)) | (1L << (COALESCE - 292)) | (1L << (CODE - 292)) | (1L << (COLUMNS - 292)) | (1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (COMPACT - 356)) | (1L << (COMPLETION - 356)) | (1L << (COMPRESSED - 356)) | (1L << (COMPRESSION - 356)) | (1L << (CONCURRENT - 356)) | (1L << (CONNECT - 356)) | (1L << (CONNECTION - 356)) | (1L << (CONSISTENT - 356)) | (1L << (CONSTRAINT_CATALOG - 356)) | (1L << (CONSTRAINT_SCHEMA - 356)) | (1L << (CONSTRAINT_NAME - 356)) | (1L << (CONTAINS - 356)) | (1L << (CONTEXT - 356)) | (1L << (CONTRIBUTORS - 356)) | (1L << (COPY - 356)) | (1L << (CPU - 356)) | (1L << (CURSOR_NAME - 356)) | (1L << (DATA - 356)) | (1L << (DATAFILE - 356)) | (1L << (DEALLOCATE - 356)) | (1L << (DEFAULT_AUTH - 356)) | (1L << (DEFINER - 356)) | (1L << (DELAY_KEY_WRITE - 356)) | (1L << (DES_KEY_FILE - 356)) | (1L << (DIRECTORY - 356)) | (1L << (DISABLE - 356)) | (1L << (DISCARD - 356)) | (1L << (DISK - 356)) | (1L << (DO - 356)) | (1L << (DUMPFILE - 356)) | (1L << (DUPLICATE - 356)) | (1L << (DYNAMIC - 356)) | (1L << (ENABLE - 356)) | (1L << (ENCRYPTION - 356)) | (1L << (END - 356)) | (1L << (ENDS - 356)) | (1L << (ENGINE - 356)) | (1L << (ENGINES - 356)) | (1L << (ERROR - 356)) | (1L << (ERRORS - 356)) | (1L << (ESCAPE - 356)) | (1L << (EVEN - 356)) | (1L << (EVENT - 356)) | (1L << (EVENTS - 356)) | (1L << (EVERY - 356)) | (1L << (EXCHANGE - 356)) | (1L << (EXCLUSIVE - 356)) | (1L << (EXPIRE - 356)) | (1L << (EXPORT - 356)) | (1L << (EXTENDED - 356)) | (1L << (EXTENT_SIZE - 356)) | (1L << (FAST - 356)) | (1L << (FAULTS - 356)) | (1L << (FIELDS - 356)) | (1L << (FILE_BLOCK_SIZE - 356)) | (1L << (FILTER - 356)) | (1L << (FIRST - 356)) | (1L << (FIXED - 356)) | (1L << (FLUSH - 356)) | (1L << (FOLLOWS - 356)) | (1L << (FOUND - 356)) | (1L << (FULL - 356)) | (1L << (FUNCTION - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (GENERAL - 420)) | (1L << (GLOBAL - 420)) | (1L << (GRANTS - 420)) | (1L << (GROUP_REPLICATION - 420)) | (1L << (HANDLER - 420)) | (1L << (HASH - 420)) | (1L << (HELP - 420)) | (1L << (HOST - 420)) | (1L << (HOSTS - 420)) | (1L << (IDENTIFIED - 420)) | (1L << (IGNORE_SERVER_IDS - 420)) | (1L << (IMPORT - 420)) | (1L << (INDEXES - 420)) | (1L << (INITIAL_SIZE - 420)) | (1L << (INPLACE - 420)) | (1L << (INSERT_METHOD - 420)) | (1L << (INSTALL - 420)) | (1L << (INSTANCE - 420)) | (1L << (INSTANT - 420)) | (1L << (INVISIBLE - 420)) | (1L << (INVOKER - 420)) | (1L << (IO - 420)) | (1L << (IO_THREAD - 420)) | (1L << (IPC - 420)) | (1L << (ISOLATION - 420)) | (1L << (ISSUER - 420)) | (1L << (JSON - 420)) | (1L << (KEY_BLOCK_SIZE - 420)) | (1L << (LANGUAGE - 420)) | (1L << (LAST - 420)) | (1L << (LEAVES - 420)) | (1L << (LESS - 420)) | (1L << (LEVEL - 420)) | (1L << (LIST - 420)) | (1L << (LOCAL - 420)) | (1L << (LOGFILE - 420)) | (1L << (LOGS - 420)) | (1L << (MASTER - 420)) | (1L << (MASTER_AUTO_POSITION - 420)) | (1L << (MASTER_CONNECT_RETRY - 420)) | (1L << (MASTER_DELAY - 420)) | (1L << (MASTER_HEARTBEAT_PERIOD - 420)) | (1L << (MASTER_HOST - 420)) | (1L << (MASTER_LOG_FILE - 420)) | (1L << (MASTER_LOG_POS - 420)) | (1L << (MASTER_PASSWORD - 420)) | (1L << (MASTER_PORT - 420)) | (1L << (MASTER_RETRY_COUNT - 420)) | (1L << (MASTER_SSL - 420)) | (1L << (MASTER_SSL_CA - 420)) | (1L << (MASTER_SSL_CAPATH - 420)) | (1L << (MASTER_SSL_CERT - 420)) | (1L << (MASTER_SSL_CIPHER - 420)) | (1L << (MASTER_SSL_CRL - 420)) | (1L << (MASTER_SSL_CRLPATH - 420)) | (1L << (MASTER_SSL_KEY - 420)) | (1L << (MASTER_TLS_VERSION - 420)) | (1L << (MASTER_USER - 420)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 420)) | (1L << (MAX_QUERIES_PER_HOUR - 420)) | (1L << (MAX_ROWS - 420)) | (1L << (MAX_SIZE - 420)) | (1L << (MAX_UPDATES_PER_HOUR - 420)) | (1L << (MAX_USER_CONNECTIONS - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (MEDIUM - 484)) | (1L << (MEMBER - 484)) | (1L << (MERGE - 484)) | (1L << (MESSAGE_TEXT - 484)) | (1L << (MID - 484)) | (1L << (MIGRATE - 484)) | (1L << (MIN_ROWS - 484)) | (1L << (MODE - 484)) | (1L << (MODIFY - 484)) | (1L << (MUTEX - 484)) | (1L << (MYSQL - 484)) | (1L << (MYSQL_ERRNO - 484)) | (1L << (NAME - 484)) | (1L << (NAMES - 484)) | (1L << (NCHAR - 484)) | (1L << (NEVER - 484)) | (1L << (NEXT - 484)) | (1L << (NO - 484)) | (1L << (NODEGROUP - 484)) | (1L << (NONE - 484)) | (1L << (ODBC - 484)) | (1L << (OFFLINE - 484)) | (1L << (OFFSET - 484)) | (1L << (OF - 484)) | (1L << (OJ - 484)) | (1L << (OLD_PASSWORD - 484)) | (1L << (ONE - 484)) | (1L << (ONLINE - 484)) | (1L << (ONLY - 484)) | (1L << (OPEN - 484)) | (1L << (OPTIMIZER_COSTS - 484)) | (1L << (OPTIONS - 484)) | (1L << (OWNER - 484)) | (1L << (PACK_KEYS - 484)) | (1L << (PAGE - 484)) | (1L << (PARSER - 484)) | (1L << (PARTIAL - 484)) | (1L << (PARTITIONING - 484)) | (1L << (PARTITIONS - 484)) | (1L << (PASSWORD - 484)) | (1L << (PHASE - 484)) | (1L << (PLUGIN - 484)) | (1L << (PLUGIN_DIR - 484)) | (1L << (PLUGINS - 484)) | (1L << (PORT - 484)) | (1L << (PRECEDES - 484)) | (1L << (PREPARE - 484)) | (1L << (PRESERVE - 484)) | (1L << (PREV - 484)) | (1L << (PROCESSLIST - 484)) | (1L << (PROFILE - 484)) | (1L << (PROFILES - 484)) | (1L << (PROXY - 484)) | (1L << (QUERY - 484)) | (1L << (QUICK - 484)) | (1L << (REBUILD - 484)) | (1L << (RECOVER - 484)) | (1L << (REDO_BUFFER_SIZE - 484)) | (1L << (REDUNDANT - 484)) | (1L << (RELAY - 484)) | (1L << (RELAY_LOG_FILE - 484)) | (1L << (RELAY_LOG_POS - 484)) | (1L << (RELAYLOG - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (REMOVE - 548)) | (1L << (REORGANIZE - 548)) | (1L << (REPAIR - 548)) | (1L << (REPLICATE_DO_DB - 548)) | (1L << (REPLICATE_DO_TABLE - 548)) | (1L << (REPLICATE_IGNORE_DB - 548)) | (1L << (REPLICATE_IGNORE_TABLE - 548)) | (1L << (REPLICATE_REWRITE_DB - 548)) | (1L << (REPLICATE_WILD_DO_TABLE - 548)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 548)) | (1L << (REPLICATION - 548)) | (1L << (RESET - 548)) | (1L << (RESUME - 548)) | (1L << (RETURNED_SQLSTATE - 548)) | (1L << (RETURNS - 548)) | (1L << (ROLE - 548)) | (1L << (ROLLBACK - 548)) | (1L << (ROLLUP - 548)) | (1L << (ROTATE - 548)) | (1L << (ROW - 548)) | (1L << (ROWS - 548)) | (1L << (ROW_FORMAT - 548)) | (1L << (SAVEPOINT - 548)) | (1L << (SCHEDULE - 548)) | (1L << (SECURITY - 548)) | (1L << (SERVER - 548)) | (1L << (SESSION - 548)) | (1L << (SHARE - 548)) | (1L << (SHARED - 548)) | (1L << (SIGNED - 548)) | (1L << (SIMPLE - 548)) | (1L << (SLAVE - 548)) | (1L << (SLOW - 548)) | (1L << (SNAPSHOT - 548)) | (1L << (SOCKET - 548)) | (1L << (SOME - 548)) | (1L << (SONAME - 548)) | (1L << (SOUNDS - 548)) | (1L << (SOURCE - 548)) | (1L << (SQL_AFTER_GTIDS - 548)) | (1L << (SQL_AFTER_MTS_GAPS - 548)) | (1L << (SQL_BEFORE_GTIDS - 548)) | (1L << (SQL_BUFFER_RESULT - 548)) | (1L << (SQL_CACHE - 548)) | (1L << (SQL_NO_CACHE - 548)) | (1L << (SQL_THREAD - 548)) | (1L << (START - 548)) | (1L << (STARTS - 548)) | (1L << (STATS_AUTO_RECALC - 548)) | (1L << (STATS_PERSISTENT - 548)) | (1L << (STATS_SAMPLE_PAGES - 548)) | (1L << (STATUS - 548)) | (1L << (STOP - 548)) | (1L << (STORAGE - 548)) | (1L << (STRING - 548)) | (1L << (SUBCLASS_ORIGIN - 548)) | (1L << (SUBJECT - 548)) | (1L << (SUBPARTITION - 548)) | (1L << (SUBPARTITIONS - 548)) | (1L << (SUSPEND - 548)) | (1L << (SWAPS - 548)) | (1L << (SWITCHES - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (TABLE_NAME - 612)) | (1L << (TABLESPACE - 612)) | (1L << (TEMPORARY - 612)) | (1L << (TEMPTABLE - 612)) | (1L << (THAN - 612)) | (1L << (TRADITIONAL - 612)) | (1L << (TRANSACTION - 612)) | (1L << (TRANSACTIONAL - 612)) | (1L << (TRIGGERS - 612)) | (1L << (TRUNCATE - 612)) | (1L << (UNDEFINED - 612)) | (1L << (UNDOFILE - 612)) | (1L << (UNDO_BUFFER_SIZE - 612)) | (1L << (UNINSTALL - 612)) | (1L << (UNKNOWN - 612)) | (1L << (UNTIL - 612)) | (1L << (UPGRADE - 612)) | (1L << (USER - 612)) | (1L << (USE_FRM - 612)) | (1L << (USER_RESOURCES - 612)) | (1L << (VALIDATION - 612)) | (1L << (VALUE - 612)) | (1L << (VARIABLES - 612)) | (1L << (VIEW - 612)) | (1L << (VISIBLE - 612)) | (1L << (WAIT - 612)) | (1L << (WARNINGS - 612)) | (1L << (WITHOUT - 612)) | (1L << (WORK - 612)) | (1L << (WRAPPER - 612)) | (1L << (X509 - 612)) | (1L << (XA - 612)) | (1L << (XML - 612)) | (1L << (EUR - 612)) | (1L << (USA - 612)) | (1L << (JIS - 612)) | (1L << (ISO - 612)) | (1L << (INTERNAL - 612)) | (1L << (QUARTER - 612)) | (1L << (MONTH - 612)) | (1L << (DAY - 612)) | (1L << (HOUR - 612)) | (1L << (MINUTE - 612)) | (1L << (WEEK - 612)) | (1L << (SECOND - 612)) | (1L << (MICROSECOND - 612)) | (1L << (TABLES - 612)) | (1L << (ROUTINE - 612)) | (1L << (EXECUTE - 612)) | (1L << (FILE - 612)) | (1L << (PROCESS - 612)) | (1L << (RELOAD - 612)) | (1L << (SHUTDOWN - 612)) | (1L << (SUPER - 612)) | (1L << (PRIVILEGES - 612)) | (1L << (AUDIT_ADMIN - 612)) | (1L << (BACKUP_ADMIN - 612)) | (1L << (BINLOG_ADMIN - 612)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (CLONE_ADMIN - 676)) | (1L << (CONNECTION_ADMIN - 676)) | (1L << (ENCRYPTION_KEY_ADMIN - 676)) | (1L << (FIREWALL_ADMIN - 676)) | (1L << (FIREWALL_USER - 676)) | (1L << (ADMIN - 676)) | (1L << (GROUP_REPLICATION_ADMIN - 676)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 676)) | (1L << (NDB_STORED_USER - 676)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 676)) | (1L << (REPLICATION_APPLIER - 676)) | (1L << (REPLICATION_SLAVE_ADMIN - 676)) | (1L << (RESOURCE_GROUP_ADMIN - 676)) | (1L << (RESOURCE_GROUP_USER - 676)) | (1L << (ROLE_ADMIN - 676)) | (1L << (SESSION_VARIABLES_ADMIN - 676)) | (1L << (SET_USER_ID - 676)) | (1L << (SHOW_ROUTINE - 676)) | (1L << (SYSTEM_VARIABLES_ADMIN - 676)) | (1L << (TABLE_ENCRYPTION_ADMIN - 676)) | (1L << (VERSION_TOKEN_ADMIN - 676)) | (1L << (XA_RECOVER_ADMIN - 676)) | (1L << (ARMSCII8 - 676)) | (1L << (ASCII - 676)) | (1L << (BIG5 - 676)) | (1L << (CP1250 - 676)) | (1L << (CP1251 - 676)) | (1L << (CP1256 - 676)) | (1L << (CP1257 - 676)) | (1L << (CP850 - 676)) | (1L << (CP852 - 676)) | (1L << (CP866 - 676)) | (1L << (CP932 - 676)) | (1L << (DEC8 - 676)) | (1L << (EUCJPMS - 676)) | (1L << (EUCKR - 676)) | (1L << (GB18030 - 676)) | (1L << (GB2312 - 676)) | (1L << (GBK - 676)) | (1L << (GEOSTD8 - 676)) | (1L << (GREEK - 676)) | (1L << (HEBREW - 676)) | (1L << (HP8 - 676)) | (1L << (KEYBCS2 - 676)) | (1L << (KOI8R - 676)) | (1L << (KOI8U - 676)) | (1L << (LATIN1 - 676)) | (1L << (LATIN2 - 676)) | (1L << (LATIN5 - 676)) | (1L << (LATIN7 - 676)) | (1L << (MACCE - 676)) | (1L << (MACROMAN - 676)) | (1L << (SJIS - 676)) | (1L << (SWE7 - 676)) | (1L << (TIS620 - 676)) | (1L << (UCS2 - 676)) | (1L << (UJIS - 676)) | (1L << (UTF16 - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (UTF16LE - 740)) | (1L << (UTF32 - 740)) | (1L << (UTF8 - 740)) | (1L << (UTF8MB3 - 740)) | (1L << (UTF8MB4 - 740)) | (1L << (ARCHIVE - 740)) | (1L << (BLACKHOLE - 740)) | (1L << (CSV - 740)) | (1L << (FEDERATED - 740)) | (1L << (INNODB - 740)) | (1L << (MEMORY - 740)) | (1L << (MRG_MYISAM - 740)) | (1L << (MYISAM - 740)) | (1L << (NDB - 740)) | (1L << (NDBCLUSTER - 740)) | (1L << (PERFORMANCE_SCHEMA - 740)) | (1L << (TOKUDB - 740)) | (1L << (REPEATABLE - 740)) | (1L << (COMMITTED - 740)) | (1L << (UNCOMMITTED - 740)) | (1L << (SERIALIZABLE - 740)) | (1L << (GEOMETRYCOLLECTION - 740)) | (1L << (LINESTRING - 740)) | (1L << (MULTILINESTRING - 740)) | (1L << (MULTIPOINT - 740)) | (1L << (MULTIPOLYGON - 740)) | (1L << (POINT - 740)) | (1L << (POLYGON - 740)) | (1L << (ABS - 740)) | (1L << (ACOS - 740)) | (1L << (ADDDATE - 740)) | (1L << (ADDTIME - 740)) | (1L << (AES_DECRYPT - 740)) | (1L << (AES_ENCRYPT - 740)) | (1L << (AREA - 740)) | (1L << (ASBINARY - 740)) | (1L << (ASIN - 740)) | (1L << (ASTEXT - 740)) | (1L << (ASWKB - 740)) | (1L << (ASWKT - 740)) | (1L << (ASYMMETRIC_DECRYPT - 740)) | (1L << (ASYMMETRIC_DERIVE - 740)) | (1L << (ASYMMETRIC_ENCRYPT - 740)) | (1L << (ASYMMETRIC_SIGN - 740)) | (1L << (ASYMMETRIC_VERIFY - 740)) | (1L << (ATAN - 740)) | (1L << (ATAN2 - 740)) | (1L << (BENCHMARK - 740)) | (1L << (BIN - 740)) | (1L << (BIT_COUNT - 740)) | (1L << (BIT_LENGTH - 740)) | (1L << (BUFFER - 740)) | (1L << (CATALOG_NAME - 740)) | (1L << (CEIL - 740)) | (1L << (CEILING - 740)) | (1L << (CENTROID - 740)) | (1L << (CHARACTER_LENGTH - 740)) | (1L << (CHARSET - 740)) | (1L << (CHAR_LENGTH - 740)) | (1L << (COERCIBILITY - 740)) | (1L << (COLLATION - 740)) | (1L << (COMPRESS - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (CONCAT - 804)) | (1L << (CONCAT_WS - 804)) | (1L << (CONNECTION_ID - 804)) | (1L << (CONV - 804)) | (1L << (CONVERT_TZ - 804)) | (1L << (COS - 804)) | (1L << (COT - 804)) | (1L << (CRC32 - 804)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 804)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 804)) | (1L << (CREATE_DH_PARAMETERS - 804)) | (1L << (CREATE_DIGEST - 804)) | (1L << (CROSSES - 804)) | (1L << (DATEDIFF - 804)) | (1L << (DATE_FORMAT - 804)) | (1L << (DAYNAME - 804)) | (1L << (DAYOFMONTH - 804)) | (1L << (DAYOFWEEK - 804)) | (1L << (DAYOFYEAR - 804)) | (1L << (DECODE - 804)) | (1L << (DEGREES - 804)) | (1L << (DES_DECRYPT - 804)) | (1L << (DES_ENCRYPT - 804)) | (1L << (DIMENSION - 804)) | (1L << (DISJOINT - 804)) | (1L << (ELT - 804)) | (1L << (ENCODE - 804)) | (1L << (ENCRYPT - 804)) | (1L << (ENDPOINT - 804)) | (1L << (ENVELOPE - 804)) | (1L << (EQUALS - 804)) | (1L << (EXP - 804)) | (1L << (EXPORT_SET - 804)) | (1L << (EXTERIORRING - 804)) | (1L << (EXTRACTVALUE - 804)) | (1L << (FIELD - 804)) | (1L << (FIND_IN_SET - 804)) | (1L << (FLOOR - 804)) | (1L << (FORMAT - 804)) | (1L << (FOUND_ROWS - 804)) | (1L << (FROM_BASE64 - 804)) | (1L << (FROM_DAYS - 804)) | (1L << (FROM_UNIXTIME - 804)) | (1L << (GEOMCOLLFROMTEXT - 804)) | (1L << (GEOMCOLLFROMWKB - 804)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 804)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 804)) | (1L << (GEOMETRYFROMTEXT - 804)) | (1L << (GEOMETRYFROMWKB - 804)) | (1L << (GEOMETRYN - 804)) | (1L << (GEOMETRYTYPE - 804)) | (1L << (GEOMFROMTEXT - 804)) | (1L << (GEOMFROMWKB - 804)) | (1L << (GET_FORMAT - 804)) | (1L << (GET_LOCK - 804)) | (1L << (GLENGTH - 804)) | (1L << (GREATEST - 804)) | (1L << (GTID_SUBSET - 804)) | (1L << (GTID_SUBTRACT - 804)) | (1L << (HEX - 804)) | (1L << (IFNULL - 804)) | (1L << (INET6_ATON - 804)) | (1L << (INET6_NTOA - 804)) | (1L << (INET_ATON - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (INET_NTOA - 868)) | (1L << (INSTR - 868)) | (1L << (INTERIORRINGN - 868)) | (1L << (INTERSECTS - 868)) | (1L << (ISCLOSED - 868)) | (1L << (ISEMPTY - 868)) | (1L << (ISNULL - 868)) | (1L << (ISSIMPLE - 868)) | (1L << (IS_FREE_LOCK - 868)) | (1L << (IS_IPV4 - 868)) | (1L << (IS_IPV4_COMPAT - 868)) | (1L << (IS_IPV4_MAPPED - 868)) | (1L << (IS_IPV6 - 868)) | (1L << (IS_USED_LOCK - 868)) | (1L << (LAST_INSERT_ID - 868)) | (1L << (LCASE - 868)) | (1L << (LEAST - 868)) | (1L << (LENGTH - 868)) | (1L << (LINEFROMTEXT - 868)) | (1L << (LINEFROMWKB - 868)) | (1L << (LINESTRINGFROMTEXT - 868)) | (1L << (LINESTRINGFROMWKB - 868)) | (1L << (LN - 868)) | (1L << (LOAD_FILE - 868)) | (1L << (LOCATE - 868)) | (1L << (LOG - 868)) | (1L << (LOG10 - 868)) | (1L << (LOG2 - 868)) | (1L << (LOWER - 868)) | (1L << (LPAD - 868)) | (1L << (LTRIM - 868)) | (1L << (MAKEDATE - 868)) | (1L << (MAKETIME - 868)) | (1L << (MAKE_SET - 868)) | (1L << (MASTER_POS_WAIT - 868)) | (1L << (MBRCONTAINS - 868)) | (1L << (MBRDISJOINT - 868)) | (1L << (MBREQUAL - 868)) | (1L << (MBRINTERSECTS - 868)) | (1L << (MBROVERLAPS - 868)) | (1L << (MBRTOUCHES - 868)) | (1L << (MBRWITHIN - 868)) | (1L << (MD5 - 868)) | (1L << (MLINEFROMTEXT - 868)) | (1L << (MLINEFROMWKB - 868)) | (1L << (MONTHNAME - 868)) | (1L << (MPOINTFROMTEXT - 868)) | (1L << (MPOINTFROMWKB - 868)) | (1L << (MPOLYFROMTEXT - 868)) | (1L << (MPOLYFROMWKB - 868)) | (1L << (MULTILINESTRINGFROMTEXT - 868)) | (1L << (MULTILINESTRINGFROMWKB - 868)) | (1L << (MULTIPOINTFROMTEXT - 868)) | (1L << (MULTIPOINTFROMWKB - 868)) | (1L << (MULTIPOLYGONFROMTEXT - 868)) | (1L << (MULTIPOLYGONFROMWKB - 868)) | (1L << (NAME_CONST - 868)) | (1L << (NULLIF - 868)) | (1L << (NUMGEOMETRIES - 868)) | (1L << (NUMINTERIORRINGS - 868)) | (1L << (NUMPOINTS - 868)) | (1L << (OCT - 868)) | (1L << (OCTET_LENGTH - 868)) | (1L << (ORD - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (OVERLAPS - 932)) | (1L << (PERIOD_ADD - 932)) | (1L << (PERIOD_DIFF - 932)) | (1L << (PI - 932)) | (1L << (POINTFROMTEXT - 932)) | (1L << (POINTFROMWKB - 932)) | (1L << (POINTN - 932)) | (1L << (POLYFROMTEXT - 932)) | (1L << (POLYFROMWKB - 932)) | (1L << (POLYGONFROMTEXT - 932)) | (1L << (POLYGONFROMWKB - 932)) | (1L << (POW - 932)) | (1L << (POWER - 932)) | (1L << (QUOTE - 932)) | (1L << (RADIANS - 932)) | (1L << (RAND - 932)) | (1L << (RANDOM_BYTES - 932)) | (1L << (RELEASE_LOCK - 932)) | (1L << (REVERSE - 932)) | (1L << (ROUND - 932)) | (1L << (ROW_COUNT - 932)) | (1L << (RPAD - 932)) | (1L << (RTRIM - 932)) | (1L << (SEC_TO_TIME - 932)) | (1L << (SESSION_USER - 932)) | (1L << (SHA - 932)) | (1L << (SHA1 - 932)) | (1L << (SHA2 - 932)) | (1L << (SCHEMA_NAME - 932)) | (1L << (SIGN - 932)) | (1L << (SIN - 932)) | (1L << (SLEEP - 932)) | (1L << (SOUNDEX - 932)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 932)) | (1L << (SQRT - 932)) | (1L << (SRID - 932)) | (1L << (STARTPOINT - 932)) | (1L << (STRCMP - 932)) | (1L << (STR_TO_DATE - 932)) | (1L << (ST_AREA - 932)) | (1L << (ST_ASBINARY - 932)) | (1L << (ST_ASTEXT - 932)) | (1L << (ST_ASWKB - 932)) | (1L << (ST_ASWKT - 932)) | (1L << (ST_BUFFER - 932)) | (1L << (ST_CENTROID - 932)) | (1L << (ST_CONTAINS - 932)) | (1L << (ST_CROSSES - 932)) | (1L << (ST_DIFFERENCE - 932)) | (1L << (ST_DIMENSION - 932)) | (1L << (ST_DISJOINT - 932)) | (1L << (ST_DISTANCE - 932)) | (1L << (ST_ENDPOINT - 932)) | (1L << (ST_ENVELOPE - 932)) | (1L << (ST_EQUALS - 932)) | (1L << (ST_EXTERIORRING - 932)) | (1L << (ST_GEOMCOLLFROMTEXT - 932)) | (1L << (ST_GEOMCOLLFROMTXT - 932)) | (1L << (ST_GEOMCOLLFROMWKB - 932)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 932)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 932)) | (1L << (ST_GEOMETRYFROMTEXT - 932)) | (1L << (ST_GEOMETRYFROMWKB - 932)) | (1L << (ST_GEOMETRYN - 932)))) != 0) || ((((_la - 996)) & ~0x3f) == 0 && ((1L << (_la - 996)) & ((1L << (ST_GEOMETRYTYPE - 996)) | (1L << (ST_GEOMFROMTEXT - 996)) | (1L << (ST_GEOMFROMWKB - 996)) | (1L << (ST_INTERIORRINGN - 996)) | (1L << (ST_INTERSECTION - 996)) | (1L << (ST_INTERSECTS - 996)) | (1L << (ST_ISCLOSED - 996)) | (1L << (ST_ISEMPTY - 996)) | (1L << (ST_ISSIMPLE - 996)) | (1L << (ST_LINEFROMTEXT - 996)) | (1L << (ST_LINEFROMWKB - 996)) | (1L << (ST_LINESTRINGFROMTEXT - 996)) | (1L << (ST_LINESTRINGFROMWKB - 996)) | (1L << (ST_NUMGEOMETRIES - 996)) | (1L << (ST_NUMINTERIORRING - 996)) | (1L << (ST_NUMINTERIORRINGS - 996)) | (1L << (ST_NUMPOINTS - 996)) | (1L << (ST_OVERLAPS - 996)) | (1L << (ST_POINTFROMTEXT - 996)) | (1L << (ST_POINTFROMWKB - 996)) | (1L << (ST_POINTN - 996)) | (1L << (ST_POLYFROMTEXT - 996)) | (1L << (ST_POLYFROMWKB - 996)) | (1L << (ST_POLYGONFROMTEXT - 996)) | (1L << (ST_POLYGONFROMWKB - 996)) | (1L << (ST_SRID - 996)) | (1L << (ST_STARTPOINT - 996)) | (1L << (ST_SYMDIFFERENCE - 996)) | (1L << (ST_TOUCHES - 996)) | (1L << (ST_UNION - 996)) | (1L << (ST_WITHIN - 996)) | (1L << (ST_X - 996)) | (1L << (ST_Y - 996)) | (1L << (SUBDATE - 996)) | (1L << (SUBSTRING_INDEX - 996)) | (1L << (SUBTIME - 996)) | (1L << (SYSTEM_USER - 996)) | (1L << (TAN - 996)) | (1L << (TIMEDIFF - 996)) | (1L << (TIMESTAMPADD - 996)) | (1L << (TIMESTAMPDIFF - 996)) | (1L << (TIME_FORMAT - 996)) | (1L << (TIME_TO_SEC - 996)) | (1L << (TOUCHES - 996)) | (1L << (TO_BASE64 - 996)) | (1L << (TO_DAYS - 996)) | (1L << (TO_SECONDS - 996)) | (1L << (UCASE - 996)) | (1L << (UNCOMPRESS - 996)) | (1L << (UNCOMPRESSED_LENGTH - 996)) | (1L << (UNHEX - 996)) | (1L << (UNIX_TIMESTAMP - 996)) | (1L << (UPDATEXML - 996)) | (1L << (UPPER - 996)) | (1L << (UUID - 996)) | (1L << (UUID_SHORT - 996)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 996)) | (1L << (VERSION - 996)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 996)) | (1L << (WEEKDAY - 996)) | (1L << (WEEKOFYEAR - 996)) | (1L << (WEIGHT_STRING - 996)) | (1L << (WITHIN - 996)) | (1L << (YEARWEEK - 996)))) != 0) || ((((_la - 1060)) & ~0x3f) == 0 && ((1L << (_la - 1060)) & ((1L << (Y_FUNCTION - 1060)) | (1L << (X_FUNCTION - 1060)) | (1L << (MOD - 1060)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1060)) | (1L << (STRING_LITERAL - 1060)) | (1L << (ID - 1060)) | (1L << (REVERSE_QUOTE_ID - 1060)))) != 0)) {
				{
				setState(3892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3891);
					match(AS);
					}
				}

				setState(3894);
				uid();
				}
			}

			setState(3897);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_lockAction);
		int _la;
		try {
			setState(3907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3899);
				match(READ);
				setState(3901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3900);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3903);
					match(LOW_PRIORITY);
					}
				}

				setState(3906);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_transactionOption);
		try {
			setState(3916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3909);
				match(ISOLATION);
				setState(3910);
				match(LEVEL);
				setState(3911);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3912);
				match(READ);
				setState(3913);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3914);
				match(READ);
				setState(3915);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_transactionLevel);
		try {
			setState(3925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3918);
				match(REPEATABLE);
				setState(3919);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3920);
				match(READ);
				setState(3921);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3922);
				match(READ);
				setState(3923);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3924);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3927);
			match(CHANGE);
			setState(3928);
			match(MASTER);
			setState(3929);
			match(TO);
			setState(3930);
			masterOption();
			setState(3935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3931);
				match(COMMA);
				setState(3932);
				masterOption();
				}
				}
				setState(3937);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3938);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3941);
			match(CHANGE);
			setState(3942);
			match(REPLICATION);
			setState(3943);
			match(FILTER);
			setState(3944);
			replicationFilter();
			setState(3949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3945);
				match(COMMA);
				setState(3946);
				replicationFilter();
				}
				}
				setState(3951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3952);
			match(PURGE);
			setState(3953);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3954);
			match(LOGS);
			setState(3959);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3955);
				match(TO);
				setState(3956);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3957);
				match(BEFORE);
				setState(3958);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3961);
			match(RESET);
			setState(3962);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			match(RESET);
			setState(3965);
			match(SLAVE);
			setState(3967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3966);
				match(ALL);
				}
			}

			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3969);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3972);
			match(START);
			setState(3973);
			match(SLAVE);
			setState(3982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3974);
				threadType();
				setState(3979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3975);
					match(COMMA);
					setState(3976);
					threadType();
					}
					}
					setState(3981);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3984);
				match(UNTIL);
				setState(3985);
				untilOption();
				}
			}

			setState(3991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3988);
				connectionOption();
				}
				}
				setState(3993);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3994);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3997);
			match(STOP);
			setState(3998);
			match(SLAVE);
			setState(4007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3999);
				threadType();
				setState(4004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4000);
					match(COMMA);
					setState(4001);
					threadType();
					}
					}
					setState(4006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4009);
			match(START);
			setState(4010);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4012);
			match(STOP);
			setState(4013);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_masterOption);
		int _la;
		try {
			setState(4044);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4015);
				stringMasterOption();
				setState(4016);
				match(EQUAL_SYMBOL);
				setState(4017);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4019);
				decimalMasterOption();
				setState(4020);
				match(EQUAL_SYMBOL);
				setState(4021);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4023);
				boolMasterOption();
				setState(4024);
				match(EQUAL_SYMBOL);
				setState(4025);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4027);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(4028);
				match(EQUAL_SYMBOL);
				setState(4029);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4030);
				match(IGNORE_SERVER_IDS);
				setState(4031);
				match(EQUAL_SYMBOL);
				setState(4032);
				match(LR_BRACKET);
				setState(4041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
					{
					setState(4033);
					uid();
					setState(4038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4034);
						match(COMMA);
						setState(4035);
						uid();
						}
						}
						setState(4040);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4043);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4046);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (MASTER_HOST - 462)) | (1L << (MASTER_LOG_FILE - 462)) | (1L << (MASTER_PASSWORD - 462)) | (1L << (MASTER_SSL_CA - 462)) | (1L << (MASTER_SSL_CAPATH - 462)) | (1L << (MASTER_SSL_CERT - 462)) | (1L << (MASTER_SSL_CIPHER - 462)) | (1L << (MASTER_SSL_CRL - 462)) | (1L << (MASTER_SSL_CRLPATH - 462)) | (1L << (MASTER_SSL_KEY - 462)) | (1L << (MASTER_TLS_VERSION - 462)) | (1L << (MASTER_USER - 462)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4048);
			_la = _input.LA(1);
			if ( !(((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (MASTER_CONNECT_RETRY - 459)) | (1L << (MASTER_DELAY - 459)) | (1L << (MASTER_LOG_POS - 459)) | (1L << (MASTER_PORT - 459)) | (1L << (MASTER_RETRY_COUNT - 459)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4052);
			match(FOR);
			setState(4053);
			match(CHANNEL);
			setState(4054);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_replicationFilter);
		int _la;
		try {
			setState(4105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4056);
				match(REPLICATE_DO_DB);
				setState(4057);
				match(EQUAL_SYMBOL);
				setState(4058);
				match(LR_BRACKET);
				setState(4059);
				uidList();
				setState(4060);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4062);
				match(REPLICATE_IGNORE_DB);
				setState(4063);
				match(EQUAL_SYMBOL);
				setState(4064);
				match(LR_BRACKET);
				setState(4065);
				uidList();
				setState(4066);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4068);
				match(REPLICATE_DO_TABLE);
				setState(4069);
				match(EQUAL_SYMBOL);
				setState(4070);
				match(LR_BRACKET);
				setState(4071);
				tables();
				setState(4072);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4074);
				match(REPLICATE_IGNORE_TABLE);
				setState(4075);
				match(EQUAL_SYMBOL);
				setState(4076);
				match(LR_BRACKET);
				setState(4077);
				tables();
				setState(4078);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4080);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4081);
				match(EQUAL_SYMBOL);
				setState(4082);
				match(LR_BRACKET);
				setState(4083);
				simpleStrings();
				setState(4084);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4086);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4087);
				match(EQUAL_SYMBOL);
				setState(4088);
				match(LR_BRACKET);
				setState(4089);
				simpleStrings();
				setState(4090);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4092);
				match(REPLICATE_REWRITE_DB);
				setState(4093);
				match(EQUAL_SYMBOL);
				setState(4094);
				match(LR_BRACKET);
				setState(4095);
				tablePair();
				setState(4100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4096);
					match(COMMA);
					setState(4097);
					tablePair();
					}
					}
					setState(4102);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4103);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			match(LR_BRACKET);
			setState(4108);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4109);
			match(COMMA);
			setState(4110);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4111);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_untilOption);
		int _la;
		try {
			setState(4133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4115);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4116);
				match(EQUAL_SYMBOL);
				setState(4117);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4118);
				match(MASTER_LOG_FILE);
				setState(4119);
				match(EQUAL_SYMBOL);
				setState(4120);
				match(STRING_LITERAL);
				setState(4121);
				match(COMMA);
				setState(4122);
				match(MASTER_LOG_POS);
				setState(4123);
				match(EQUAL_SYMBOL);
				setState(4124);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4125);
				match(RELAY_LOG_FILE);
				setState(4126);
				match(EQUAL_SYMBOL);
				setState(4127);
				match(STRING_LITERAL);
				setState(4128);
				match(COMMA);
				setState(4129);
				match(RELAY_LOG_POS);
				setState(4130);
				match(EQUAL_SYMBOL);
				setState(4131);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4132);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_connectionOption);
		try {
			setState(4147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4135);
				match(USER);
				setState(4136);
				match(EQUAL_SYMBOL);
				setState(4137);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4138);
				match(PASSWORD);
				setState(4139);
				match(EQUAL_SYMBOL);
				setState(4140);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4141);
				match(DEFAULT_AUTH);
				setState(4142);
				match(EQUAL_SYMBOL);
				setState(4143);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4144);
				match(PLUGIN_DIR);
				setState(4145);
				match(EQUAL_SYMBOL);
				setState(4146);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_gtuidSet);
		int _la;
		try {
			setState(4158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4149);
				uuidSet();
				setState(4154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4150);
					match(COMMA);
					setState(4151);
					uuidSet();
					}
					}
					setState(4156);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4157);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4160);
			match(XA);
			setState(4161);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4162);
			xid();
			setState(4164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4163);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4166);
			match(XA);
			setState(4167);
			match(END);
			setState(4168);
			xid();
			setState(4174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4169);
				match(SUSPEND);
				setState(4172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4170);
					match(FOR);
					setState(4171);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4176);
			match(XA);
			setState(4177);
			match(PREPARE);
			setState(4178);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4180);
			match(XA);
			setState(4181);
			match(COMMIT);
			setState(4182);
			xid();
			setState(4185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4183);
				match(ONE);
				setState(4184);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			match(XA);
			setState(4188);
			match(ROLLBACK);
			setState(4189);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4191);
			match(XA);
			setState(4192);
			match(RECOVER);
			setState(4195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4193);
				match(CONVERT);
				setState(4194);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4197);
			match(PREPARE);
			setState(4198);
			uid();
			setState(4199);
			match(FROM);
			setState(4202);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4200);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4201);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4204);
			match(EXECUTE);
			setState(4205);
			uid();
			setState(4208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4206);
				match(USING);
				setState(4207);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4211);
			match(PREPARE);
			setState(4212);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_routineBody);
		try {
			setState(4216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4214);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4215);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
			case 1:
				{
				setState(4218);
				uid();
				setState(4219);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4223);
			match(BEGIN);
			setState(4262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				{
				setState(4229);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4224);
						declareVariable();
						setState(4225);
						match(SEMI);
						}
						} 
					}
					setState(4231);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
				}
				setState(4237);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,602,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4232);
						declareCondition();
						setState(4233);
						match(SEMI);
						}
						} 
					}
					setState(4239);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,602,_ctx);
				}
				setState(4245);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,603,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4240);
						declareCursor();
						setState(4241);
						match(SEMI);
						}
						} 
					}
					setState(4247);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,603,_ctx);
				}
				setState(4253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4248);
					declareHandler();
					setState(4249);
					match(SEMI);
					}
					}
					setState(4255);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4259);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4256);
						procedureSqlStatement();
						}
						} 
					}
					setState(4261);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
				}
				}
				break;
			}
			setState(4264);
			match(END);
			setState(4266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				{
				setState(4265);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4268);
			match(CASE);
			setState(4271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(4269);
				uid();
				}
				break;
			case 2:
				{
				setState(4270);
				expression(0);
				}
				break;
			}
			setState(4274); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4273);
				caseAlternative();
				}
				}
				setState(4276); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4278);
				match(ELSE);
				setState(4280); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4279);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4282); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,610,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4286);
			match(END);
			setState(4287);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4289);
			match(IF);
			setState(4290);
			expression(0);
			setState(4291);
			match(THEN);
			setState(4293); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4292);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4295); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,612,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4297);
				elifAlternative();
				}
				}
				setState(4302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4303);
				match(ELSE);
				setState(4305); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4304);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4307); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4311);
			match(END);
			setState(4312);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			match(ITERATE);
			setState(4315);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4317);
			match(LEAVE);
			setState(4318);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(4320);
				uid();
				setState(4321);
				match(COLON_SYMB);
				}
			}

			setState(4325);
			match(LOOP);
			setState(4327); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4326);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4329); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,617,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4331);
			match(END);
			setState(4332);
			match(LOOP);
			setState(4334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(4333);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(4336);
				uid();
				setState(4337);
				match(COLON_SYMB);
				}
			}

			setState(4341);
			match(REPEAT);
			setState(4343); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4342);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4345); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4347);
			match(UNTIL);
			setState(4348);
			expression(0);
			setState(4349);
			match(END);
			setState(4350);
			match(REPEAT);
			setState(4352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(4351);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			match(RETURN);
			setState(4355);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(4357);
				uid();
				setState(4358);
				match(COLON_SYMB);
				}
			}

			setState(4362);
			match(WHILE);
			setState(4363);
			expression(0);
			setState(4364);
			match(DO);
			setState(4366); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4365);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4368); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,623,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4370);
			match(END);
			setState(4371);
			match(WHILE);
			setState(4373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (RIGHT - 110)) | (1L << (SCHEMA - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (SERIAL - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (AVG - 271)) | (1L << (BIT_AND - 271)) | (1L << (BIT_OR - 271)) | (1L << (BIT_XOR - 271)) | (1L << (COUNT - 271)) | (1L << (GROUP_CONCAT - 271)) | (1L << (MAX - 271)) | (1L << (MIN - 271)) | (1L << (STD - 271)) | (1L << (STDDEV - 271)) | (1L << (STDDEV_POP - 271)) | (1L << (STDDEV_SAMP - 271)) | (1L << (SUM - 271)) | (1L << (VAR_POP - 271)) | (1L << (VAR_SAMP - 271)) | (1L << (VARIANCE - 271)) | (1L << (POSITION - 271)) | (1L << (ACCOUNT - 271)) | (1L << (ACTION - 271)) | (1L << (AFTER - 271)) | (1L << (AGGREGATE - 271)) | (1L << (ALGORITHM - 271)) | (1L << (ANY - 271)) | (1L << (AT - 271)) | (1L << (AUTHORS - 271)) | (1L << (AUTOCOMMIT - 271)) | (1L << (AUTOEXTEND_SIZE - 271)) | (1L << (AUTO_INCREMENT - 271)) | (1L << (AVG_ROW_LENGTH - 271)) | (1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (BIT - 271)) | (1L << (BLOCK - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BOOL - 335)) | (1L << (BOOLEAN - 335)) | (1L << (BTREE - 335)) | (1L << (CACHE - 335)) | (1L << (CASCADED - 335)) | (1L << (CHAIN - 335)) | (1L << (CHANGED - 335)) | (1L << (CHANNEL - 335)) | (1L << (CHECKSUM - 335)) | (1L << (PAGE_CHECKSUM - 335)) | (1L << (CIPHER - 335)) | (1L << (CLASS_ORIGIN - 335)) | (1L << (CLIENT - 335)) | (1L << (CLOSE - 335)) | (1L << (COALESCE - 335)) | (1L << (CODE - 335)) | (1L << (COLUMNS - 335)) | (1L << (COLUMN_FORMAT - 335)) | (1L << (COLUMN_NAME - 335)) | (1L << (COMMENT - 335)) | (1L << (COMMIT - 335)) | (1L << (COMPACT - 335)) | (1L << (COMPLETION - 335)) | (1L << (COMPRESSED - 335)) | (1L << (COMPRESSION - 335)) | (1L << (CONCURRENT - 335)) | (1L << (CONNECT - 335)) | (1L << (CONNECTION - 335)) | (1L << (CONSISTENT - 335)) | (1L << (CONSTRAINT_CATALOG - 335)) | (1L << (CONSTRAINT_SCHEMA - 335)) | (1L << (CONSTRAINT_NAME - 335)) | (1L << (CONTAINS - 335)) | (1L << (CONTEXT - 335)) | (1L << (CONTRIBUTORS - 335)) | (1L << (COPY - 335)) | (1L << (CPU - 335)) | (1L << (CURSOR_NAME - 335)) | (1L << (DATA - 335)) | (1L << (DATAFILE - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DEFAULT_AUTH - 335)) | (1L << (DEFINER - 335)) | (1L << (DELAY_KEY_WRITE - 335)) | (1L << (DES_KEY_FILE - 335)) | (1L << (DIRECTORY - 335)) | (1L << (DISABLE - 335)) | (1L << (DISCARD - 335)) | (1L << (DISK - 335)) | (1L << (DO - 335)) | (1L << (DUMPFILE - 335)) | (1L << (DUPLICATE - 335)) | (1L << (DYNAMIC - 335)) | (1L << (ENABLE - 335)) | (1L << (ENCRYPTION - 335)) | (1L << (END - 335)) | (1L << (ENDS - 335)) | (1L << (ENGINE - 335)) | (1L << (ENGINES - 335)) | (1L << (ERROR - 335)) | (1L << (ERRORS - 335)) | (1L << (ESCAPE - 335)) | (1L << (EVEN - 335)) | (1L << (EVENT - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (EVENTS - 399)) | (1L << (EVERY - 399)) | (1L << (EXCHANGE - 399)) | (1L << (EXCLUSIVE - 399)) | (1L << (EXPIRE - 399)) | (1L << (EXPORT - 399)) | (1L << (EXTENDED - 399)) | (1L << (EXTENT_SIZE - 399)) | (1L << (FAST - 399)) | (1L << (FAULTS - 399)) | (1L << (FIELDS - 399)) | (1L << (FILE_BLOCK_SIZE - 399)) | (1L << (FILTER - 399)) | (1L << (FIRST - 399)) | (1L << (FIXED - 399)) | (1L << (FLUSH - 399)) | (1L << (FOLLOWS - 399)) | (1L << (FOUND - 399)) | (1L << (FULL - 399)) | (1L << (FUNCTION - 399)) | (1L << (GENERAL - 399)) | (1L << (GLOBAL - 399)) | (1L << (GRANTS - 399)) | (1L << (GROUP_REPLICATION - 399)) | (1L << (HANDLER - 399)) | (1L << (HASH - 399)) | (1L << (HELP - 399)) | (1L << (HOST - 399)) | (1L << (HOSTS - 399)) | (1L << (IDENTIFIED - 399)) | (1L << (IGNORE_SERVER_IDS - 399)) | (1L << (IMPORT - 399)) | (1L << (INDEXES - 399)) | (1L << (INITIAL_SIZE - 399)) | (1L << (INPLACE - 399)) | (1L << (INSERT_METHOD - 399)) | (1L << (INSTALL - 399)) | (1L << (INSTANCE - 399)) | (1L << (INSTANT - 399)) | (1L << (INVISIBLE - 399)) | (1L << (INVOKER - 399)) | (1L << (IO - 399)) | (1L << (IO_THREAD - 399)) | (1L << (IPC - 399)) | (1L << (ISOLATION - 399)) | (1L << (ISSUER - 399)) | (1L << (JSON - 399)) | (1L << (KEY_BLOCK_SIZE - 399)) | (1L << (LANGUAGE - 399)) | (1L << (LAST - 399)) | (1L << (LEAVES - 399)) | (1L << (LESS - 399)) | (1L << (LEVEL - 399)) | (1L << (LIST - 399)) | (1L << (LOCAL - 399)) | (1L << (LOGFILE - 399)) | (1L << (LOGS - 399)) | (1L << (MASTER - 399)) | (1L << (MASTER_AUTO_POSITION - 399)) | (1L << (MASTER_CONNECT_RETRY - 399)) | (1L << (MASTER_DELAY - 399)) | (1L << (MASTER_HEARTBEAT_PERIOD - 399)) | (1L << (MASTER_HOST - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (MASTER_LOG_FILE - 463)) | (1L << (MASTER_LOG_POS - 463)) | (1L << (MASTER_PASSWORD - 463)) | (1L << (MASTER_PORT - 463)) | (1L << (MASTER_RETRY_COUNT - 463)) | (1L << (MASTER_SSL - 463)) | (1L << (MASTER_SSL_CA - 463)) | (1L << (MASTER_SSL_CAPATH - 463)) | (1L << (MASTER_SSL_CERT - 463)) | (1L << (MASTER_SSL_CIPHER - 463)) | (1L << (MASTER_SSL_CRL - 463)) | (1L << (MASTER_SSL_CRLPATH - 463)) | (1L << (MASTER_SSL_KEY - 463)) | (1L << (MASTER_TLS_VERSION - 463)) | (1L << (MASTER_USER - 463)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 463)) | (1L << (MAX_QUERIES_PER_HOUR - 463)) | (1L << (MAX_ROWS - 463)) | (1L << (MAX_SIZE - 463)) | (1L << (MAX_UPDATES_PER_HOUR - 463)) | (1L << (MAX_USER_CONNECTIONS - 463)) | (1L << (MEDIUM - 463)) | (1L << (MEMBER - 463)) | (1L << (MERGE - 463)) | (1L << (MESSAGE_TEXT - 463)) | (1L << (MID - 463)) | (1L << (MIGRATE - 463)) | (1L << (MIN_ROWS - 463)) | (1L << (MODE - 463)) | (1L << (MODIFY - 463)) | (1L << (MUTEX - 463)) | (1L << (MYSQL - 463)) | (1L << (MYSQL_ERRNO - 463)) | (1L << (NAME - 463)) | (1L << (NAMES - 463)) | (1L << (NCHAR - 463)) | (1L << (NEVER - 463)) | (1L << (NEXT - 463)) | (1L << (NO - 463)) | (1L << (NODEGROUP - 463)) | (1L << (NONE - 463)) | (1L << (ODBC - 463)) | (1L << (OFFLINE - 463)) | (1L << (OFFSET - 463)) | (1L << (OF - 463)) | (1L << (OJ - 463)) | (1L << (OLD_PASSWORD - 463)) | (1L << (ONE - 463)) | (1L << (ONLINE - 463)) | (1L << (ONLY - 463)) | (1L << (OPEN - 463)) | (1L << (OPTIMIZER_COSTS - 463)) | (1L << (OPTIONS - 463)) | (1L << (OWNER - 463)) | (1L << (PACK_KEYS - 463)) | (1L << (PAGE - 463)) | (1L << (PARSER - 463)) | (1L << (PARTIAL - 463)) | (1L << (PARTITIONING - 463)) | (1L << (PARTITIONS - 463)) | (1L << (PASSWORD - 463)) | (1L << (PHASE - 463)) | (1L << (PLUGIN - 463)) | (1L << (PLUGIN_DIR - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUGINS - 527)) | (1L << (PORT - 527)) | (1L << (PRECEDES - 527)) | (1L << (PREPARE - 527)) | (1L << (PRESERVE - 527)) | (1L << (PREV - 527)) | (1L << (PROCESSLIST - 527)) | (1L << (PROFILE - 527)) | (1L << (PROFILES - 527)) | (1L << (PROXY - 527)) | (1L << (QUERY - 527)) | (1L << (QUICK - 527)) | (1L << (REBUILD - 527)) | (1L << (RECOVER - 527)) | (1L << (REDO_BUFFER_SIZE - 527)) | (1L << (REDUNDANT - 527)) | (1L << (RELAY - 527)) | (1L << (RELAY_LOG_FILE - 527)) | (1L << (RELAY_LOG_POS - 527)) | (1L << (RELAYLOG - 527)) | (1L << (REMOVE - 527)) | (1L << (REORGANIZE - 527)) | (1L << (REPAIR - 527)) | (1L << (REPLICATE_DO_DB - 527)) | (1L << (REPLICATE_DO_TABLE - 527)) | (1L << (REPLICATE_IGNORE_DB - 527)) | (1L << (REPLICATE_IGNORE_TABLE - 527)) | (1L << (REPLICATE_REWRITE_DB - 527)) | (1L << (REPLICATE_WILD_DO_TABLE - 527)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 527)) | (1L << (REPLICATION - 527)) | (1L << (RESET - 527)) | (1L << (RESUME - 527)) | (1L << (RETURNED_SQLSTATE - 527)) | (1L << (RETURNS - 527)) | (1L << (ROLE - 527)) | (1L << (ROLLBACK - 527)) | (1L << (ROLLUP - 527)) | (1L << (ROTATE - 527)) | (1L << (ROW - 527)) | (1L << (ROWS - 527)) | (1L << (ROW_FORMAT - 527)) | (1L << (SAVEPOINT - 527)) | (1L << (SCHEDULE - 527)) | (1L << (SECURITY - 527)) | (1L << (SERVER - 527)) | (1L << (SESSION - 527)) | (1L << (SHARE - 527)) | (1L << (SHARED - 527)) | (1L << (SIGNED - 527)) | (1L << (SIMPLE - 527)) | (1L << (SLAVE - 527)) | (1L << (SLOW - 527)) | (1L << (SNAPSHOT - 527)) | (1L << (SOCKET - 527)) | (1L << (SOME - 527)) | (1L << (SONAME - 527)) | (1L << (SOUNDS - 527)) | (1L << (SOURCE - 527)) | (1L << (SQL_AFTER_GTIDS - 527)) | (1L << (SQL_AFTER_MTS_GAPS - 527)) | (1L << (SQL_BEFORE_GTIDS - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (SQL_BUFFER_RESULT - 591)) | (1L << (SQL_CACHE - 591)) | (1L << (SQL_NO_CACHE - 591)) | (1L << (SQL_THREAD - 591)) | (1L << (START - 591)) | (1L << (STARTS - 591)) | (1L << (STATS_AUTO_RECALC - 591)) | (1L << (STATS_PERSISTENT - 591)) | (1L << (STATS_SAMPLE_PAGES - 591)) | (1L << (STATUS - 591)) | (1L << (STOP - 591)) | (1L << (STORAGE - 591)) | (1L << (STRING - 591)) | (1L << (SUBCLASS_ORIGIN - 591)) | (1L << (SUBJECT - 591)) | (1L << (SUBPARTITION - 591)) | (1L << (SUBPARTITIONS - 591)) | (1L << (SUSPEND - 591)) | (1L << (SWAPS - 591)) | (1L << (SWITCHES - 591)) | (1L << (TABLE_NAME - 591)) | (1L << (TABLESPACE - 591)) | (1L << (TEMPORARY - 591)) | (1L << (TEMPTABLE - 591)) | (1L << (THAN - 591)) | (1L << (TRADITIONAL - 591)) | (1L << (TRANSACTION - 591)) | (1L << (TRANSACTIONAL - 591)) | (1L << (TRIGGERS - 591)) | (1L << (TRUNCATE - 591)) | (1L << (UNDEFINED - 591)) | (1L << (UNDOFILE - 591)) | (1L << (UNDO_BUFFER_SIZE - 591)) | (1L << (UNINSTALL - 591)) | (1L << (UNKNOWN - 591)) | (1L << (UNTIL - 591)) | (1L << (UPGRADE - 591)) | (1L << (USER - 591)) | (1L << (USE_FRM - 591)) | (1L << (USER_RESOURCES - 591)) | (1L << (VALIDATION - 591)) | (1L << (VALUE - 591)) | (1L << (VARIABLES - 591)) | (1L << (VIEW - 591)) | (1L << (VISIBLE - 591)) | (1L << (WAIT - 591)) | (1L << (WARNINGS - 591)) | (1L << (WITHOUT - 591)) | (1L << (WORK - 591)) | (1L << (WRAPPER - 591)) | (1L << (X509 - 591)) | (1L << (XA - 591)) | (1L << (XML - 591)) | (1L << (EUR - 591)) | (1L << (USA - 591)) | (1L << (JIS - 591)) | (1L << (ISO - 591)) | (1L << (INTERNAL - 591)) | (1L << (QUARTER - 591)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (MONTH - 655)) | (1L << (DAY - 655)) | (1L << (HOUR - 655)) | (1L << (MINUTE - 655)) | (1L << (WEEK - 655)) | (1L << (SECOND - 655)) | (1L << (MICROSECOND - 655)) | (1L << (TABLES - 655)) | (1L << (ROUTINE - 655)) | (1L << (EXECUTE - 655)) | (1L << (FILE - 655)) | (1L << (PROCESS - 655)) | (1L << (RELOAD - 655)) | (1L << (SHUTDOWN - 655)) | (1L << (SUPER - 655)) | (1L << (PRIVILEGES - 655)) | (1L << (AUDIT_ADMIN - 655)) | (1L << (BACKUP_ADMIN - 655)) | (1L << (BINLOG_ADMIN - 655)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 655)) | (1L << (CLONE_ADMIN - 655)) | (1L << (CONNECTION_ADMIN - 655)) | (1L << (ENCRYPTION_KEY_ADMIN - 655)) | (1L << (FIREWALL_ADMIN - 655)) | (1L << (FIREWALL_USER - 655)) | (1L << (ADMIN - 655)) | (1L << (GROUP_REPLICATION_ADMIN - 655)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 655)) | (1L << (NDB_STORED_USER - 655)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 655)) | (1L << (REPLICATION_APPLIER - 655)) | (1L << (REPLICATION_SLAVE_ADMIN - 655)) | (1L << (RESOURCE_GROUP_ADMIN - 655)) | (1L << (RESOURCE_GROUP_USER - 655)) | (1L << (ROLE_ADMIN - 655)) | (1L << (SESSION_VARIABLES_ADMIN - 655)) | (1L << (SET_USER_ID - 655)) | (1L << (SHOW_ROUTINE - 655)) | (1L << (SYSTEM_VARIABLES_ADMIN - 655)) | (1L << (TABLE_ENCRYPTION_ADMIN - 655)) | (1L << (VERSION_TOKEN_ADMIN - 655)) | (1L << (XA_RECOVER_ADMIN - 655)) | (1L << (ARMSCII8 - 655)) | (1L << (ASCII - 655)) | (1L << (BIG5 - 655)) | (1L << (CP1250 - 655)) | (1L << (CP1251 - 655)) | (1L << (CP1256 - 655)) | (1L << (CP1257 - 655)) | (1L << (CP850 - 655)) | (1L << (CP852 - 655)) | (1L << (CP866 - 655)) | (1L << (CP932 - 655)) | (1L << (DEC8 - 655)) | (1L << (EUCJPMS - 655)) | (1L << (EUCKR - 655)) | (1L << (GB18030 - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (GB2312 - 719)) | (1L << (GBK - 719)) | (1L << (GEOSTD8 - 719)) | (1L << (GREEK - 719)) | (1L << (HEBREW - 719)) | (1L << (HP8 - 719)) | (1L << (KEYBCS2 - 719)) | (1L << (KOI8R - 719)) | (1L << (KOI8U - 719)) | (1L << (LATIN1 - 719)) | (1L << (LATIN2 - 719)) | (1L << (LATIN5 - 719)) | (1L << (LATIN7 - 719)) | (1L << (MACCE - 719)) | (1L << (MACROMAN - 719)) | (1L << (SJIS - 719)) | (1L << (SWE7 - 719)) | (1L << (TIS620 - 719)) | (1L << (UCS2 - 719)) | (1L << (UJIS - 719)) | (1L << (UTF16 - 719)) | (1L << (UTF16LE - 719)) | (1L << (UTF32 - 719)) | (1L << (UTF8 - 719)) | (1L << (UTF8MB3 - 719)) | (1L << (UTF8MB4 - 719)) | (1L << (ARCHIVE - 719)) | (1L << (BLACKHOLE - 719)) | (1L << (CSV - 719)) | (1L << (FEDERATED - 719)) | (1L << (INNODB - 719)) | (1L << (MEMORY - 719)) | (1L << (MRG_MYISAM - 719)) | (1L << (MYISAM - 719)) | (1L << (NDB - 719)) | (1L << (NDBCLUSTER - 719)) | (1L << (PERFORMANCE_SCHEMA - 719)) | (1L << (TOKUDB - 719)) | (1L << (REPEATABLE - 719)) | (1L << (COMMITTED - 719)) | (1L << (UNCOMMITTED - 719)) | (1L << (SERIALIZABLE - 719)) | (1L << (GEOMETRYCOLLECTION - 719)) | (1L << (LINESTRING - 719)) | (1L << (MULTILINESTRING - 719)) | (1L << (MULTIPOINT - 719)) | (1L << (MULTIPOLYGON - 719)) | (1L << (POINT - 719)) | (1L << (POLYGON - 719)) | (1L << (ABS - 719)) | (1L << (ACOS - 719)) | (1L << (ADDDATE - 719)) | (1L << (ADDTIME - 719)) | (1L << (AES_DECRYPT - 719)) | (1L << (AES_ENCRYPT - 719)) | (1L << (AREA - 719)) | (1L << (ASBINARY - 719)) | (1L << (ASIN - 719)) | (1L << (ASTEXT - 719)) | (1L << (ASWKB - 719)) | (1L << (ASWKT - 719)) | (1L << (ASYMMETRIC_DECRYPT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CATALOG_NAME - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)) | (1L << (DES_DECRYPT - 783)) | (1L << (DES_ENCRYPT - 783)) | (1L << (DIMENSION - 783)) | (1L << (DISJOINT - 783)) | (1L << (ELT - 783)) | (1L << (ENCODE - 783)) | (1L << (ENCRYPT - 783)) | (1L << (ENDPOINT - 783)) | (1L << (ENVELOPE - 783)) | (1L << (EQUALS - 783)) | (1L << (EXP - 783)) | (1L << (EXPORT_SET - 783)) | (1L << (EXTERIORRING - 783)) | (1L << (EXTRACTVALUE - 783)) | (1L << (FIELD - 783)) | (1L << (FIND_IN_SET - 783)) | (1L << (FLOOR - 783)) | (1L << (FORMAT - 783)) | (1L << (FOUND_ROWS - 783)) | (1L << (FROM_BASE64 - 783)) | (1L << (FROM_DAYS - 783)) | (1L << (FROM_UNIXTIME - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)) | (1L << (LINESTRINGFROMTEXT - 847)) | (1L << (LINESTRINGFROMWKB - 847)) | (1L << (LN - 847)) | (1L << (LOAD_FILE - 847)) | (1L << (LOCATE - 847)) | (1L << (LOG - 847)) | (1L << (LOG10 - 847)) | (1L << (LOG2 - 847)) | (1L << (LOWER - 847)) | (1L << (LPAD - 847)) | (1L << (LTRIM - 847)) | (1L << (MAKEDATE - 847)) | (1L << (MAKETIME - 847)) | (1L << (MAKE_SET - 847)) | (1L << (MASTER_POS_WAIT - 847)) | (1L << (MBRCONTAINS - 847)) | (1L << (MBRDISJOINT - 847)) | (1L << (MBREQUAL - 847)) | (1L << (MBRINTERSECTS - 847)) | (1L << (MBROVERLAPS - 847)) | (1L << (MBRTOUCHES - 847)) | (1L << (MBRWITHIN - 847)) | (1L << (MD5 - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)) | (1L << (ROW_COUNT - 911)) | (1L << (RPAD - 911)) | (1L << (RTRIM - 911)) | (1L << (SEC_TO_TIME - 911)) | (1L << (SESSION_USER - 911)) | (1L << (SHA - 911)) | (1L << (SHA1 - 911)) | (1L << (SHA2 - 911)) | (1L << (SCHEMA_NAME - 911)) | (1L << (SIGN - 911)) | (1L << (SIN - 911)) | (1L << (SLEEP - 911)) | (1L << (SOUNDEX - 911)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 911)) | (1L << (SQRT - 911)) | (1L << (SRID - 911)) | (1L << (STARTPOINT - 911)) | (1L << (STRCMP - 911)) | (1L << (STR_TO_DATE - 911)) | (1L << (ST_AREA - 911)) | (1L << (ST_ASBINARY - 911)) | (1L << (ST_ASTEXT - 911)) | (1L << (ST_ASWKB - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)) | (1L << (ST_POINTFROMWKB - 975)) | (1L << (ST_POINTN - 975)) | (1L << (ST_POLYFROMTEXT - 975)) | (1L << (ST_POLYFROMWKB - 975)) | (1L << (ST_POLYGONFROMTEXT - 975)) | (1L << (ST_POLYGONFROMWKB - 975)) | (1L << (ST_SRID - 975)) | (1L << (ST_STARTPOINT - 975)) | (1L << (ST_SYMDIFFERENCE - 975)) | (1L << (ST_TOUCHES - 975)) | (1L << (ST_UNION - 975)) | (1L << (ST_WITHIN - 975)) | (1L << (ST_X - 975)) | (1L << (ST_Y - 975)) | (1L << (SUBDATE - 975)) | (1L << (SUBSTRING_INDEX - 975)) | (1L << (SUBTIME - 975)) | (1L << (SYSTEM_USER - 975)) | (1L << (TAN - 975)) | (1L << (TIMEDIFF - 975)) | (1L << (TIMESTAMPADD - 975)) | (1L << (TIMESTAMPDIFF - 975)) | (1L << (TIME_FORMAT - 975)) | (1L << (TIME_TO_SEC - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (MOD - 1039)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1039)) | (1L << (STRING_LITERAL - 1039)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(4372);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_cursorStatement);
		int _la;
		try {
			setState(4390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4375);
				match(CLOSE);
				setState(4376);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4377);
				match(FETCH);
				setState(4382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					setState(4379);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4378);
						match(NEXT);
						}
					}

					setState(4381);
					match(FROM);
					}
					break;
				}
				setState(4384);
				uid();
				setState(4385);
				match(INTO);
				setState(4386);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4388);
				match(OPEN);
				setState(4389);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4392);
			match(DECLARE);
			setState(4393);
			uidList();
			setState(4394);
			dataType();
			setState(4397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4395);
				match(DEFAULT);
				setState(4396);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4399);
			match(DECLARE);
			setState(4400);
			uid();
			setState(4401);
			match(CONDITION);
			setState(4402);
			match(FOR);
			setState(4409);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(4403);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4404);
				match(SQLSTATE);
				setState(4406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4405);
					match(VALUE);
					}
				}

				setState(4408);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4411);
			match(DECLARE);
			setState(4412);
			uid();
			setState(4413);
			match(CURSOR);
			setState(4414);
			match(FOR);
			setState(4415);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4417);
			match(DECLARE);
			setState(4418);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4419);
			match(HANDLER);
			setState(4420);
			match(FOR);
			setState(4421);
			handlerConditionValue();
			setState(4426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4422);
				match(COMMA);
				setState(4423);
				handlerConditionValue();
				}
				}
				setState(4428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4429);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4442);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4431);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4432);
				match(SQLSTATE);
				setState(4434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4433);
					match(VALUE);
					}
				}

				setState(4436);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4437);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4438);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4439);
				match(NOT);
				setState(4440);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4441);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				setState(4444);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4445);
				sqlStatement();
				}
				break;
			}
			setState(4448);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4450);
			match(WHEN);
			setState(4453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				setState(4451);
				constant();
				}
				break;
			case 2:
				{
				setState(4452);
				expression(0);
				}
				break;
			}
			setState(4455);
			match(THEN);
			setState(4457); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4456);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4459); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,636,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4461);
			match(ELSEIF);
			setState(4462);
			expression(0);
			setState(4463);
			match(THEN);
			setState(4465); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4464);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4467); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,637,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alterUser);
		int _la;
		try {
			setState(4523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4469);
				match(ALTER);
				setState(4470);
				match(USER);
				setState(4471);
				userSpecification();
				setState(4476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4472);
					match(COMMA);
					setState(4473);
					userSpecification();
					}
					}
					setState(4478);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4479);
				match(ALTER);
				setState(4480);
				match(USER);
				setState(4482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4481);
					ifExists();
					}
				}

				setState(4484);
				userAuthOption();
				setState(4489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4485);
					match(COMMA);
					setState(4486);
					userAuthOption();
					}
					}
					setState(4491);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4492);
					match(REQUIRE);
					setState(4504);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4493);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4494);
						tlsOption();
						setState(4501);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4496);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4495);
								match(AND);
								}
							}

							setState(4498);
							tlsOption();
							}
							}
							setState(4503);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4508);
					match(WITH);
					setState(4510); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4509);
						userResourceOption();
						}
						}
						setState(4512); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 478)) | (1L << (MAX_QUERIES_PER_HOUR - 478)) | (1L << (MAX_UPDATES_PER_HOUR - 478)) | (1L << (MAX_USER_CONNECTIONS - 478)))) != 0) );
					}
				}

				setState(4520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4518);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4516);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4517);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4522);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_createUser);
		int _la;
		try {
			setState(4579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4525);
				match(CREATE);
				setState(4526);
				match(USER);
				setState(4527);
				userAuthOption();
				setState(4532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4528);
					match(COMMA);
					setState(4529);
					userAuthOption();
					}
					}
					setState(4534);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4535);
				match(CREATE);
				setState(4536);
				match(USER);
				setState(4538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4537);
					ifNotExists();
					}
				}

				setState(4540);
				userAuthOption();
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4541);
					match(COMMA);
					setState(4542);
					userAuthOption();
					}
					}
					setState(4547);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4548);
					match(REQUIRE);
					setState(4560);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4549);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4550);
						tlsOption();
						setState(4557);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4552);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4551);
								match(AND);
								}
							}

							setState(4554);
							tlsOption();
							}
							}
							setState(4559);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4564);
					match(WITH);
					setState(4566); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4565);
						userResourceOption();
						}
						}
						setState(4568); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 478)) | (1L << (MAX_QUERIES_PER_HOUR - 478)) | (1L << (MAX_UPDATES_PER_HOUR - 478)) | (1L << (MAX_USER_CONNECTIONS - 478)))) != 0) );
					}
				}

				setState(4576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4574);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4572);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4573);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4578);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4581);
			match(DROP);
			setState(4582);
			match(USER);
			setState(4584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4583);
				ifExists();
				}
			}

			setState(4586);
			userName();
			setState(4591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4587);
				match(COMMA);
				setState(4588);
				userName();
				}
				}
				setState(4593);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			setState(4687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4594);
				match(GRANT);
				setState(4595);
				privelegeClause();
				setState(4600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4596);
					match(COMMA);
					setState(4597);
					privelegeClause();
					}
					}
					setState(4602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4603);
				match(ON);
				setState(4605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(4604);
					((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4607);
				privilegeLevel();
				setState(4608);
				match(TO);
				setState(4609);
				userAuthOption();
				setState(4614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4610);
					match(COMMA);
					setState(4611);
					userAuthOption();
					}
					}
					setState(4616);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4617);
					match(REQUIRE);
					setState(4629);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4618);
						((GrantStatementContext)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4619);
						tlsOption();
						setState(4626);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4621);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4620);
								match(AND);
								}
							}

							setState(4623);
							tlsOption();
							}
							}
							setState(4628);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4633);
					match(WITH);
					setState(4639);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(4637);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GRANT:
								{
								setState(4634);
								match(GRANT);
								setState(4635);
								match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								setState(4636);
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(4641);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
					}
					}
				}

				setState(4650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4644);
					match(AS);
					setState(4645);
					userName();
					setState(4646);
					match(WITH);
					setState(4647);
					match(ROLE);
					setState(4648);
					roleOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4652);
				match(GRANT);
				setState(4655);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(4653);
					userName();
					}
					break;
				case 2:
					{
					setState(4654);
					uid();
					}
					break;
				}
				setState(4664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4657);
					match(COMMA);
					setState(4660);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
					case 1:
						{
						setState(4658);
						userName();
						}
						break;
					case 2:
						{
						setState(4659);
						uid();
						}
						break;
					}
					}
					}
					setState(4666);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4667);
				match(TO);
				setState(4670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(4668);
					userName();
					}
					break;
				case 2:
					{
					setState(4669);
					uid();
					}
					break;
				}
				setState(4679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4672);
					match(COMMA);
					setState(4675);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
					case 1:
						{
						setState(4673);
						userName();
						}
						break;
					case 2:
						{
						setState(4674);
						uid();
						}
						break;
					}
					}
					}
					setState(4681);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4682);
					match(WITH);
					setState(4683);
					match(ADMIN);
					setState(4684);
					match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOptionContext roleOption() throws RecognitionException {
		RoleOptionContext _localctx = new RoleOptionContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_roleOption);
		int _la;
		try {
			setState(4711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4689);
				match(DEFAULT);
				}
				break;
			case NONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4690);
				match(NONE);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4691);
				match(ALL);
				setState(4701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT) {
					{
					setState(4692);
					match(EXCEPT);
					setState(4693);
					userName();
					setState(4698);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4694);
						match(COMMA);
						setState(4695);
						userName();
						}
						}
						setState(4700);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(4703);
				userName();
				setState(4708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4704);
					match(COMMA);
					setState(4705);
					userName();
					}
					}
					setState(4710);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4713);
			match(GRANT);
			setState(4714);
			match(PROXY);
			setState(4715);
			match(ON);
			setState(4716);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4717);
			match(TO);
			setState(4718);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4719);
				match(COMMA);
				setState(4720);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4725);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4726);
				match(WITH);
				setState(4727);
				match(GRANT);
				setState(4728);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4731);
			match(RENAME);
			setState(4732);
			match(USER);
			setState(4733);
			renameUserClause();
			setState(4738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4734);
				match(COMMA);
				setState(4735);
				renameUserClause();
				}
				}
				setState(4740);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoleRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_revokeStatement);
		int _la;
		try {
			setState(4805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4741);
				match(REVOKE);
				setState(4742);
				privelegeClause();
				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4743);
					match(COMMA);
					setState(4744);
					privelegeClause();
					}
					}
					setState(4749);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4750);
				match(ON);
				setState(4752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(4751);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4754);
				privilegeLevel();
				setState(4755);
				match(FROM);
				setState(4756);
				userName();
				setState(4761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4757);
					match(COMMA);
					setState(4758);
					userName();
					}
					}
					setState(4763);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4764);
				match(REVOKE);
				setState(4765);
				match(ALL);
				setState(4767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4766);
					match(PRIVILEGES);
					}
				}

				setState(4769);
				match(COMMA);
				setState(4770);
				match(GRANT);
				setState(4771);
				match(OPTION);
				setState(4772);
				match(FROM);
				setState(4773);
				userName();
				setState(4778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4774);
					match(COMMA);
					setState(4775);
					userName();
					}
					}
					setState(4780);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4781);
				match(REVOKE);
				setState(4782);
				uid();
				setState(4787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4783);
					match(COMMA);
					setState(4784);
					uid();
					}
					}
					setState(4789);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4790);
				match(FROM);
				setState(4793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(4791);
					userName();
					}
					break;
				case 2:
					{
					setState(4792);
					uid();
					}
					break;
				}
				setState(4802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4795);
					match(COMMA);
					setState(4798);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
					case 1:
						{
						setState(4796);
						userName();
						}
						break;
					case 2:
						{
						setState(4797);
						uid();
						}
						break;
					}
					}
					}
					setState(4804);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4807);
			match(REVOKE);
			setState(4808);
			match(PROXY);
			setState(4809);
			match(ON);
			setState(4810);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(4811);
			match(FROM);
			setState(4812);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4813);
				match(COMMA);
				setState(4814);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4819);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4820);
			match(SET);
			setState(4821);
			match(PASSWORD);
			setState(4824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4822);
				match(FOR);
				setState(4823);
				userName();
				}
			}

			setState(4826);
			match(EQUAL_SYMBOL);
			setState(4829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4827);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4828);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4831);
			userName();
			setState(4832);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode RETAIN() { return getToken(MySqlParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_userAuthOption);
		int _la;
		try {
			setState(4862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4834);
				userName();
				setState(4835);
				match(IDENTIFIED);
				setState(4836);
				match(BY);
				setState(4837);
				match(PASSWORD);
				setState(4838);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4840);
				userName();
				setState(4841);
				match(IDENTIFIED);
				setState(4844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4842);
					match(WITH);
					setState(4843);
					authPlugin();
					}
				}

				setState(4846);
				match(BY);
				setState(4847);
				match(STRING_LITERAL);
				setState(4851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN) {
					{
					setState(4848);
					match(RETAIN);
					setState(4849);
					match(CURRENT);
					setState(4850);
					match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4853);
				userName();
				setState(4854);
				match(IDENTIFIED);
				setState(4855);
				match(WITH);
				setState(4856);
				authPlugin();
				setState(4859);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
				case 1:
					{
					setState(4857);
					match(AS);
					setState(4858);
					match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4861);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_tlsOption);
		try {
			setState(4872);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4864);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4865);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4866);
				match(CIPHER);
				setState(4867);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4868);
				match(ISSUER);
				setState(4869);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4870);
				match(SUBJECT);
				setState(4871);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_userResourceOption);
		try {
			setState(4882);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4874);
				match(MAX_QUERIES_PER_HOUR);
				setState(4875);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4876);
				match(MAX_UPDATES_PER_HOUR);
				setState(4877);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4878);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4879);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4880);
				match(MAX_USER_CONNECTIONS);
				setState(4881);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4884);
			match(PASSWORD);
			setState(4885);
			match(EXPIRE);
			setState(4892);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4886);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4887);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4888);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4889);
				decimalLiteral();
				setState(4890);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4894);
			match(ACCOUNT);
			setState(4895);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4897);
			privilege();
			setState(4902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4898);
				match(LR_BRACKET);
				setState(4899);
				uidList();
				setState(4900);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public TerminalNode APPLICATION_PASSWORD_ADMIN() { return getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FLUSH_OPTIMIZER_COSTS() { return getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		public TerminalNode FLUSH_STATUS() { return getToken(MySqlParser.FLUSH_STATUS, 0); }
		public TerminalNode FLUSH_TABLES() { return getToken(MySqlParser.FLUSH_TABLES, 0); }
		public TerminalNode FLUSH_USER_RESOURCES() { return getToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INNODB_REDO_LOG_ENABLE() { return getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode SERVICE_CONNECTION_ADMIN() { return getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_privilege);
		int _la;
		try {
			setState(4983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4904);
				match(ALL);
				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4905);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4908);
				match(ALTER);
				setState(4910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4909);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4912);
				match(CREATE);
				setState(4920);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4913);
					match(TEMPORARY);
					setState(4914);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4915);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4916);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4917);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4918);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(4919);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4922);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4923);
				match(DROP);
				setState(4925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(4924);
					match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4927);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4928);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4929);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4930);
				match(GRANT);
				setState(4931);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4932);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4933);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4934);
				match(LOCK);
				setState(4935);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4936);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4937);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4938);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4939);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4940);
				match(REPLICATION);
				setState(4941);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4942);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4943);
				match(SHOW);
				setState(4944);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4945);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4946);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4947);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4948);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4949);
				match(USAGE);
				}
				break;
			case APPLICATION_PASSWORD_ADMIN:
				enterOuterAlt(_localctx, 25);
				{
				setState(4950);
				match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case AUDIT_ADMIN:
				enterOuterAlt(_localctx, 26);
				{
				setState(4951);
				match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				enterOuterAlt(_localctx, 27);
				{
				setState(4952);
				match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				enterOuterAlt(_localctx, 28);
				{
				setState(4953);
				match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 29);
				{
				setState(4954);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				enterOuterAlt(_localctx, 30);
				{
				setState(4955);
				match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 31);
				{
				setState(4956);
				match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				enterOuterAlt(_localctx, 32);
				{
				setState(4957);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				enterOuterAlt(_localctx, 33);
				{
				setState(4958);
				match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				enterOuterAlt(_localctx, 34);
				{
				setState(4959);
				match(FIREWALL_USER);
				}
				break;
			case FLUSH_OPTIMIZER_COSTS:
				enterOuterAlt(_localctx, 35);
				{
				setState(4960);
				match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case FLUSH_STATUS:
				enterOuterAlt(_localctx, 36);
				{
				setState(4961);
				match(FLUSH_STATUS);
				}
				break;
			case FLUSH_TABLES:
				enterOuterAlt(_localctx, 37);
				{
				setState(4962);
				match(FLUSH_TABLES);
				}
				break;
			case FLUSH_USER_RESOURCES:
				enterOuterAlt(_localctx, 38);
				{
				setState(4963);
				match(FLUSH_USER_RESOURCES);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				enterOuterAlt(_localctx, 39);
				{
				setState(4964);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				enterOuterAlt(_localctx, 40);
				{
				setState(4965);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case INNODB_REDO_LOG_ENABLE:
				enterOuterAlt(_localctx, 41);
				{
				setState(4966);
				match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case NDB_STORED_USER:
				enterOuterAlt(_localctx, 42);
				{
				setState(4967);
				match(NDB_STORED_USER);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 43);
				{
				setState(4968);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				enterOuterAlt(_localctx, 44);
				{
				setState(4969);
				match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				enterOuterAlt(_localctx, 45);
				{
				setState(4970);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				enterOuterAlt(_localctx, 46);
				{
				setState(4971);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				enterOuterAlt(_localctx, 47);
				{
				setState(4972);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				enterOuterAlt(_localctx, 48);
				{
				setState(4973);
				match(ROLE_ADMIN);
				}
				break;
			case SERVICE_CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 49);
				{
				setState(4974);
				match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 50);
				{
				setState(4975);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				enterOuterAlt(_localctx, 51);
				{
				setState(4976);
				match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				enterOuterAlt(_localctx, 52);
				{
				setState(4977);
				match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_USER:
				enterOuterAlt(_localctx, 53);
				{
				setState(4978);
				match(SYSTEM_USER);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 54);
				{
				setState(4979);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 55);
				{
				setState(4980);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				enterOuterAlt(_localctx, 56);
				{
				setState(4981);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				enterOuterAlt(_localctx, 57);
				{
				setState(4982);
				match(XA_RECOVER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_privilegeLevel);
		try {
			setState(5001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4985);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4986);
				match(STAR);
				setState(4987);
				match(DOT);
				setState(4988);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4989);
				uid();
				setState(4990);
				match(DOT);
				setState(4991);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4993);
				uid();
				setState(4994);
				match(DOT);
				setState(4995);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4997);
				uid();
				setState(4998);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5000);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5003);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(5004);
			match(TO);
			setState(5005);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public List<TerminalNode> HISTOGRAM() { return getTokens(MySqlParser.HISTOGRAM); }
		public TerminalNode HISTOGRAM(int i) {
			return getToken(MySqlParser.HISTOGRAM, i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5007);
			match(ANALYZE);
			setState(5009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5008);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5011);
			match(TABLE);
			setState(5012);
			tables();
			setState(5030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				setState(5013);
				match(UPDATE);
				setState(5014);
				match(HISTOGRAM);
				setState(5015);
				match(ON);
				setState(5016);
				fullColumnName();
				setState(5021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5017);
					match(COMMA);
					setState(5018);
					fullColumnName();
					}
					}
					setState(5023);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5024);
					match(WITH);
					setState(5025);
					decimalLiteral();
					setState(5026);
					match(BUCKETS);
					}
				}

				}
				break;
			}
			setState(5043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(5032);
				match(DROP);
				setState(5033);
				match(HISTOGRAM);
				setState(5034);
				match(ON);
				setState(5035);
				fullColumnName();
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5036);
					match(COMMA);
					setState(5037);
					fullColumnName();
					}
					}
					setState(5042);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5045);
			match(CHECK);
			setState(5046);
			match(TABLE);
			setState(5047);
			tables();
			setState(5051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(5048);
				checkTableOption();
				}
				}
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			match(CHECKSUM);
			setState(5055);
			match(TABLE);
			setState(5056);
			tables();
			setState(5058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(5057);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5060);
			match(OPTIMIZE);
			setState(5062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5061);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5064);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5065);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5067);
			match(REPAIR);
			setState(5069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5068);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5071);
			match(TABLE);
			setState(5072);
			tables();
			setState(5074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5073);
				match(QUICK);
				}
			}

			setState(5077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5076);
				match(EXTENDED);
				}
			}

			setState(5080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5079);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_checkTableOption);
		try {
			setState(5089);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5082);
				match(FOR);
				setState(5083);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5084);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5085);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5086);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5087);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(5088);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			match(CREATE);
			setState(5093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(5092);
				match(AGGREGATE);
				}
			}

			setState(5095);
			match(FUNCTION);
			setState(5096);
			uid();
			setState(5097);
			match(RETURNS);
			setState(5098);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INTEGER - 196)) | (1L << (REAL - 196)) | (1L << (DECIMAL - 196)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5099);
			match(SONAME);
			setState(5100);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5102);
			match(INSTALL);
			setState(5103);
			match(PLUGIN);
			setState(5104);
			uid();
			setState(5105);
			match(SONAME);
			setState(5106);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5108);
			match(UNINSTALL);
			setState(5109);
			match(PLUGIN);
			setState(5110);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_setStatement);
		int _la;
		try {
			setState(5159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5112);
				match(SET);
				setState(5113);
				variableClause();
				setState(5114);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5115);
				expression(0);
				setState(5123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5116);
					match(COMMA);
					setState(5117);
					variableClause();
					setState(5118);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5119);
					expression(0);
					}
					}
					setState(5125);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5126);
				match(SET);
				setState(5127);
				charSet();
				setState(5130);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5128);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(5129);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5132);
				match(SET);
				setState(5133);
				match(NAMES);
				setState(5140);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5134);
					charsetName();
					setState(5137);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(5135);
						match(COLLATE);
						setState(5136);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(5139);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5142);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5143);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5144);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5145);
				match(SET);
				setState(5146);
				fullId();
				setState(5147);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5148);
				expression(0);
				setState(5156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5149);
					match(COMMA);
					setState(5150);
					fullId();
					setState(5151);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5152);
					expression(0);
					}
					}
					setState(5158);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_showStatement);
		int _la;
		try {
			setState(5314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5161);
				match(SHOW);
				setState(5162);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5163);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5164);
				match(SHOW);
				setState(5165);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5166);
				match(EVENTS);
				setState(5169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5167);
					match(IN);
					setState(5168);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(5173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(5171);
					match(FROM);
					setState(5172);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(5182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5175);
					match(LIMIT);
					setState(5179);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
					case 1:
						{
						setState(5176);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(5177);
						match(COMMA);
						}
						break;
					}
					setState(5181);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5184);
				match(SHOW);
				setState(5185);
				showCommonEntity();
				setState(5187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5186);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5189);
				match(SHOW);
				setState(5191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5190);
					match(FULL);
					}
				}

				setState(5193);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5194);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5195);
				tableName();
				setState(5198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5196);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5197);
					uid();
					}
				}

				setState(5201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5200);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5203);
				match(SHOW);
				setState(5204);
				match(CREATE);
				setState(5205);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(5206);
					ifNotExists();
					}
				}

				setState(5209);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5210);
				match(SHOW);
				setState(5211);
				match(CREATE);
				setState(5212);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (PROCEDURE - 124)) | (1L << (TABLE - 124)) | (1L << (TRIGGER - 124)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5213);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5214);
				match(SHOW);
				setState(5215);
				match(CREATE);
				setState(5216);
				match(USER);
				setState(5217);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5218);
				match(SHOW);
				setState(5219);
				match(ENGINE);
				setState(5220);
				engineName();
				setState(5221);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5223);
				match(SHOW);
				setState(5224);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5225);
				match(SHOW);
				setState(5226);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5227);
					match(LIMIT);
					setState(5231);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
					case 1:
						{
						setState(5228);
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						setState(5229);
						match(COMMA);
						}
						break;
					}
					setState(5233);
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5236);
				match(SHOW);
				setState(5237);
				match(COUNT);
				setState(5238);
				match(LR_BRACKET);
				setState(5239);
				match(STAR);
				setState(5240);
				match(RR_BRACKET);
				setState(5241);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5242);
				match(SHOW);
				setState(5243);
				showSchemaEntity();
				setState(5246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5244);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5245);
					uid();
					}
				}

				setState(5249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5248);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5251);
				match(SHOW);
				setState(5252);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5253);
				match(CODE);
				setState(5254);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5255);
				match(SHOW);
				setState(5256);
				match(GRANTS);
				setState(5259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5257);
					match(FOR);
					setState(5258);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5261);
				match(SHOW);
				setState(5262);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5263);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5264);
				tableName();
				setState(5267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5265);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5266);
					uid();
					}
				}

				setState(5271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5269);
					match(WHERE);
					setState(5270);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5273);
				match(SHOW);
				setState(5274);
				match(OPEN);
				setState(5275);
				match(TABLES);
				setState(5278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5276);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5277);
					uid();
					}
				}

				setState(5281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5280);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5283);
				match(SHOW);
				setState(5284);
				match(PROFILE);
				setState(5285);
				showProfileType();
				setState(5290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5286);
					match(COMMA);
					setState(5287);
					showProfileType();
					}
					}
					setState(5292);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5293);
					match(FOR);
					setState(5294);
					match(QUERY);
					setState(5295);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5298);
				match(LIMIT);
				setState(5302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
				case 1:
					{
					setState(5299);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5300);
					match(COMMA);
					}
					break;
				}
				setState(5304);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5306);
				match(SHOW);
				setState(5307);
				match(SLAVE);
				setState(5308);
				match(STATUS);
				setState(5312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5309);
					match(FOR);
					setState(5310);
					match(CHANNEL);
					setState(5311);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(MySqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_variableClause);
		int _la;
		try {
			setState(5326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5316);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5317);
				match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(5320);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5318);
						match(AT_SIGN);
						setState(5319);
						match(AT_SIGN);
						}
					}

					setState(5322);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5325);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_showCommonEntity);
		int _la;
		try {
			setState(5341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5328);
				match(CHARACTER);
				setState(5329);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5330);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5331);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5332);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5333);
				match(FUNCTION);
				setState(5334);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5335);
				match(PROCEDURE);
				setState(5336);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5337);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5340);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_showFilter);
		try {
			setState(5347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5343);
				match(LIKE);
				setState(5344);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(WHERE);
				setState(5346);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5366);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5349);
					match(STORAGE);
					}
				}

				setState(5352);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5353);
				match(MASTER);
				setState(5354);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5355);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5356);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5357);
					match(FULL);
					}
				}

				setState(5360);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5361);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5362);
				match(SLAVE);
				setState(5363);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5364);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5365);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5376);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5368);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5369);
				match(TABLE);
				setState(5370);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5371);
					match(FULL);
					}
				}

				setState(5374);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5375);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_showProfileType);
		try {
			setState(5390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5378);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5379);
				match(BLOCK);
				setState(5380);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5381);
				match(CONTEXT);
				setState(5382);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5383);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5384);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5385);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5386);
				match(PAGE);
				setState(5387);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5388);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5389);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5392);
			match(BINLOG);
			setState(5393);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5395);
			match(CACHE);
			setState(5396);
			match(INDEX);
			setState(5397);
			tableIndexes();
			setState(5402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5398);
				match(COMMA);
				setState(5399);
				tableIndexes();
				}
				}
				setState(5404);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5405);
				match(PARTITION);
				setState(5406);
				match(LR_BRACKET);
				setState(5409);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5407);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5408);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5411);
				match(RR_BRACKET);
				}
			}

			setState(5414);
			match(IN);
			setState(5415);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5417);
			match(FLUSH);
			setState(5419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5418);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5421);
			flushOption();
			setState(5426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5422);
				match(COMMA);
				setState(5423);
				flushOption();
				}
				}
				setState(5428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5429);
			match(KILL);
			setState(5431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5430);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5434); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5433);
				decimalLiteral();
				}
				}
				setState(5436); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (ZERO_DECIMAL - 1092)) | (1L << (ONE_DECIMAL - 1092)) | (1L << (TWO_DECIMAL - 1092)) | (1L << (DECIMAL_LITERAL - 1092)) | (1L << (REAL_LITERAL - 1092)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5438);
			match(LOAD);
			setState(5439);
			match(INDEX);
			setState(5440);
			match(INTO);
			setState(5441);
			match(CACHE);
			setState(5442);
			loadedTableIndexes();
			setState(5447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5443);
				match(COMMA);
				setState(5444);
				loadedTableIndexes();
				}
				}
				setState(5449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5450);
			match(RESET);
			setState(5451);
			match(QUERY);
			setState(5452);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5454);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456);
			tableName();
			setState(5464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5457);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5460);
				match(LR_BRACKET);
				setState(5461);
				uidList();
				setState(5462);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_flushOption);
		int _la;
		try {
			setState(5498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5484);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5466);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5467);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5469);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (ENGINE - 392)) | (1L << (ERROR - 392)) | (1L << (GENERAL - 392)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5468);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (ENGINE - 392)) | (1L << (ERROR - 392)) | (1L << (GENERAL - 392)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5471);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5472);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5473);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5474);
					match(QUERY);
					setState(5475);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5476);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5477);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5478);
					match(TABLES);
					setState(5482);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5479);
						match(WITH);
						setState(5480);
						match(READ);
						setState(5481);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5486);
				match(RELAY);
				setState(5487);
				match(LOGS);
				setState(5489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5488);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5491);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(5492);
					tables();
					}
					break;
				}
				setState(5496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5495);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_flushTableOption);
		try {
			setState(5505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5500);
				match(WITH);
				setState(5501);
				match(READ);
				setState(5502);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5503);
				match(FOR);
				setState(5504);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5507);
			tableName();
			setState(5515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5508);
				match(PARTITION);
				setState(5509);
				match(LR_BRACKET);
				setState(5512);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5510);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5511);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5514);
				match(RR_BRACKET);
				}
			}

			setState(5524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				{
				setState(5518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5517);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5520);
				match(LR_BRACKET);
				setState(5521);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5522);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5526);
				match(IGNORE);
				setState(5527);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5530);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5531);
			tableName();
			setState(5534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				setState(5532);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5533);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5536);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5537);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5538);
				match(EQUAL_SYMBOL);
				setState(5539);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5542);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5544);
			match(HELP);
			setState(5545);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5547);
			match(USE);
			setState(5548);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(MySqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5550);
			match(SIGNAL);
			setState(5558);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5551);
				match(SQLSTATE);
				setState(5553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5552);
					match(VALUE);
					}
				}

				setState(5555);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5556);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5557);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(5560);
				match(SET);
				setState(5561);
				signalConditionInformation();
				setState(5566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5562);
					match(COMMA);
					setState(5563);
					signalConditionInformation();
					}
					}
					setState(5568);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(MySqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5571);
			match(RESIGNAL);
			setState(5579);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5572);
				match(SQLSTATE);
				setState(5574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5573);
					match(VALUE);
					}
				}

				setState(5576);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5577);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5578);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				setState(5581);
				match(SET);
				setState(5582);
				signalConditionInformation();
				setState(5587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5583);
					match(COMMA);
					setState(5584);
					signalConditionInformation();
					}
					}
					setState(5589);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5592);
			_la = _input.LA(1);
			if ( !(((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (CLASS_ORIGIN - 346)) | (1L << (COLUMN_NAME - 346)) | (1L << (CONSTRAINT_CATALOG - 346)) | (1L << (CONSTRAINT_SCHEMA - 346)) | (1L << (CONSTRAINT_NAME - 346)) | (1L << (CURSOR_NAME - 346)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5593);
			match(EQUAL_SYMBOL);
			setState(5598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				setState(5594);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(5595);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(5596);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(5597);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(MySqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(MySqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(MySqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(MySqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(MySqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5600);
			match(GET);
			setState(5602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5601);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5604);
			match(DIAGNOSTICS);
			setState(5636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				{
				setState(5605);
				variableClause();
				setState(5606);
				match(EQUAL_SYMBOL);
				setState(5607);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5608);
					match(COMMA);
					setState(5609);
					variableClause();
					setState(5610);
					match(EQUAL_SYMBOL);
					setState(5611);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(5617);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(5618);
				match(CONDITION);
				setState(5621);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5619);
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5620);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5623);
				variableClause();
				setState(5624);
				match(EQUAL_SYMBOL);
				setState(5625);
				diagnosticsConditionInformationName();
				setState(5633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5626);
					match(COMMA);
					setState(5627);
					variableClause();
					setState(5628);
					match(EQUAL_SYMBOL);
					setState(5629);
					diagnosticsConditionInformationName();
					}
					}
					setState(5635);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5638);
			_la = _input.LA(1);
			if ( !(((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (CLASS_ORIGIN - 346)) | (1L << (COLUMN_NAME - 346)) | (1L << (CONSTRAINT_CATALOG - 346)) | (1L << (CONSTRAINT_SCHEMA - 346)) | (1L << (CONSTRAINT_NAME - 346)) | (1L << (CURSOR_NAME - 346)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 561)) & ~0x3f) == 0 && ((1L << (_la - 561)) & ((1L << (RETURNED_SQLSTATE - 561)) | (1L << (SUBCLASS_ORIGIN - 561)) | (1L << (TABLE_NAME - 561)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_describeObjectClause);
		try {
			setState(5650);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5645);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5640);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5641);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5642);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5643);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5644);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5647);
				match(FOR);
				setState(5648);
				match(CONNECTION);
				setState(5649);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5652);
			uid();
			setState(5656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				setState(5653);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5654);
				match(DOT);
				setState(5655);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_fullColumnName);
		try {
			setState(5672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5660);
				uid();
				setState(5665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(5661);
					dottedId();
					setState(5663);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
					case 1:
						{
						setState(5662);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5667);
				matchWildcard();
				setState(5668);
				dottedId();
				setState(5670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(5669);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				setState(5676);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(5674);
					uid();
					}
					break;
				case 2:
					{
					setState(5675);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(5682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5678);
					match(LR_BRACKET);
					setState(5679);
					decimalLiteral();
					setState(5680);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(5684);
				expression(0);
				}
				break;
			}
			setState(5688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5687);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5690);
			_la = _input.LA(1);
			if ( !(_la==ADMIN || ((((_la - 1102)) & ~0x3f) == 0 && ((1L << (_la - 1102)) & ((1L << (STRING_LITERAL - 1102)) | (1L << (ID - 1102)) | (1L << (STRING_USER_NAME - 1102)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5692);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_charsetName);
		try {
			setState(5698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5694);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5695);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5696);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5697);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_collationName);
		try {
			setState(5702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5700);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5701);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5704);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (ARCHIVE - 745)) | (1L << (BLACKHOLE - 745)) | (1L << (CSV - 745)) | (1L << (FEDERATED - 745)) | (1L << (INNODB - 745)) | (1L << (MEMORY - 745)) | (1L << (MRG_MYISAM - 745)) | (1L << (MYISAM - 745)) | (1L << (NDB - 745)) | (1L << (NDBCLUSTER - 745)) | (1L << (PERFORMANCE_SCHEMA - 745)) | (1L << (TOKUDB - 745)))) != 0) || ((((_la - 1102)) & ~0x3f) == 0 && ((1L << (_la - 1102)) & ((1L << (STRING_LITERAL - 1102)) | (1L << (ID - 1102)) | (1L << (REVERSE_QUOTE_ID - 1102)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5706);
			decimalLiteral();
			setState(5707);
			match(MINUS);
			setState(5708);
			decimalLiteral();
			setState(5709);
			match(MINUS);
			setState(5710);
			decimalLiteral();
			setState(5711);
			match(MINUS);
			setState(5712);
			decimalLiteral();
			setState(5713);
			match(MINUS);
			setState(5714);
			decimalLiteral();
			setState(5720); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5715);
				match(COLON_SYMB);
				setState(5716);
				decimalLiteral();
				setState(5717);
				match(MINUS);
				setState(5718);
				decimalLiteral();
				}
				}
				setState(5722); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5724);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5725);
				match(COMMA);
				setState(5726);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5727);
					match(COMMA);
					setState(5728);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_xuidStringId);
		int _la;
		try {
			setState(5740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5733);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5734);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5736); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5735);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5738); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_authPlugin);
		try {
			setState(5744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5742);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5743);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_uid);
		try {
			setState(5749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5746);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5747);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5748);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_simpleId);
		try {
			setState(5760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5751);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5752);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5753);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5754);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5755);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5756);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5757);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5758);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5759);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_dottedId);
		try {
			setState(5765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5762);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5763);
				match(DOT);
				setState(5764);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5767);
			_la = _input.LA(1);
			if ( !(((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (ZERO_DECIMAL - 1092)) | (1L << (ONE_DECIMAL - 1092)) | (1L << (TWO_DECIMAL - 1092)) | (1L << (DECIMAL_LITERAL - 1092)) | (1L << (REAL_LITERAL - 1092)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_fileSizeLiteral);
		try {
			setState(5771);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5769);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5770);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5778);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5774);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5773);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5776);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5777);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5781); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5780);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5783); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5790);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5786);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5785);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5788);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5789);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5794);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
				case 1:
					{
					setState(5792);
					match(COLLATE);
					setState(5793);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5798);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5800);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5803);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5805);
				match(NOT);
				}
			}

			setState(5808);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_constant);
		int _la;
		try {
			setState(5822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5810);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5811);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5812);
				match(MINUS);
				setState(5813);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5814);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5815);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5816);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5817);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5818);
					match(NOT);
					}
				}

				setState(5821);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(MySqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(MySqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(MySqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(MySqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(MySqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(MySqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_dataType);
		int _la;
		try {
			int _alt;
			setState(5946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5824);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (CHAR - 212)) | (1L << (VARCHAR - 212)) | (1L << (NVARCHAR - 212)) | (1L << (LONG - 212)) | (1L << (TINYTEXT - 212)) | (1L << (TEXT - 212)) | (1L << (MEDIUMTEXT - 212)) | (1L << (LONGTEXT - 212)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(5825);
					match(VARYING);
					}
				}

				setState(5829);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(5828);
					lengthOneDimension();
					}
					break;
				}
				setState(5832);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
				case 1:
					{
					setState(5831);
					match(BINARY);
					}
					break;
				}
				setState(5837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
				case 1:
					{
					setState(5834);
					charSet();
					setState(5835);
					charsetName();
					}
					break;
				}
				setState(5842);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
				case 1:
					{
					setState(5839);
					match(COLLATE);
					setState(5840);
					collationName();
					}
					break;
				case 2:
					{
					setState(5841);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5844);
				match(NATIONAL);
				setState(5845);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5846);
					lengthOneDimension();
					}
					break;
				}
				setState(5850);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(5849);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5852);
				match(NCHAR);
				setState(5853);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(5855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(5854);
					lengthOneDimension();
					}
					break;
				}
				setState(5858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(5857);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5860);
				match(NATIONAL);
				setState(5861);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5862);
				match(VARYING);
				setState(5864);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
				case 1:
					{
					setState(5863);
					lengthOneDimension();
					}
					break;
				}
				setState(5867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
				case 1:
					{
					setState(5866);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5869);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (TINYINT - 186)) | (1L << (SMALLINT - 186)) | (1L << (MEDIUMINT - 186)) | (1L << (MIDDLEINT - 186)) | (1L << (INT - 186)) | (1L << (INT1 - 186)) | (1L << (INT2 - 186)) | (1L << (INT3 - 186)) | (1L << (INT4 - 186)) | (1L << (INT8 - 186)) | (1L << (INTEGER - 186)) | (1L << (BIGINT - 186)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(5870);
					lengthOneDimension();
					}
					break;
				}
				setState(5876);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,858,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5873);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(5878);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,858,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5879);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(5881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
				case 1:
					{
					setState(5880);
					lengthTwoDimension();
					}
					break;
				}
				setState(5886);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,860,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5883);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(5888);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,860,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5889);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(5891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5890);
					match(PRECISION);
					}
				}

				setState(5894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
				case 1:
					{
					setState(5893);
					lengthTwoDimension();
					}
					break;
				}
				setState(5899);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,863,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5896);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(5901);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,863,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5902);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (FLOAT - 201)) | (1L << (FLOAT4 - 201)) | (1L << (FLOAT8 - 201)) | (1L << (DECIMAL - 201)) | (1L << (DEC - 201)) | (1L << (NUMERIC - 201)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5904);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
				case 1:
					{
					setState(5903);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5909);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5906);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(5911);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5912);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TINYBLOB - 207)) | (1L << (MEDIUMBLOB - 207)) | (1L << (LONGBLOB - 207)) | (1L << (SERIAL - 207)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5913);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TIME - 208)) | (1L << (TIMESTAMP - 208)) | (1L << (DATETIME - 208)) | (1L << (YEAR - 208)) | (1L << (BINARY - 208)) | (1L << (VARBINARY - 208)) | (1L << (BLOB - 208)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5915);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(5914);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5917);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5918);
				collectionOptions();
				setState(5920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(5919);
					match(BINARY);
					}
					break;
				}
				setState(5925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(5922);
					charSet();
					setState(5923);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5927);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 761)) & ~0x3f) == 0 && ((1L << (_la - 761)) & ((1L << (GEOMETRYCOLLECTION - 761)) | (1L << (GEOMCOLLECTION - 761)) | (1L << (GEOMETRY - 761)) | (1L << (LINESTRING - 761)) | (1L << (MULTILINESTRING - 761)) | (1L << (MULTIPOINT - 761)) | (1L << (MULTIPOLYGON - 761)) | (1L << (POINT - 761)) | (1L << (POLYGON - 761)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5928);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(5930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(5929);
					match(VARCHAR);
					}
				}

				setState(5933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(5932);
					match(BINARY);
					}
					break;
				}
				setState(5938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
				case 1:
					{
					setState(5935);
					charSet();
					setState(5936);
					charsetName();
					}
					break;
				}
				setState(5942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
				case 1:
					{
					setState(5940);
					match(COLLATE);
					setState(5941);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5944);
				match(LONG);
				setState(5945);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5948);
			match(LR_BRACKET);
			setState(5949);
			match(STRING_LITERAL);
			setState(5954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5950);
				match(COMMA);
				setState(5951);
				match(STRING_LITERAL);
				}
				}
				setState(5956);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5957);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(MySqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(5959);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5960);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(5963);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5964);
					lengthOneDimension();
					}
				}

				setState(5970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(5967);
					charSet();
					setState(5968);
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(5972);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (INT - 190)) | (1L << (INTEGER - 190)) | (1L << (DATE - 190)) | (1L << (TIME - 190)) | (1L << (DATETIME - 190)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(5973);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5974);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(5977);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5978);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(5983);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5986);
			match(LR_BRACKET);
			setState(5987);
			decimalLiteral();
			setState(5988);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5990);
			match(LR_BRACKET);
			setState(5991);
			decimalLiteral();
			setState(5992);
			match(COMMA);
			setState(5993);
			decimalLiteral();
			setState(5994);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5996);
			match(LR_BRACKET);
			setState(5997);
			decimalLiteral();
			setState(6000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5998);
				match(COMMA);
				setState(5999);
				decimalLiteral();
				}
			}

			setState(6002);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6004);
			uid();
			setState(6009);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,883,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6005);
					match(COMMA);
					setState(6006);
					uid();
					}
					} 
				}
				setState(6011);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,883,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6012);
			tableName();
			setState(6017);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6013);
					match(COMMA);
					setState(6014);
					tableName();
					}
					} 
				}
				setState(6019);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6020);
			match(LR_BRACKET);
			setState(6021);
			indexColumnName();
			setState(6026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6022);
				match(COMMA);
				setState(6023);
				indexColumnName();
				}
				}
				setState(6028);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6029);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6031);
			expression(0);
			setState(6036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6032);
				match(COMMA);
				setState(6033);
				expression(0);
				}
				}
				setState(6038);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6039);
			expressionOrDefault();
			setState(6044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6040);
				match(COMMA);
				setState(6041);
				expressionOrDefault();
				}
				}
				setState(6046);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6047);
			constant();
			setState(6052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6048);
				match(COMMA);
				setState(6049);
				constant();
				}
				}
				setState(6054);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6055);
			match(STRING_LITERAL);
			setState(6060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6056);
				match(COMMA);
				setState(6057);
				match(STRING_LITERAL);
				}
				}
				setState(6062);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6063);
			match(LOCAL_ID);
			setState(6068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6064);
				match(COMMA);
				setState(6065);
				match(LOCAL_ID);
				}
				}
				setState(6070);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				{
				setState(6071);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				setState(6073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
				case 1:
					{
					setState(6072);
					unaryOperator();
					}
					break;
				}
				setState(6075);
				constant();
				}
				break;
			case 3:
				{
				setState(6076);
				currentTimestamp();
				}
				break;
			case 4:
				{
				setState(6077);
				match(LR_BRACKET);
				setState(6078);
				expression(0);
				setState(6079);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				{
				setState(6083);
				match(ON);
				setState(6084);
				match(UPDATE);
				setState(6085);
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6102);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(6088);
				_la = _input.LA(1);
				if ( !(((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (CURRENT_TIMESTAMP - 302)) | (1L << (LOCALTIME - 302)) | (1L << (LOCALTIMESTAMP - 302)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					setState(6089);
					match(LR_BRACKET);
					setState(6091);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (ZERO_DECIMAL - 1092)) | (1L << (ONE_DECIMAL - 1092)) | (1L << (TWO_DECIMAL - 1092)) | (1L << (DECIMAL_LITERAL - 1092)) | (1L << (REAL_LITERAL - 1092)))) != 0)) {
						{
						setState(6090);
						decimalLiteral();
						}
					}

					setState(6093);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(6096);
				match(NOW);
				setState(6097);
				match(LR_BRACKET);
				setState(6099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1092)) & ~0x3f) == 0 && ((1L << (_la - 1092)) & ((1L << (ZERO_DECIMAL - 1092)) | (1L << (ONE_DECIMAL - 1092)) | (1L << (TWO_DECIMAL - 1092)) | (1L << (DECIMAL_LITERAL - 1092)) | (1L << (REAL_LITERAL - 1092)))) != 0)) {
					{
					setState(6098);
					decimalLiteral();
					}
				}

				setState(6101);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_expressionOrDefault);
		try {
			setState(6106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6104);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6105);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6108);
			match(IF);
			setState(6109);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			match(IF);
			setState(6112);
			match(NOT);
			setState(6113);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_functionCall);
		try {
			setState(6133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6115);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6116);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6117);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6118);
				scalarFunctionName();
				setState(6119);
				match(LR_BRACKET);
				setState(6121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6120);
					functionArgs();
					}
					break;
				}
				setState(6123);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6125);
				fullId();
				setState(6126);
				match(LR_BRACKET);
				setState(6128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
				case 1:
					{
					setState(6127);
					functionArgs();
					}
					break;
				}
				setState(6130);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6132);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(MySqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySqlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(MySqlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(MySqlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_specificFunction);
		int _la;
		try {
			setState(6327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6135);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (CURRENT_DATE - 300)) | (1L << (CURRENT_TIME - 300)) | (1L << (CURRENT_TIMESTAMP - 300)) | (1L << (LOCALTIME - 300)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
				case 1:
					{
					setState(6136);
					match(LR_BRACKET);
					setState(6137);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6140);
				match(CONVERT);
				setState(6141);
				match(LR_BRACKET);
				setState(6142);
				expression(0);
				setState(6143);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6144);
				convertedDataType();
				setState(6145);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6147);
				match(CONVERT);
				setState(6148);
				match(LR_BRACKET);
				setState(6149);
				expression(0);
				setState(6150);
				match(USING);
				setState(6151);
				charsetName();
				setState(6152);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6154);
				match(CAST);
				setState(6155);
				match(LR_BRACKET);
				setState(6156);
				expression(0);
				setState(6157);
				match(AS);
				setState(6158);
				convertedDataType();
				setState(6159);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6161);
				match(VALUES);
				setState(6162);
				match(LR_BRACKET);
				setState(6163);
				fullColumnName();
				setState(6164);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6166);
				match(CASE);
				setState(6167);
				expression(0);
				setState(6169); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6168);
					caseFuncAlternative();
					}
					}
					setState(6171); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6173);
					match(ELSE);
					setState(6174);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6177);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6179);
				match(CASE);
				setState(6181); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6180);
					caseFuncAlternative();
					}
					}
					setState(6183); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6185);
					match(ELSE);
					setState(6186);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6189);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6191);
				match(CHAR);
				setState(6192);
				match(LR_BRACKET);
				setState(6193);
				functionArgs();
				setState(6196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6194);
					match(USING);
					setState(6195);
					charsetName();
					}
				}

				setState(6198);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6200);
				match(POSITION);
				setState(6201);
				match(LR_BRACKET);
				setState(6204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
				case 1:
					{
					setState(6202);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6203);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(6206);
				match(IN);
				setState(6209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					setState(6207);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6208);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(6211);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6213);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6214);
				match(LR_BRACKET);
				setState(6217);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
				case 1:
					{
					setState(6215);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6216);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6219);
				match(FROM);
				setState(6222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
				case 1:
					{
					setState(6220);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(6221);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6224);
					match(FOR);
					setState(6227);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
					case 1:
						{
						setState(6225);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(6226);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(6231);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6233);
				match(TRIM);
				setState(6234);
				match(LR_BRACKET);
				setState(6235);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
				case 1:
					{
					setState(6236);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6237);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6240);
				match(FROM);
				setState(6243);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
				case 1:
					{
					setState(6241);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6242);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6245);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6247);
				match(TRIM);
				setState(6248);
				match(LR_BRACKET);
				setState(6251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
				case 1:
					{
					setState(6249);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6250);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6253);
				match(FROM);
				setState(6256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					setState(6254);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6255);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6258);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6260);
				match(WEIGHT_STRING);
				setState(6261);
				match(LR_BRACKET);
				setState(6264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
				case 1:
					{
					setState(6262);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6263);
					expression(0);
					}
					break;
				}
				setState(6272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6266);
					match(AS);
					setState(6267);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6268);
					match(LR_BRACKET);
					setState(6269);
					decimalLiteral();
					setState(6270);
					match(RR_BRACKET);
					}
				}

				setState(6275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6274);
					levelsInWeightString();
					}
				}

				setState(6277);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6279);
				match(EXTRACT);
				setState(6280);
				match(LR_BRACKET);
				setState(6281);
				intervalType();
				setState(6282);
				match(FROM);
				setState(6285);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					setState(6283);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6284);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6287);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6289);
				match(GET_FORMAT);
				setState(6290);
				match(LR_BRACKET);
				setState(6291);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (DATETIME - 207)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6292);
				match(COMMA);
				setState(6293);
				stringLiteral();
				setState(6294);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6296);
				match(JSON_VALUE);
				setState(6297);
				match(LR_BRACKET);
				setState(6298);
				expression(0);
				setState(6299);
				match(COMMA);
				setState(6300);
				expression(0);
				setState(6303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(6301);
					match(RETURNING);
					setState(6302);
					convertedDataType();
					}
				}

				setState(6313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(6309);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6305);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6306);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6307);
						match(DEFAULT);
						setState(6308);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6311);
					match(ON);
					setState(6312);
					match(EMPTY);
					}
					break;
				}
				setState(6323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(6319);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6315);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6316);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6317);
						match(DEFAULT);
						setState(6318);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6321);
					match(ON);
					setState(6322);
					match(ERROR);
					}
				}

				setState(6325);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329);
			match(WHEN);
			setState(6330);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6331);
			match(THEN);
			setState(6332);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6334);
				match(LEVEL);
				setState(6335);
				levelInWeightListElement();
				setState(6340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6336);
					match(COMMA);
					setState(6337);
					levelInWeightListElement();
					}
					}
					setState(6342);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6343);
				match(LEVEL);
				setState(6344);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6345);
				match(MINUS);
				setState(6346);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6350);
			decimalLiteral();
			setState(6352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6351);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6354);
				_la = _input.LA(1);
				if ( !(((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (AVG - 273)) | (1L << (MAX - 273)) | (1L << (MIN - 273)) | (1L << (SUM - 273)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6355);
				match(LR_BRACKET);
				setState(6357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					setState(6356);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6359);
				functionArg();
				setState(6360);
				match(RR_BRACKET);
				setState(6362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					setState(6361);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6364);
				match(COUNT);
				setState(6365);
				match(LR_BRACKET);
				setState(6373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					setState(6366);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6368);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
					case 1:
						{
						setState(6367);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6370);
					functionArg();
					}
					break;
				case 3:
					{
					setState(6371);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(6372);
					functionArgs();
					}
					break;
				}
				setState(6375);
				match(RR_BRACKET);
				setState(6377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
				case 1:
					{
					setState(6376);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6379);
				_la = _input.LA(1);
				if ( !(((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (BIT_AND - 274)) | (1L << (BIT_OR - 274)) | (1L << (BIT_XOR - 274)) | (1L << (STD - 274)) | (1L << (STDDEV - 274)) | (1L << (STDDEV_POP - 274)) | (1L << (STDDEV_SAMP - 274)) | (1L << (VAR_POP - 274)) | (1L << (VAR_SAMP - 274)) | (1L << (VARIANCE - 274)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6380);
				match(LR_BRACKET);
				setState(6382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
				case 1:
					{
					setState(6381);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6384);
				functionArg();
				setState(6385);
				match(RR_BRACKET);
				setState(6387);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(6386);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6389);
				match(GROUP_CONCAT);
				setState(6390);
				match(LR_BRACKET);
				setState(6392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(6391);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6394);
				functionArgs();
				setState(6405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6395);
					match(ORDER);
					setState(6396);
					match(BY);
					setState(6397);
					orderByExpression();
					setState(6402);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6398);
						match(COMMA);
						setState(6399);
						orderByExpression();
						}
						}
						setState(6404);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6407);
					match(SEPARATOR);
					setState(6408);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6411);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(6453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6415);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6416);
				match(LR_BRACKET);
				setState(6417);
				expression(0);
				setState(6420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(6418);
					match(COMMA);
					setState(6419);
					decimalLiteral();
					}
					break;
				}
				setState(6424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6422);
					match(COMMA);
					setState(6423);
					decimalLiteral();
					}
				}

				setState(6426);
				match(RR_BRACKET);
				setState(6427);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6429);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6430);
				match(LR_BRACKET);
				setState(6431);
				expression(0);
				setState(6432);
				match(RR_BRACKET);
				setState(6433);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6435);
				_la = _input.LA(1);
				if ( !(((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (CUME_DIST - 278)) | (1L << (DENSE_RANK - 278)) | (1L << (PERCENT_RANK - 278)) | (1L << (RANK - 278)) | (1L << (ROW_NUMBER - 278)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6436);
				match(LR_BRACKET);
				setState(6437);
				match(RR_BRACKET);
				setState(6438);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6439);
				match(NTH_VALUE);
				setState(6440);
				match(LR_BRACKET);
				setState(6441);
				expression(0);
				setState(6442);
				match(COMMA);
				setState(6443);
				decimalLiteral();
				setState(6444);
				match(RR_BRACKET);
				setState(6445);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6447);
				match(NTILE);
				setState(6448);
				match(LR_BRACKET);
				setState(6449);
				decimalLiteral();
				setState(6450);
				match(RR_BRACKET);
				setState(6451);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6455);
			match(OVER);
			setState(6462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6456);
				match(LR_BRACKET);
				setState(6458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
				case 1:
					{
					setState(6457);
					windowSpec();
					}
					break;
				}
				setState(6460);
				match(RR_BRACKET);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(6461);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				setState(6464);
				windowName();
				}
				break;
			}
			setState(6468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6467);
				partitionClause();
				}
			}

			setState(6471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6470);
				orderByClause();
				}
			}

			setState(6474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(6473);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6476);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6478);
			frameUnits();
			setState(6479);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6481);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_frameExtent);
		try {
			setState(6485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6483);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6484);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6487);
			match(BETWEEN);
			setState(6488);
			frameRange();
			setState(6489);
			match(AND);
			setState(6490);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_frameRange);
		int _la;
		try {
			setState(6499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6492);
				match(CURRENT);
				setState(6493);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6494);
				match(UNBOUNDED);
				setState(6495);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6496);
				expression(0);
				setState(6497);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6501);
			match(PARTITION);
			setState(6502);
			match(BY);
			setState(6503);
			expression(0);
			setState(6508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6504);
				match(COMMA);
				setState(6505);
				expression(0);
				}
				}
				setState(6510);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_scalarFunctionName);
		try {
			setState(6534);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6511);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6512);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6513);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6514);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6515);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6516);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6517);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6518);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6519);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6520);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6521);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6522);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6523);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6524);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6525);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6526);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6527);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6528);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6529);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6530);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6531);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6532);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6533);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6536);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6537);
			match(LR_BRACKET);
			setState(6538);
			functionArg();
			setState(6539);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(6541);
				constant();
				}
				break;
			case 2:
				{
				setState(6542);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6543);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6544);
				expression(0);
				}
				break;
			}
			setState(6556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6547);
				match(COMMA);
				setState(6552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(6548);
					constant();
					}
					break;
				case 2:
					{
					setState(6549);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6550);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6551);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6558);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_functionArg);
		try {
			setState(6563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6559);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6560);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6561);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6562);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 632;
		enterRecursionRule(_localctx, 632, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6566);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6567);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6568);
				predicate(0);
				setState(6569);
				match(IS);
				setState(6571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6570);
					match(NOT);
					}
				}

				setState(6573);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6575);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6584);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,962,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(6578);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6579);
					logicalOperator();
					setState(6580);
					expression(4);
					}
					} 
				}
				setState(6586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,962,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 634;
		enterRecursionRule(_localctx, 634, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
			case 1:
				{
				setState(6588);
				match(LOCAL_ID);
				setState(6589);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(6592);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6658);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,971,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6656);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6594);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6595);
						comparisonOperator();
						setState(6596);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6598);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6600);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6599);
							match(NOT);
							}
						}

						setState(6602);
						match(BETWEEN);
						setState(6603);
						predicate(0);
						setState(6604);
						match(AND);
						setState(6605);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6607);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6608);
						match(SOUNDS);
						setState(6609);
						match(LIKE);
						setState(6610);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6611);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6613);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6612);
							match(NOT);
							}
						}

						setState(6615);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6616);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6617);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6619);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6618);
							match(NOT);
							}
						}

						setState(6621);
						match(IN);
						setState(6622);
						match(LR_BRACKET);
						setState(6625);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
						case 1:
							{
							setState(6623);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6624);
							expressions();
							}
							break;
						}
						setState(6627);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6629);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6630);
						match(IS);
						setState(6631);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6632);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6633);
						comparisonOperator();
						setState(6634);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6635);
						match(LR_BRACKET);
						setState(6636);
						selectStatement();
						setState(6637);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6639);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6641);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6640);
							match(NOT);
							}
						}

						setState(6643);
						match(LIKE);
						setState(6644);
						predicate(0);
						setState(6647);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
						case 1:
							{
							setState(6645);
							match(ESCAPE);
							setState(6646);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6649);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6650);
						match(MEMBER);
						setState(6651);
						match(OF);
						setState(6652);
						match(LR_BRACKET);
						setState(6653);
						predicate(0);
						setState(6654);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(6660);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,971,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 636;
		enterRecursionRule(_localctx, 636, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6662);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6663);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6664);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6665);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6666);
				unaryOperator();
				setState(6667);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6669);
				match(BINARY);
				setState(6670);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6671);
				match(LR_BRACKET);
				setState(6672);
				expression(0);
				setState(6677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6673);
					match(COMMA);
					setState(6674);
					expression(0);
					}
					}
					setState(6679);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6680);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6682);
				match(ROW);
				setState(6683);
				match(LR_BRACKET);
				setState(6684);
				expression(0);
				setState(6687); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6685);
					match(COMMA);
					setState(6686);
					expression(0);
					}
					}
					setState(6689); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6691);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6693);
				match(EXISTS);
				setState(6694);
				match(LR_BRACKET);
				setState(6695);
				selectStatement();
				setState(6696);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6698);
				match(LR_BRACKET);
				setState(6699);
				selectStatement();
				setState(6700);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6702);
				match(INTERVAL);
				setState(6703);
				expression(0);
				setState(6704);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6725);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,976,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6723);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6708);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6709);
						bitOperator();
						setState(6710);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6712);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6713);
						mathOperator();
						setState(6714);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6716);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6717);
						jsonOperator();
						setState(6718);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6720);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6721);
						match(COLLATE);
						setState(6722);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6727);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,976,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6728);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1074)) & ~0x3f) == 0 && ((1L << (_la - 1074)) & ((1L << (PLUS - 1074)) | (1L << (MINUS - 1074)) | (1L << (EXCLAMATION_SYMBOL - 1074)) | (1L << (BIT_NOT_OP - 1074)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_comparisonOperator);
		try {
			setState(6744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6730);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6731);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6732);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6733);
				match(LESS_SYMBOL);
				setState(6734);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6735);
				match(GREATER_SYMBOL);
				setState(6736);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6737);
				match(LESS_SYMBOL);
				setState(6738);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6739);
				match(EXCLAMATION_SYMBOL);
				setState(6740);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6741);
				match(LESS_SYMBOL);
				setState(6742);
				match(EQUAL_SYMBOL);
				setState(6743);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_logicalOperator);
		try {
			setState(6753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6746);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6747);
				match(BIT_AND_OP);
				setState(6748);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6749);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6750);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6751);
				match(BIT_OR_OP);
				setState(6752);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_bitOperator);
		try {
			setState(6762);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6755);
				match(LESS_SYMBOL);
				setState(6756);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6757);
				match(GREATER_SYMBOL);
				setState(6758);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6759);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6760);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6761);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6764);
			_la = _input.LA(1);
			if ( !(((((_la - 1071)) & ~0x3f) == 0 && ((1L << (_la - 1071)) & ((1L << (STAR - 1071)) | (1L << (DIVIDE - 1071)) | (1L << (MODULE - 1071)) | (1L << (PLUS - 1071)) | (1L << (MINUS - 1071)) | (1L << (DIV - 1071)) | (1L << (MOD - 1071)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_jsonOperator);
		try {
			setState(6771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6766);
				match(MINUS);
				setState(6767);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6768);
				match(MINUS);
				setState(6769);
				match(GREATER_SYMBOL);
				setState(6770);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(MySqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6773);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ARMSCII8 - 704)) | (1L << (ASCII - 704)) | (1L << (BIG5 - 704)) | (1L << (CP1250 - 704)) | (1L << (CP1251 - 704)) | (1L << (CP1256 - 704)) | (1L << (CP1257 - 704)) | (1L << (CP850 - 704)) | (1L << (CP852 - 704)) | (1L << (CP866 - 704)) | (1L << (CP932 - 704)) | (1L << (DEC8 - 704)) | (1L << (EUCJPMS - 704)) | (1L << (EUCKR - 704)) | (1L << (GB18030 - 704)) | (1L << (GB2312 - 704)) | (1L << (GBK - 704)) | (1L << (GEOSTD8 - 704)) | (1L << (GREEK - 704)) | (1L << (HEBREW - 704)) | (1L << (HP8 - 704)) | (1L << (KEYBCS2 - 704)) | (1L << (KOI8R - 704)) | (1L << (KOI8U - 704)) | (1L << (LATIN1 - 704)) | (1L << (LATIN2 - 704)) | (1L << (LATIN5 - 704)) | (1L << (LATIN7 - 704)) | (1L << (MACCE - 704)) | (1L << (MACROMAN - 704)) | (1L << (SJIS - 704)) | (1L << (SWE7 - 704)) | (1L << (TIS620 - 704)) | (1L << (UCS2 - 704)) | (1L << (UJIS - 704)) | (1L << (UTF16 - 704)) | (1L << (UTF16LE - 704)) | (1L << (UTF32 - 704)) | (1L << (UTF8 - 704)) | (1L << (UTF8MB3 - 704)) | (1L << (UTF8MB4 - 704)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6775);
			_la = _input.LA(1);
			if ( !(((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (REPEATABLE - 757)) | (1L << (COMMITTED - 757)) | (1L << (UNCOMMITTED - 757)) | (1L << (SERIALIZABLE - 757)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6777);
			_la = _input.LA(1);
			if ( !(((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (TABLES - 662)) | (1L << (ROUTINE - 662)) | (1L << (EXECUTE - 662)) | (1L << (FILE - 662)) | (1L << (PROCESS - 662)) | (1L << (RELOAD - 662)) | (1L << (SHUTDOWN - 662)) | (1L << (SUPER - 662)) | (1L << (PRIVILEGES - 662)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6779);
			_la = _input.LA(1);
			if ( !(((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (QUARTER - 654)) | (1L << (MONTH - 654)) | (1L << (DAY - 654)) | (1L << (HOUR - 654)) | (1L << (MINUTE - 654)) | (1L << (WEEK - 654)) | (1L << (SECOND - 654)) | (1L << (MICROSECOND - 654)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			_la = _input.LA(1);
			if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (DATETIME - 207)) | (1L << (YEAR - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(MySqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(MySqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(MySqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(MySqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6783);
			_la = _input.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NUMBER - 110)) | (1L << (OPTIONAL - 110)) | (1L << (ORDER - 110)) | (1L << (STACKED - 110)))) != 0) || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (SERIAL - 229)) | (1L << (AVG - 229)) | (1L << (BIT_AND - 229)) | (1L << (BIT_OR - 229)) | (1L << (BIT_XOR - 229)) | (1L << (COUNT - 229)) | (1L << (GROUP_CONCAT - 229)) | (1L << (MAX - 229)) | (1L << (MIN - 229)) | (1L << (STD - 229)))) != 0) || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (STDDEV - 293)) | (1L << (STDDEV_POP - 293)) | (1L << (STDDEV_SAMP - 293)) | (1L << (SUM - 293)) | (1L << (VAR_POP - 293)) | (1L << (VAR_SAMP - 293)) | (1L << (VARIANCE - 293)) | (1L << (ACCOUNT - 293)) | (1L << (ACTION - 293)) | (1L << (AFTER - 293)) | (1L << (AGGREGATE - 293)) | (1L << (ALGORITHM - 293)) | (1L << (ANY - 293)) | (1L << (AT - 293)) | (1L << (AUTHORS - 293)) | (1L << (AUTOCOMMIT - 293)) | (1L << (AUTOEXTEND_SIZE - 293)) | (1L << (AUTO_INCREMENT - 293)) | (1L << (AVG_ROW_LENGTH - 293)) | (1L << (BEGIN - 293)) | (1L << (BINLOG - 293)) | (1L << (BIT - 293)) | (1L << (BLOCK - 293)) | (1L << (BOOL - 293)) | (1L << (BOOLEAN - 293)) | (1L << (BTREE - 293)) | (1L << (CACHE - 293)) | (1L << (CASCADED - 293)) | (1L << (CHAIN - 293)) | (1L << (CHANGED - 293)) | (1L << (CHANNEL - 293)) | (1L << (CHECKSUM - 293)) | (1L << (PAGE_CHECKSUM - 293)) | (1L << (CIPHER - 293)) | (1L << (CLASS_ORIGIN - 293)) | (1L << (CLIENT - 293)) | (1L << (CLOSE - 293)) | (1L << (COALESCE - 293)) | (1L << (CODE - 293)) | (1L << (COLUMNS - 293)) | (1L << (COLUMN_FORMAT - 293)) | (1L << (COLUMN_NAME - 293)) | (1L << (COMMENT - 293)) | (1L << (COMMIT - 293)) | (1L << (COMPACT - 293)))) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & ((1L << (COMPLETION - 357)) | (1L << (COMPRESSED - 357)) | (1L << (COMPRESSION - 357)) | (1L << (CONCURRENT - 357)) | (1L << (CONNECT - 357)) | (1L << (CONNECTION - 357)) | (1L << (CONSISTENT - 357)) | (1L << (CONSTRAINT_CATALOG - 357)) | (1L << (CONSTRAINT_SCHEMA - 357)) | (1L << (CONSTRAINT_NAME - 357)) | (1L << (CONTAINS - 357)) | (1L << (CONTEXT - 357)) | (1L << (CONTRIBUTORS - 357)) | (1L << (COPY - 357)) | (1L << (CPU - 357)) | (1L << (CURSOR_NAME - 357)) | (1L << (DATA - 357)) | (1L << (DATAFILE - 357)) | (1L << (DEALLOCATE - 357)) | (1L << (DEFAULT_AUTH - 357)) | (1L << (DEFINER - 357)) | (1L << (DELAY_KEY_WRITE - 357)) | (1L << (DES_KEY_FILE - 357)) | (1L << (DIRECTORY - 357)) | (1L << (DISABLE - 357)) | (1L << (DISCARD - 357)) | (1L << (DISK - 357)) | (1L << (DO - 357)) | (1L << (DUMPFILE - 357)) | (1L << (DUPLICATE - 357)) | (1L << (DYNAMIC - 357)) | (1L << (ENABLE - 357)) | (1L << (ENCRYPTION - 357)) | (1L << (END - 357)) | (1L << (ENDS - 357)) | (1L << (ENGINE - 357)) | (1L << (ENGINES - 357)) | (1L << (ERROR - 357)) | (1L << (ERRORS - 357)) | (1L << (ESCAPE - 357)) | (1L << (EVEN - 357)) | (1L << (EVENT - 357)) | (1L << (EVENTS - 357)) | (1L << (EVERY - 357)) | (1L << (EXCHANGE - 357)) | (1L << (EXCLUSIVE - 357)) | (1L << (EXPIRE - 357)) | (1L << (EXPORT - 357)) | (1L << (EXTENDED - 357)) | (1L << (EXTENT_SIZE - 357)) | (1L << (FAST - 357)) | (1L << (FAULTS - 357)) | (1L << (FIELDS - 357)) | (1L << (FILE_BLOCK_SIZE - 357)) | (1L << (FILTER - 357)) | (1L << (FIRST - 357)) | (1L << (FIXED - 357)) | (1L << (FLUSH - 357)) | (1L << (FOLLOWS - 357)) | (1L << (FOUND - 357)) | (1L << (FULL - 357)) | (1L << (FUNCTION - 357)) | (1L << (GENERAL - 357)))) != 0) || ((((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & ((1L << (GLOBAL - 421)) | (1L << (GRANTS - 421)) | (1L << (GROUP_REPLICATION - 421)) | (1L << (HANDLER - 421)) | (1L << (HASH - 421)) | (1L << (HELP - 421)) | (1L << (HOST - 421)) | (1L << (HOSTS - 421)) | (1L << (IDENTIFIED - 421)) | (1L << (IGNORE_SERVER_IDS - 421)) | (1L << (IMPORT - 421)) | (1L << (INDEXES - 421)) | (1L << (INITIAL_SIZE - 421)) | (1L << (INPLACE - 421)) | (1L << (INSERT_METHOD - 421)) | (1L << (INSTALL - 421)) | (1L << (INSTANCE - 421)) | (1L << (INSTANT - 421)) | (1L << (INVOKER - 421)) | (1L << (IO - 421)) | (1L << (IO_THREAD - 421)) | (1L << (IPC - 421)) | (1L << (ISOLATION - 421)) | (1L << (ISSUER - 421)) | (1L << (JSON - 421)) | (1L << (KEY_BLOCK_SIZE - 421)) | (1L << (LANGUAGE - 421)) | (1L << (LAST - 421)) | (1L << (LEAVES - 421)) | (1L << (LESS - 421)) | (1L << (LEVEL - 421)) | (1L << (LIST - 421)) | (1L << (LOCAL - 421)) | (1L << (LOGFILE - 421)) | (1L << (LOGS - 421)) | (1L << (MASTER - 421)) | (1L << (MASTER_AUTO_POSITION - 421)) | (1L << (MASTER_CONNECT_RETRY - 421)) | (1L << (MASTER_DELAY - 421)) | (1L << (MASTER_HEARTBEAT_PERIOD - 421)) | (1L << (MASTER_HOST - 421)) | (1L << (MASTER_LOG_FILE - 421)) | (1L << (MASTER_LOG_POS - 421)) | (1L << (MASTER_PASSWORD - 421)) | (1L << (MASTER_PORT - 421)) | (1L << (MASTER_RETRY_COUNT - 421)) | (1L << (MASTER_SSL - 421)) | (1L << (MASTER_SSL_CA - 421)) | (1L << (MASTER_SSL_CAPATH - 421)) | (1L << (MASTER_SSL_CERT - 421)) | (1L << (MASTER_SSL_CIPHER - 421)) | (1L << (MASTER_SSL_CRL - 421)) | (1L << (MASTER_SSL_CRLPATH - 421)) | (1L << (MASTER_SSL_KEY - 421)) | (1L << (MASTER_TLS_VERSION - 421)) | (1L << (MASTER_USER - 421)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 421)) | (1L << (MAX_QUERIES_PER_HOUR - 421)) | (1L << (MAX_ROWS - 421)) | (1L << (MAX_SIZE - 421)) | (1L << (MAX_UPDATES_PER_HOUR - 421)) | (1L << (MAX_USER_CONNECTIONS - 421)) | (1L << (MEDIUM - 421)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MEMBER - 485)) | (1L << (MERGE - 485)) | (1L << (MESSAGE_TEXT - 485)) | (1L << (MID - 485)) | (1L << (MIGRATE - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (MODE - 485)) | (1L << (MODIFY - 485)) | (1L << (MUTEX - 485)) | (1L << (MYSQL - 485)) | (1L << (MYSQL_ERRNO - 485)) | (1L << (NAME - 485)) | (1L << (NAMES - 485)) | (1L << (NCHAR - 485)) | (1L << (NEVER - 485)) | (1L << (NEXT - 485)) | (1L << (NO - 485)) | (1L << (NODEGROUP - 485)) | (1L << (NONE - 485)) | (1L << (ODBC - 485)) | (1L << (OFFLINE - 485)) | (1L << (OFFSET - 485)) | (1L << (OF - 485)) | (1L << (OJ - 485)) | (1L << (OLD_PASSWORD - 485)) | (1L << (ONE - 485)) | (1L << (ONLINE - 485)) | (1L << (ONLY - 485)) | (1L << (OPEN - 485)) | (1L << (OPTIMIZER_COSTS - 485)) | (1L << (OPTIONS - 485)) | (1L << (OWNER - 485)) | (1L << (PACK_KEYS - 485)) | (1L << (PAGE - 485)) | (1L << (PARSER - 485)) | (1L << (PARTIAL - 485)) | (1L << (PARTITIONING - 485)) | (1L << (PARTITIONS - 485)) | (1L << (PASSWORD - 485)) | (1L << (PHASE - 485)) | (1L << (PLUGIN - 485)) | (1L << (PLUGIN_DIR - 485)) | (1L << (PLUGINS - 485)) | (1L << (PORT - 485)) | (1L << (PRECEDES - 485)) | (1L << (PREPARE - 485)) | (1L << (PRESERVE - 485)) | (1L << (PREV - 485)) | (1L << (PROCESSLIST - 485)) | (1L << (PROFILE - 485)) | (1L << (PROFILES - 485)) | (1L << (PROXY - 485)) | (1L << (QUERY - 485)) | (1L << (QUICK - 485)) | (1L << (REBUILD - 485)) | (1L << (RECOVER - 485)) | (1L << (REDO_BUFFER_SIZE - 485)) | (1L << (REDUNDANT - 485)) | (1L << (RELAY - 485)) | (1L << (RELAY_LOG_FILE - 485)) | (1L << (RELAY_LOG_POS - 485)) | (1L << (RELAYLOG - 485)) | (1L << (REMOVE - 485)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (REORGANIZE - 549)) | (1L << (REPAIR - 549)) | (1L << (REPLICATE_DO_DB - 549)) | (1L << (REPLICATE_DO_TABLE - 549)) | (1L << (REPLICATE_IGNORE_DB - 549)) | (1L << (REPLICATE_IGNORE_TABLE - 549)) | (1L << (REPLICATE_REWRITE_DB - 549)) | (1L << (REPLICATE_WILD_DO_TABLE - 549)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 549)) | (1L << (REPLICATION - 549)) | (1L << (RESET - 549)) | (1L << (RESUME - 549)) | (1L << (RETURNED_SQLSTATE - 549)) | (1L << (RETURNS - 549)) | (1L << (ROLE - 549)) | (1L << (ROLLBACK - 549)) | (1L << (ROLLUP - 549)) | (1L << (ROTATE - 549)) | (1L << (ROW - 549)) | (1L << (ROWS - 549)) | (1L << (ROW_FORMAT - 549)) | (1L << (SAVEPOINT - 549)) | (1L << (SCHEDULE - 549)) | (1L << (SECURITY - 549)) | (1L << (SERVER - 549)) | (1L << (SESSION - 549)) | (1L << (SHARE - 549)) | (1L << (SHARED - 549)) | (1L << (SIGNED - 549)) | (1L << (SIMPLE - 549)) | (1L << (SLAVE - 549)) | (1L << (SLOW - 549)) | (1L << (SNAPSHOT - 549)) | (1L << (SOCKET - 549)) | (1L << (SOME - 549)) | (1L << (SONAME - 549)) | (1L << (SOUNDS - 549)) | (1L << (SOURCE - 549)) | (1L << (SQL_AFTER_GTIDS - 549)) | (1L << (SQL_AFTER_MTS_GAPS - 549)) | (1L << (SQL_BEFORE_GTIDS - 549)) | (1L << (SQL_BUFFER_RESULT - 549)) | (1L << (SQL_CACHE - 549)) | (1L << (SQL_NO_CACHE - 549)) | (1L << (SQL_THREAD - 549)) | (1L << (START - 549)) | (1L << (STARTS - 549)) | (1L << (STATS_AUTO_RECALC - 549)) | (1L << (STATS_PERSISTENT - 549)) | (1L << (STATS_SAMPLE_PAGES - 549)) | (1L << (STATUS - 549)) | (1L << (STOP - 549)) | (1L << (STORAGE - 549)) | (1L << (STRING - 549)) | (1L << (SUBCLASS_ORIGIN - 549)) | (1L << (SUBJECT - 549)) | (1L << (SUBPARTITION - 549)) | (1L << (SUBPARTITIONS - 549)) | (1L << (SUSPEND - 549)) | (1L << (SWAPS - 549)) | (1L << (SWITCHES - 549)) | (1L << (TABLE_NAME - 549)))) != 0) || ((((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & ((1L << (TABLESPACE - 613)) | (1L << (TEMPORARY - 613)) | (1L << (TEMPTABLE - 613)) | (1L << (THAN - 613)) | (1L << (TRADITIONAL - 613)) | (1L << (TRANSACTION - 613)) | (1L << (TRANSACTIONAL - 613)) | (1L << (TRIGGERS - 613)) | (1L << (TRUNCATE - 613)) | (1L << (UNDEFINED - 613)) | (1L << (UNDOFILE - 613)) | (1L << (UNDO_BUFFER_SIZE - 613)) | (1L << (UNINSTALL - 613)) | (1L << (UNKNOWN - 613)) | (1L << (UNTIL - 613)) | (1L << (UPGRADE - 613)) | (1L << (USER - 613)) | (1L << (USE_FRM - 613)) | (1L << (USER_RESOURCES - 613)) | (1L << (VALIDATION - 613)) | (1L << (VALUE - 613)) | (1L << (VARIABLES - 613)) | (1L << (VIEW - 613)) | (1L << (WAIT - 613)) | (1L << (WARNINGS - 613)) | (1L << (WITHOUT - 613)) | (1L << (WORK - 613)) | (1L << (WRAPPER - 613)) | (1L << (X509 - 613)) | (1L << (XA - 613)) | (1L << (XML - 613)) | (1L << (EUR - 613)) | (1L << (USA - 613)) | (1L << (JIS - 613)) | (1L << (ISO - 613)) | (1L << (INTERNAL - 613)) | (1L << (AUDIT_ADMIN - 613)) | (1L << (BACKUP_ADMIN - 613)) | (1L << (BINLOG_ADMIN - 613)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 613)) | (1L << (CLONE_ADMIN - 613)))) != 0) || ((((_la - 677)) & ~0x3f) == 0 && ((1L << (_la - 677)) & ((1L << (CONNECTION_ADMIN - 677)) | (1L << (ENCRYPTION_KEY_ADMIN - 677)) | (1L << (FIREWALL_ADMIN - 677)) | (1L << (FIREWALL_USER - 677)) | (1L << (ADMIN - 677)) | (1L << (GROUP_REPLICATION_ADMIN - 677)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 677)) | (1L << (NDB_STORED_USER - 677)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 677)) | (1L << (REPLICATION_APPLIER - 677)) | (1L << (REPLICATION_SLAVE_ADMIN - 677)) | (1L << (RESOURCE_GROUP_ADMIN - 677)) | (1L << (RESOURCE_GROUP_USER - 677)) | (1L << (ROLE_ADMIN - 677)) | (1L << (SESSION_VARIABLES_ADMIN - 677)) | (1L << (SET_USER_ID - 677)) | (1L << (SHOW_ROUTINE - 677)) | (1L << (SYSTEM_VARIABLES_ADMIN - 677)) | (1L << (TABLE_ENCRYPTION_ADMIN - 677)) | (1L << (VERSION_TOKEN_ADMIN - 677)) | (1L << (XA_RECOVER_ADMIN - 677)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6785);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LEFT - 92)) | (1L << (RIGHT - 92)) | (1L << (SCHEMA - 92)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (DATE - 207)) | (1L << (TIME - 207)) | (1L << (TIMESTAMP - 207)) | (1L << (YEAR - 207)) | (1L << (JSON_ARRAY - 207)) | (1L << (JSON_OBJECT - 207)) | (1L << (JSON_QUOTE - 207)) | (1L << (JSON_CONTAINS - 207)) | (1L << (JSON_CONTAINS_PATH - 207)) | (1L << (JSON_EXTRACT - 207)) | (1L << (JSON_KEYS - 207)) | (1L << (JSON_OVERLAPS - 207)) | (1L << (JSON_SEARCH - 207)) | (1L << (JSON_VALUE - 207)) | (1L << (JSON_ARRAY_APPEND - 207)) | (1L << (JSON_ARRAY_INSERT - 207)) | (1L << (JSON_INSERT - 207)) | (1L << (JSON_MERGE - 207)) | (1L << (JSON_MERGE_PATCH - 207)) | (1L << (JSON_MERGE_PRESERVE - 207)) | (1L << (JSON_REMOVE - 207)) | (1L << (JSON_REPLACE - 207)) | (1L << (JSON_SET - 207)) | (1L << (JSON_UNQUOTE - 207)) | (1L << (JSON_DEPTH - 207)) | (1L << (JSON_LENGTH - 207)) | (1L << (JSON_TYPE - 207)) | (1L << (JSON_VALID - 207)) | (1L << (JSON_TABLE - 207)) | (1L << (JSON_SCHEMA_VALID - 207)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 207)) | (1L << (JSON_PRETTY - 207)) | (1L << (JSON_STORAGE_FREE - 207)) | (1L << (JSON_STORAGE_SIZE - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (JSON_ARRAYAGG - 271)) | (1L << (JSON_OBJECTAGG - 271)) | (1L << (COUNT - 271)) | (1L << (POSITION - 271)))) != 0) || _la==INVISIBLE || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (VISIBLE - 639)) | (1L << (QUARTER - 639)) | (1L << (MONTH - 639)) | (1L << (DAY - 639)) | (1L << (HOUR - 639)) | (1L << (MINUTE - 639)) | (1L << (WEEK - 639)) | (1L << (SECOND - 639)) | (1L << (MICROSECOND - 639)) | (1L << (SESSION_VARIABLES_ADMIN - 639)))) != 0) || ((((_la - 761)) & ~0x3f) == 0 && ((1L << (_la - 761)) & ((1L << (GEOMETRYCOLLECTION - 761)) | (1L << (LINESTRING - 761)) | (1L << (MULTILINESTRING - 761)) | (1L << (MULTIPOINT - 761)) | (1L << (MULTIPOLYGON - 761)) | (1L << (POINT - 761)) | (1L << (POLYGON - 761)) | (1L << (ABS - 761)) | (1L << (ACOS - 761)) | (1L << (ADDDATE - 761)) | (1L << (ADDTIME - 761)) | (1L << (AES_DECRYPT - 761)) | (1L << (AES_ENCRYPT - 761)) | (1L << (AREA - 761)) | (1L << (ASBINARY - 761)) | (1L << (ASIN - 761)) | (1L << (ASTEXT - 761)) | (1L << (ASWKB - 761)) | (1L << (ASWKT - 761)) | (1L << (ASYMMETRIC_DECRYPT - 761)) | (1L << (ASYMMETRIC_DERIVE - 761)) | (1L << (ASYMMETRIC_ENCRYPT - 761)) | (1L << (ASYMMETRIC_SIGN - 761)) | (1L << (ASYMMETRIC_VERIFY - 761)) | (1L << (ATAN - 761)) | (1L << (ATAN2 - 761)) | (1L << (BENCHMARK - 761)) | (1L << (BIN - 761)) | (1L << (BIT_COUNT - 761)) | (1L << (BIT_LENGTH - 761)) | (1L << (BUFFER - 761)) | (1L << (CEIL - 761)) | (1L << (CEILING - 761)) | (1L << (CENTROID - 761)) | (1L << (CHARACTER_LENGTH - 761)) | (1L << (CHARSET - 761)) | (1L << (CHAR_LENGTH - 761)) | (1L << (COERCIBILITY - 761)) | (1L << (COLLATION - 761)) | (1L << (COMPRESS - 761)) | (1L << (CONCAT - 761)) | (1L << (CONCAT_WS - 761)) | (1L << (CONNECTION_ID - 761)) | (1L << (CONV - 761)) | (1L << (CONVERT_TZ - 761)) | (1L << (COS - 761)) | (1L << (COT - 761)) | (1L << (CRC32 - 761)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 761)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 761)) | (1L << (CREATE_DH_PARAMETERS - 761)) | (1L << (CREATE_DIGEST - 761)) | (1L << (CROSSES - 761)) | (1L << (DATEDIFF - 761)) | (1L << (DATE_FORMAT - 761)) | (1L << (DAYNAME - 761)) | (1L << (DAYOFMONTH - 761)) | (1L << (DAYOFWEEK - 761)) | (1L << (DAYOFYEAR - 761)) | (1L << (DECODE - 761)) | (1L << (DEGREES - 761)))) != 0) || ((((_la - 825)) & ~0x3f) == 0 && ((1L << (_la - 825)) & ((1L << (DES_DECRYPT - 825)) | (1L << (DES_ENCRYPT - 825)) | (1L << (DIMENSION - 825)) | (1L << (DISJOINT - 825)) | (1L << (ELT - 825)) | (1L << (ENCODE - 825)) | (1L << (ENCRYPT - 825)) | (1L << (ENDPOINT - 825)) | (1L << (ENVELOPE - 825)) | (1L << (EQUALS - 825)) | (1L << (EXP - 825)) | (1L << (EXPORT_SET - 825)) | (1L << (EXTERIORRING - 825)) | (1L << (EXTRACTVALUE - 825)) | (1L << (FIELD - 825)) | (1L << (FIND_IN_SET - 825)) | (1L << (FLOOR - 825)) | (1L << (FORMAT - 825)) | (1L << (FOUND_ROWS - 825)) | (1L << (FROM_BASE64 - 825)) | (1L << (FROM_DAYS - 825)) | (1L << (FROM_UNIXTIME - 825)) | (1L << (GEOMCOLLFROMTEXT - 825)) | (1L << (GEOMCOLLFROMWKB - 825)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 825)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 825)) | (1L << (GEOMETRYFROMTEXT - 825)) | (1L << (GEOMETRYFROMWKB - 825)) | (1L << (GEOMETRYN - 825)) | (1L << (GEOMETRYTYPE - 825)) | (1L << (GEOMFROMTEXT - 825)) | (1L << (GEOMFROMWKB - 825)) | (1L << (GET_FORMAT - 825)) | (1L << (GET_LOCK - 825)) | (1L << (GLENGTH - 825)) | (1L << (GREATEST - 825)) | (1L << (GTID_SUBSET - 825)) | (1L << (GTID_SUBTRACT - 825)) | (1L << (HEX - 825)) | (1L << (IFNULL - 825)) | (1L << (INET6_ATON - 825)) | (1L << (INET6_NTOA - 825)) | (1L << (INET_ATON - 825)) | (1L << (INET_NTOA - 825)) | (1L << (INSTR - 825)) | (1L << (INTERIORRINGN - 825)) | (1L << (INTERSECTS - 825)) | (1L << (ISCLOSED - 825)) | (1L << (ISEMPTY - 825)) | (1L << (ISNULL - 825)) | (1L << (ISSIMPLE - 825)) | (1L << (IS_FREE_LOCK - 825)) | (1L << (IS_IPV4 - 825)) | (1L << (IS_IPV4_COMPAT - 825)) | (1L << (IS_IPV4_MAPPED - 825)) | (1L << (IS_IPV6 - 825)) | (1L << (IS_USED_LOCK - 825)) | (1L << (LAST_INSERT_ID - 825)) | (1L << (LCASE - 825)) | (1L << (LEAST - 825)) | (1L << (LENGTH - 825)) | (1L << (LINEFROMTEXT - 825)) | (1L << (LINEFROMWKB - 825)) | (1L << (LINESTRINGFROMTEXT - 825)))) != 0) || ((((_la - 889)) & ~0x3f) == 0 && ((1L << (_la - 889)) & ((1L << (LINESTRINGFROMWKB - 889)) | (1L << (LN - 889)) | (1L << (LOAD_FILE - 889)) | (1L << (LOCATE - 889)) | (1L << (LOG - 889)) | (1L << (LOG10 - 889)) | (1L << (LOG2 - 889)) | (1L << (LOWER - 889)) | (1L << (LPAD - 889)) | (1L << (LTRIM - 889)) | (1L << (MAKEDATE - 889)) | (1L << (MAKETIME - 889)) | (1L << (MAKE_SET - 889)) | (1L << (MASTER_POS_WAIT - 889)) | (1L << (MBRCONTAINS - 889)) | (1L << (MBRDISJOINT - 889)) | (1L << (MBREQUAL - 889)) | (1L << (MBRINTERSECTS - 889)) | (1L << (MBROVERLAPS - 889)) | (1L << (MBRTOUCHES - 889)) | (1L << (MBRWITHIN - 889)) | (1L << (MD5 - 889)) | (1L << (MLINEFROMTEXT - 889)) | (1L << (MLINEFROMWKB - 889)) | (1L << (MONTHNAME - 889)) | (1L << (MPOINTFROMTEXT - 889)) | (1L << (MPOINTFROMWKB - 889)) | (1L << (MPOLYFROMTEXT - 889)) | (1L << (MPOLYFROMWKB - 889)) | (1L << (MULTILINESTRINGFROMTEXT - 889)) | (1L << (MULTILINESTRINGFROMWKB - 889)) | (1L << (MULTIPOINTFROMTEXT - 889)) | (1L << (MULTIPOINTFROMWKB - 889)) | (1L << (MULTIPOLYGONFROMTEXT - 889)) | (1L << (MULTIPOLYGONFROMWKB - 889)) | (1L << (NAME_CONST - 889)) | (1L << (NULLIF - 889)) | (1L << (NUMGEOMETRIES - 889)) | (1L << (NUMINTERIORRINGS - 889)) | (1L << (NUMPOINTS - 889)) | (1L << (OCT - 889)) | (1L << (OCTET_LENGTH - 889)) | (1L << (ORD - 889)) | (1L << (OVERLAPS - 889)) | (1L << (PERIOD_ADD - 889)) | (1L << (PERIOD_DIFF - 889)) | (1L << (PI - 889)) | (1L << (POINTFROMTEXT - 889)) | (1L << (POINTFROMWKB - 889)) | (1L << (POINTN - 889)) | (1L << (POLYFROMTEXT - 889)) | (1L << (POLYFROMWKB - 889)) | (1L << (POLYGONFROMTEXT - 889)) | (1L << (POLYGONFROMWKB - 889)) | (1L << (POW - 889)) | (1L << (POWER - 889)) | (1L << (QUOTE - 889)) | (1L << (RADIANS - 889)) | (1L << (RAND - 889)) | (1L << (RANDOM_BYTES - 889)) | (1L << (RELEASE_LOCK - 889)) | (1L << (REVERSE - 889)) | (1L << (ROUND - 889)) | (1L << (ROW_COUNT - 889)))) != 0) || ((((_la - 953)) & ~0x3f) == 0 && ((1L << (_la - 953)) & ((1L << (RPAD - 953)) | (1L << (RTRIM - 953)) | (1L << (SEC_TO_TIME - 953)) | (1L << (SESSION_USER - 953)) | (1L << (SHA - 953)) | (1L << (SHA1 - 953)) | (1L << (SHA2 - 953)) | (1L << (SIGN - 953)) | (1L << (SIN - 953)) | (1L << (SLEEP - 953)) | (1L << (SOUNDEX - 953)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 953)) | (1L << (SQRT - 953)) | (1L << (SRID - 953)) | (1L << (STARTPOINT - 953)) | (1L << (STRCMP - 953)) | (1L << (STR_TO_DATE - 953)) | (1L << (ST_AREA - 953)) | (1L << (ST_ASBINARY - 953)) | (1L << (ST_ASTEXT - 953)) | (1L << (ST_ASWKB - 953)) | (1L << (ST_ASWKT - 953)) | (1L << (ST_BUFFER - 953)) | (1L << (ST_CENTROID - 953)) | (1L << (ST_CONTAINS - 953)) | (1L << (ST_CROSSES - 953)) | (1L << (ST_DIFFERENCE - 953)) | (1L << (ST_DIMENSION - 953)) | (1L << (ST_DISJOINT - 953)) | (1L << (ST_DISTANCE - 953)) | (1L << (ST_ENDPOINT - 953)) | (1L << (ST_ENVELOPE - 953)) | (1L << (ST_EQUALS - 953)) | (1L << (ST_EXTERIORRING - 953)) | (1L << (ST_GEOMCOLLFROMTEXT - 953)) | (1L << (ST_GEOMCOLLFROMTXT - 953)) | (1L << (ST_GEOMCOLLFROMWKB - 953)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 953)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 953)) | (1L << (ST_GEOMETRYFROMTEXT - 953)) | (1L << (ST_GEOMETRYFROMWKB - 953)) | (1L << (ST_GEOMETRYN - 953)) | (1L << (ST_GEOMETRYTYPE - 953)) | (1L << (ST_GEOMFROMTEXT - 953)) | (1L << (ST_GEOMFROMWKB - 953)) | (1L << (ST_INTERIORRINGN - 953)) | (1L << (ST_INTERSECTION - 953)) | (1L << (ST_INTERSECTS - 953)) | (1L << (ST_ISCLOSED - 953)) | (1L << (ST_ISEMPTY - 953)) | (1L << (ST_ISSIMPLE - 953)) | (1L << (ST_LINEFROMTEXT - 953)) | (1L << (ST_LINEFROMWKB - 953)) | (1L << (ST_LINESTRINGFROMTEXT - 953)) | (1L << (ST_LINESTRINGFROMWKB - 953)) | (1L << (ST_NUMGEOMETRIES - 953)) | (1L << (ST_NUMINTERIORRING - 953)) | (1L << (ST_NUMINTERIORRINGS - 953)) | (1L << (ST_NUMPOINTS - 953)) | (1L << (ST_OVERLAPS - 953)) | (1L << (ST_POINTFROMTEXT - 953)) | (1L << (ST_POINTFROMWKB - 953)) | (1L << (ST_POINTN - 953)))) != 0) || ((((_la - 1017)) & ~0x3f) == 0 && ((1L << (_la - 1017)) & ((1L << (ST_POLYFROMTEXT - 1017)) | (1L << (ST_POLYFROMWKB - 1017)) | (1L << (ST_POLYGONFROMTEXT - 1017)) | (1L << (ST_POLYGONFROMWKB - 1017)) | (1L << (ST_SRID - 1017)) | (1L << (ST_STARTPOINT - 1017)) | (1L << (ST_SYMDIFFERENCE - 1017)) | (1L << (ST_TOUCHES - 1017)) | (1L << (ST_UNION - 1017)) | (1L << (ST_WITHIN - 1017)) | (1L << (ST_X - 1017)) | (1L << (ST_Y - 1017)) | (1L << (SUBDATE - 1017)) | (1L << (SUBSTRING_INDEX - 1017)) | (1L << (SUBTIME - 1017)) | (1L << (SYSTEM_USER - 1017)) | (1L << (TAN - 1017)) | (1L << (TIMEDIFF - 1017)) | (1L << (TIMESTAMPADD - 1017)) | (1L << (TIMESTAMPDIFF - 1017)) | (1L << (TIME_FORMAT - 1017)) | (1L << (TIME_TO_SEC - 1017)) | (1L << (TOUCHES - 1017)) | (1L << (TO_BASE64 - 1017)) | (1L << (TO_DAYS - 1017)) | (1L << (TO_SECONDS - 1017)) | (1L << (UCASE - 1017)) | (1L << (UNCOMPRESS - 1017)) | (1L << (UNCOMPRESSED_LENGTH - 1017)) | (1L << (UNHEX - 1017)) | (1L << (UNIX_TIMESTAMP - 1017)) | (1L << (UPDATEXML - 1017)) | (1L << (UPPER - 1017)) | (1L << (UUID - 1017)) | (1L << (UUID_SHORT - 1017)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1017)) | (1L << (VERSION - 1017)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1017)) | (1L << (WEEKDAY - 1017)) | (1L << (WEEKOFYEAR - 1017)) | (1L << (WEIGHT_STRING - 1017)) | (1L << (WITHIN - 1017)) | (1L << (YEARWEEK - 1017)) | (1L << (Y_FUNCTION - 1017)) | (1L << (X_FUNCTION - 1017)) | (1L << (MOD - 1017)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 316:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 317:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 318:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u045e\u1a86\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\3\2\5\2\u029c\n\2\3\2\3\2\5\2"+
		"\u02a0\n\2\3\2\3\2\3\3\3\3\3\3\5\3\u02a7\n\3\3\3\5\3\u02aa\n\3\3\3\7\3"+
		"\u02ad\n\3\f\3\16\3\u02b0\13\3\3\3\3\3\3\3\5\3\u02b5\n\3\3\3\5\3\u02b8"+
		"\n\3\3\3\5\3\u02bb\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u02c4\n\4\3\5\3"+
		"\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\5\6\u02eb\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02f7\n\7"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0302\n\b\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0313\n\t\3\n\3\n\3\n\5\n"+
		"\u0318\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0324"+
		"\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u033f\n\f\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\5\r\u0348\n\r\3\16\3\16\3\16\5\16\u034d\n\16\3\16\3\16\7\16\u0351"+
		"\n\16\f\16\16\16\u0354\13\16\3\17\3\17\5\17\u0358\n\17\3\17\3\17\5\17"+
		"\u035c\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0365\n\17\3\17\5"+
		"\17\u0368\n\17\3\17\5\17\u036b\n\17\3\17\3\17\5\17\u036f\n\17\3\17\3\17"+
		"\3\17\3\20\3\20\5\20\u0376\n\20\3\20\5\20\u0379\n\20\3\20\3\20\3\20\5"+
		"\20\u037e\n\20\3\20\3\20\3\20\3\20\7\20\u0384\n\20\f\20\16\20\u0387\13"+
		"\20\3\20\3\20\5\20\u038b\n\20\3\20\3\20\3\20\5\20\u0390\n\20\3\20\7\20"+
		"\u0393\n\20\f\20\16\20\u0396\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\5\21\u03a1\n\21\3\21\5\21\u03a4\n\21\3\21\3\21\5\21\u03a8\n"+
		"\21\3\21\5\21\u03ab\n\21\3\21\3\21\5\21\u03af\n\21\3\21\5\21\u03b2\n\21"+
		"\3\21\3\21\5\21\u03b6\n\21\3\21\5\21\u03b9\n\21\3\21\5\21\u03bc\n\21\3"+
		"\21\3\21\5\21\u03c0\n\21\3\21\5\21\u03c3\n\21\3\21\3\21\5\21\u03c7\n\21"+
		"\3\21\3\21\3\22\3\22\5\22\u03cd\n\22\3\22\3\22\3\22\3\22\5\22\u03d3\n"+
		"\22\3\22\3\22\7\22\u03d7\n\22\f\22\16\22\u03da\13\22\3\22\3\22\7\22\u03de"+
		"\n\22\f\22\16\22\u03e1\13\22\3\22\3\22\3\23\3\23\5\23\u03e7\n\23\3\23"+
		"\3\23\3\23\3\23\5\23\u03ed\n\23\3\23\3\23\7\23\u03f1\n\23\f\23\16\23\u03f4"+
		"\13\23\3\23\3\23\3\23\3\23\7\23\u03fa\n\23\f\23\16\23\u03fd\13\23\3\23"+
		"\3\23\5\23\u0401\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\7\24\u040f\n\24\f\24\16\24\u0412\13\24\3\24\3\24\3\25\3\25"+
		"\5\25\u0418\n\25\3\25\3\25\5\25\u041c\n\25\3\25\3\25\3\25\3\25\3\25\3"+
		"\25\3\25\3\25\5\25\u0426\n\25\3\25\3\25\5\25\u042a\n\25\3\25\3\25\5\25"+
		"\u042e\n\25\3\25\3\25\5\25\u0432\n\25\3\25\3\25\5\25\u0436\n\25\3\25\7"+
		"\25\u0439\n\25\f\25\16\25\u043c\13\25\5\25\u043e\n\25\3\25\5\25\u0441"+
		"\n\25\3\25\5\25\u0444\n\25\3\25\5\25\u0447\n\25\3\25\3\25\3\25\3\25\5"+
		"\25\u044d\n\25\3\25\3\25\5\25\u0451\n\25\3\25\3\25\3\25\3\25\5\25\u0457"+
		"\n\25\3\25\7\25\u045a\n\25\f\25\16\25\u045d\13\25\5\25\u045f\n\25\3\25"+
		"\5\25\u0462\n\25\5\25\u0464\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\5\26\u046f\n\26\3\26\3\26\5\26\u0473\n\26\3\26\5\26\u0476\n\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0484"+
		"\n\27\3\27\5\27\u0487\n\27\3\27\3\27\5\27\u048b\n\27\3\27\5\27\u048e\n"+
		"\27\3\27\3\27\5\27\u0492\n\27\3\27\5\27\u0495\n\27\3\27\3\27\5\27\u0499"+
		"\n\27\3\27\5\27\u049c\n\27\3\27\3\27\5\27\u04a0\n\27\3\27\5\27\u04a3\n"+
		"\27\3\27\5\27\u04a6\n\27\3\27\3\27\5\27\u04aa\n\27\3\27\5\27\u04ad\n\27"+
		"\3\27\3\27\5\27\u04b1\n\27\3\27\3\27\3\30\3\30\5\30\u04b7\n\30\3\30\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u04c4\n\30\3\30"+
		"\3\30\3\31\3\31\3\31\5\31\u04cb\n\31\3\31\3\31\3\31\5\31\u04d0\n\31\3"+
		"\31\5\31\u04d3\n\31\3\31\3\31\3\31\5\31\u04d8\n\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\5\31\u04e0\n\31\3\31\3\31\3\31\3\31\5\31\u04e6\n\31\3\31\3"+
		"\31\5\31\u04ea\n\31\3\32\5\32\u04ed\n\32\3\32\3\32\5\32\u04f1\n\32\3\32"+
		"\3\32\5\32\u04f5\n\32\3\32\5\32\u04f8\n\32\3\32\3\32\5\32\u04fc\n\32\3"+
		"\32\5\32\u04ff\n\32\3\33\3\33\3\33\3\33\3\33\5\33\u0506\n\33\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\5\34\u050e\n\34\5\34\u0510\n\34\3\35\3\35\3\35\7"+
		"\35\u0515\n\35\f\35\16\35\u0518\13\35\3\35\3\35\3\35\5\35\u051d\n\35\3"+
		"\35\3\35\3\35\3\35\7\35\u0523\n\35\f\35\16\35\u0526\13\35\5\35\u0528\n"+
		"\35\3\35\3\35\3\35\7\35\u052d\n\35\f\35\16\35\u0530\13\35\5\35\u0532\n"+
		"\35\5\35\u0534\n\35\3\36\3\36\3\36\3\36\5\36\u053a\n\36\3\37\3\37\3\37"+
		"\3\37\5\37\u0540\n\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3"+
		" \5 \u0551\n \3!\3!\3!\3!\3!\5!\u0558\n!\3\"\3\"\3\"\3#\3#\5#\u055f\n"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u056a\n#\3$\5$\u056d\n$\3$\3$\3$\3%\3"+
		"%\3%\3&\3&\3&\3&\3&\5&\u057a\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0587"+
		"\n&\3&\3&\3&\5&\u058c\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3"+
		"\'\3\'\3\'\5\'\u059c\n\'\3(\3(\3(\3(\7(\u05a2\n(\f(\16(\u05a5\13(\3(\3"+
		"(\3)\3)\3)\3)\3)\5)\u05ae\n)\3*\3*\7*\u05b2\n*\f*\16*\u05b5\13*\3+\3+"+
		"\3+\3+\3+\3+\3+\3+\3+\5+\u05c0\n+\3+\5+\u05c3\n+\3+\3+\3+\5+\u05c8\n+"+
		"\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u05d5\n+\3+\3+\3+\3+\3+\5+\u05dc"+
		"\n+\3+\3+\3+\3+\3+\5+\u05e3\n+\5+\u05e5\n+\3+\3+\3+\3+\3+\5+\u05ec\n+"+
		"\3,\3,\5,\u05f0\n,\5,\u05f2\n,\3,\3,\3,\5,\u05f7\n,\3,\5,\u05fa\n,\3,"+
		"\3,\7,\u05fe\n,\f,\16,\u0601\13,\3,\3,\5,\u0605\n,\5,\u0607\n,\3,\3,\5"+
		",\u060b\n,\3,\5,\u060e\n,\3,\5,\u0611\n,\3,\3,\7,\u0615\n,\f,\16,\u0618"+
		"\13,\3,\3,\5,\u061c\n,\5,\u061e\n,\3,\3,\3,\5,\u0623\n,\3,\3,\3,\3,\3"+
		",\5,\u062a\n,\5,\u062c\n,\3,\3,\3,\3,\3,\5,\u0633\n,\3-\3-\3-\5-\u0638"+
		"\n-\3-\3-\5-\u063c\n-\3-\5-\u063f\n-\3.\3.\3.\3.\3.\3.\5.\u0647\n.\3."+
		"\3.\3.\3.\3.\3.\5.\u064f\n.\5.\u0651\n.\3/\3/\3/\3/\3/\3/\5/\u0659\n/"+
		"\3\60\3\60\5\60\u065d\n\60\3\60\5\60\u0660\n\60\3\60\3\60\7\60\u0664\n"+
		"\60\f\60\16\60\u0667\13\60\3\60\3\60\5\60\u066b\n\60\3\60\5\60\u066e\n"+
		"\60\3\60\3\60\7\60\u0672\n\60\f\60\16\60\u0675\13\60\5\60\u0677\n\60\3"+
		"\61\3\61\5\61\u067b\n\61\3\61\5\61\u067e\n\61\3\61\3\61\5\61\u0682\n\61"+
		"\3\61\3\61\3\61\5\61\u0687\n\61\3\61\3\61\5\61\u068b\n\61\3\61\3\61\5"+
		"\61\u068f\n\61\3\61\3\61\5\61\u0693\n\61\3\61\3\61\5\61\u0697\n\61\3\61"+
		"\3\61\5\61\u069b\n\61\3\61\3\61\5\61\u069f\n\61\3\61\3\61\3\61\5\61\u06a4"+
		"\n\61\3\61\3\61\3\61\5\61\u06a9\n\61\3\61\3\61\3\61\5\61\u06ae\n\61\3"+
		"\61\3\61\3\61\3\61\5\61\u06b4\n\61\3\61\3\61\3\61\5\61\u06b9\n\61\3\61"+
		"\3\61\3\61\5\61\u06be\n\61\3\61\3\61\3\61\3\61\5\61\u06c4\n\61\3\61\3"+
		"\61\3\61\5\61\u06c9\n\61\3\61\3\61\3\61\5\61\u06ce\n\61\3\61\3\61\3\61"+
		"\5\61\u06d3\n\61\3\61\3\61\3\61\5\61\u06d8\n\61\3\61\3\61\3\61\5\61\u06dd"+
		"\n\61\3\61\3\61\3\61\5\61\u06e2\n\61\3\61\3\61\3\61\5\61\u06e7\n\61\3"+
		"\61\3\61\3\61\5\61\u06ec\n\61\3\61\3\61\3\61\5\61\u06f1\n\61\3\61\3\61"+
		"\3\61\5\61\u06f6\n\61\3\61\3\61\3\61\3\61\5\61\u06fc\n\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\5\61\u0704\n\61\3\61\3\61\3\61\3\61\5\61\u070a\n\61"+
		"\3\62\3\62\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\5\64\u0716\n\64\3\64"+
		"\3\64\3\64\3\64\3\64\5\64\u071d\n\64\5\64\u071f\n\64\3\64\3\64\3\64\3"+
		"\64\7\64\u0725\n\64\f\64\16\64\u0728\13\64\3\64\3\64\5\64\u072c\n\64\3"+
		"\65\5\65\u072f\n\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0737\n\65\3\65"+
		"\3\65\3\65\3\65\5\65\u073d\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u074d\n\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\5\65\u0759\n\65\5\65\u075b\n\65\3\66\5\66\u075e"+
		"\n\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0766\n\66\3\66\3\66\3\66\3\66"+
		"\5\66\u076c\n\66\3\66\3\66\3\66\3\66\5\66\u0772\n\66\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\7\67\u077d\n\67\f\67\16\67\u0780\13\67\3"+
		"\67\3\67\7\67\u0784\n\67\f\67\16\67\u0787\13\67\3\67\3\67\3\67\3\67\7"+
		"\67\u078d\n\67\f\67\16\67\u0790\13\67\3\67\3\67\5\67\u0794\n\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\7\67\u079d\n\67\f\67\16\67\u07a0\13\67\3"+
		"\67\3\67\3\67\3\67\7\67\u07a6\n\67\f\67\16\67\u07a9\13\67\3\67\3\67\5"+
		"\67\u07ad\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u07b7\n\67"+
		"\f\67\16\67\u07ba\13\67\3\67\3\67\7\67\u07be\n\67\f\67\16\67\u07c1\13"+
		"\67\3\67\3\67\3\67\3\67\7\67\u07c7\n\67\f\67\16\67\u07ca\13\67\3\67\3"+
		"\67\5\67\u07ce\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u07d8"+
		"\n\67\f\67\16\67\u07db\13\67\3\67\3\67\7\67\u07df\n\67\f\67\16\67\u07e2"+
		"\13\67\3\67\3\67\3\67\3\67\7\67\u07e8\n\67\f\67\16\67\u07eb\13\67\3\67"+
		"\3\67\5\67\u07ef\n\67\3\67\3\67\3\67\7\67\u07f4\n\67\f\67\16\67\u07f7"+
		"\13\67\3\67\3\67\3\67\3\67\7\67\u07fd\n\67\f\67\16\67\u0800\13\67\3\67"+
		"\3\67\5\67\u0804\n\67\5\67\u0806\n\67\38\38\38\58\u080b\n8\39\39\39\3"+
		"9\69\u0811\n9\r9\169\u0812\39\39\3:\3:\3:\7:\u081a\n:\f:\16:\u081d\13"+
		":\3;\5;\u0820\n;\3;\5;\u0823\n;\3;\3;\5;\u0827\n;\3;\3;\3;\5;\u082c\n"+
		";\3;\3;\3;\3;\5;\u0832\n;\3;\3;\3;\3;\5;\u0838\n;\3;\3;\3;\5;\u083d\n"+
		";\3;\3;\3;\5;\u0842\n;\3;\3;\3;\5;\u0847\n;\3;\3;\3;\5;\u084c\n;\3;\5"+
		";\u084f\n;\3<\3<\3<\5<\u0854\n<\3<\6<\u0857\n<\r<\16<\u0858\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\5<\u0863\n<\3=\3=\5=\u0867\n=\3=\3=\3=\3=\3=\5=\u086e\n"+
		"=\3=\3=\3=\5=\u0873\n=\3=\5=\u0876\n=\3=\3=\3=\5=\u087b\n=\3=\5=\u087e"+
		"\n=\3=\3=\5=\u0882\n=\3=\3=\5=\u0886\n=\3>\3>\3>\3>\7>\u088c\n>\f>\16"+
		">\u088f\13>\3?\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u08a1\n"+
		"@\3@\5@\u08a4\n@\3@\5@\u08a7\n@\3@\3@\5@\u08ab\n@\3@\3@\3A\3A\3A\3A\7"+
		"A\u08b3\nA\fA\16A\u08b6\13A\3B\3B\3B\3B\3B\3B\3B\3B\7B\u08c0\nB\fB\16"+
		"B\u08c3\13B\3B\3B\3C\3C\5C\u08c9\nC\3C\5C\u08cc\nC\3C\3C\3C\3C\3C\7C\u08d3"+
		"\nC\fC\16C\u08d6\13C\5C\u08d8\nC\3C\5C\u08db\nC\3D\3D\3D\3D\3D\3D\3D\3"+
		"D\3D\5D\u08e6\nD\3D\5D\u08e9\nD\3D\3D\5D\u08ed\nD\3D\3D\3E\3E\3E\3E\5"+
		"E\u08f5\nE\3E\5E\u08f8\nE\3E\3E\3E\5E\u08fd\nE\3E\3E\3E\3E\3E\3E\5E\u0905"+
		"\nE\3E\3E\3E\3E\5E\u090b\nE\3E\3E\5E\u090f\nE\3F\3F\5F\u0913\nF\3F\7F"+
		"\u0916\nF\fF\16F\u0919\13F\3F\3F\5F\u091d\nF\3F\3F\3F\3F\3F\5F\u0924\n"+
		"F\3F\3F\5F\u0928\nF\3F\3F\3F\3F\3F\3F\3F\7F\u0931\nF\fF\16F\u0934\13F"+
		"\3F\3F\3F\3F\3F\5F\u093b\nF\3F\5F\u093e\nF\3F\3F\7F\u0942\nF\fF\16F\u0945"+
		"\13F\3F\3F\3F\5F\u094a\nF\5F\u094c\nF\3F\3F\3F\5F\u0951\nF\3F\5F\u0954"+
		"\nF\3F\3F\7F\u0958\nF\fF\16F\u095b\13F\3F\3F\3F\5F\u0960\nF\5F\u0962\n"+
		"F\3F\3F\5F\u0966\nF\3F\5F\u0969\nF\3F\5F\u096c\nF\3F\3F\7F\u0970\nF\f"+
		"F\16F\u0973\13F\3F\3F\3F\5F\u0978\nF\3F\5F\u097b\nF\3F\3F\7F\u097f\nF"+
		"\fF\16F\u0982\13F\3F\3F\3F\5F\u0987\nF\5F\u0989\nF\3F\3F\3F\5F\u098e\n"+
		"F\3F\3F\3F\3F\3F\3F\5F\u0996\nF\5F\u0998\nF\3F\3F\3F\3F\3F\3F\3F\5F\u09a1"+
		"\nF\3F\3F\3F\5F\u09a6\nF\3F\3F\3F\3F\3F\3F\5F\u09ae\nF\3F\3F\5F\u09b2"+
		"\nF\3F\3F\3F\3F\3F\3F\5F\u09ba\nF\3F\3F\3F\3F\3F\3F\3F\3F\5F\u09c4\nF"+
		"\3F\3F\3F\5F\u09c9\nF\3F\3F\3F\3F\3F\5F\u09d0\nF\3F\3F\5F\u09d4\nF\3F"+
		"\3F\5F\u09d8\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F"+
		"\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u09f8\nF\3F\3F\5F\u09fc\nF\3F"+
		"\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0a08\nF\3F\5F\u0a0b\nF\3F\3F\3F\3F\3F"+
		"\3F\3F\5F\u0a14\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\7F\u0a23\nF"+
		"\fF\16F\u0a26\13F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0a31\nF\3F\3F\3F\3F\3"+
		"F\5F\u0a38\nF\3F\3F\3F\3F\3F\5F\u0a3f\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3"+
		"F\3F\7F\u0a4c\nF\fF\16F\u0a4f\13F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0a5b"+
		"\nF\3F\3F\3F\3F\5F\u0a61\nF\3F\3F\3F\3F\5F\u0a67\nF\3F\3F\3F\3F\5F\u0a6d"+
		"\nF\3F\3F\3F\3F\5F\u0a73\nF\3F\3F\3F\3F\5F\u0a79\nF\3F\3F\3F\3F\5F\u0a7f"+
		"\nF\3G\3G\3G\5G\u0a84\nG\3G\3G\3H\3H\3H\5H\u0a8b\nH\3H\3H\3I\3I\3I\5I"+
		"\u0a92\nI\3I\3I\3I\3I\3I\5I\u0a99\nI\3I\3I\3I\5I\u0a9e\nI\3I\7I\u0aa1"+
		"\nI\fI\16I\u0aa4\13I\3J\3J\3J\3J\3J\3J\3J\3J\3K\3K\3K\5K\u0ab1\nK\3K\3"+
		"K\3L\3L\3L\5L\u0ab8\nL\3L\3L\3M\3M\3M\5M\u0abf\nM\3M\3M\3N\3N\5N\u0ac5"+
		"\nN\3N\3N\5N\u0ac9\nN\3N\3N\5N\u0acd\nN\3O\3O\3O\3O\3O\5O\u0ad4\nO\3O"+
		"\5O\u0ad7\nO\3P\3P\3P\5P\u0adc\nP\3P\3P\3Q\3Q\3Q\5Q\u0ae3\nQ\3Q\3Q\3Q"+
		"\7Q\u0ae8\nQ\fQ\16Q\u0aeb\13Q\3Q\5Q\u0aee\nQ\3R\3R\3R\3R\3R\7R\u0af5\n"+
		"R\fR\16R\u0af8\13R\3S\3S\3S\3S\3T\3T\5T\u0b00\nT\3T\3T\3U\3U\3U\3U\3U"+
		"\5U\u0b09\nU\3U\5U\u0b0c\nU\3V\3V\5V\u0b10\nV\3W\3W\3W\3X\3X\3X\3X\5X"+
		"\u0b19\nX\3Y\3Y\5Y\u0b1d\nY\3Y\5Y\u0b20\nY\3Y\5Y\u0b23\nY\3Y\3Y\3Y\3Y"+
		"\5Y\u0b29\nY\3Y\5Y\u0b2c\nY\3Y\3Y\3Y\3Y\5Y\u0b32\nY\3Y\3Y\3Y\3Y\3Y\7Y"+
		"\u0b39\nY\fY\16Y\u0b3c\13Y\5Y\u0b3e\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\7Y\u0b47\n"+
		"Y\fY\16Y\u0b4a\13Y\5Y\u0b4c\nY\3Z\3Z\3Z\5Z\u0b51\nZ\3Z\5Z\u0b54\nZ\3Z"+
		"\3Z\3Z\5Z\u0b59\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b63\nZ\3Z\3Z\3Z\5Z\u0b68"+
		"\nZ\3Z\3Z\6Z\u0b6c\nZ\rZ\16Z\u0b6d\5Z\u0b70\nZ\3Z\3Z\6Z\u0b74\nZ\rZ\16"+
		"Z\u0b75\5Z\u0b78\nZ\3Z\3Z\3Z\3Z\5Z\u0b7e\nZ\3Z\3Z\3Z\3Z\7Z\u0b84\nZ\f"+
		"Z\16Z\u0b87\13Z\3Z\3Z\5Z\u0b8b\nZ\3Z\3Z\3Z\3Z\7Z\u0b91\nZ\fZ\16Z\u0b94"+
		"\13Z\5Z\u0b96\nZ\3[\3[\3[\5[\u0b9b\n[\3[\5[\u0b9e\n[\3[\3[\3[\5[\u0ba3"+
		"\n[\3[\3[\3[\3[\3[\3[\5[\u0bab\n[\3[\3[\3[\3[\3[\3[\5[\u0bb3\n[\3[\3["+
		"\3[\3[\5[\u0bb9\n[\3[\3[\3[\3[\7[\u0bbf\n[\f[\16[\u0bc2\13[\3[\3[\5[\u0bc6"+
		"\n[\3[\3[\3[\3[\7[\u0bcc\n[\f[\16[\u0bcf\13[\5[\u0bd1\n[\3\\\3\\\5\\\u0bd5"+
		"\n\\\3\\\5\\\u0bd8\n\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0be0\n\\\3\\\3\\\3"+
		"\\\3\\\5\\\u0be6\n\\\3\\\3\\\3\\\3\\\3\\\7\\\u0bed\n\\\f\\\16\\\u0bf0"+
		"\13\\\5\\\u0bf2\n\\\3]\3]\5]\u0bf6\n]\3]\3]\5]\u0bfa\n]\3]\3]\6]\u0bfe"+
		"\n]\r]\16]\u0bff\3]\3]\5]\u0c04\n]\3]\3]\5]\u0c08\n]\5]\u0c0a\n]\3]\5"+
		"]\u0c0d\n]\3]\5]\u0c10\n]\3]\5]\u0c13\n]\3]\3]\6]\u0c17\n]\r]\16]\u0c18"+
		"\3]\3]\5]\u0c1d\n]\3]\5]\u0c20\n]\3]\5]\u0c23\n]\3]\5]\u0c26\n]\3]\5]"+
		"\u0c29\n]\5]\u0c2b\n]\3^\3^\5^\u0c2f\n^\3_\3_\3_\3_\5_\u0c35\n_\3_\3_"+
		"\3_\3_\5_\u0c3b\n_\3_\7_\u0c3e\n_\f_\16_\u0c41\13_\5_\u0c43\n_\3`\3`\3"+
		"`\3`\5`\u0c49\n`\3a\3a\5a\u0c4d\na\3b\3b\3b\3b\3b\3b\5b\u0c55\nb\3c\3"+
		"c\5c\u0c59\nc\3c\5c\u0c5c\nc\3c\5c\u0c5f\nc\3c\3c\3c\3c\3c\3c\3c\5c\u0c68"+
		"\nc\3c\3c\5c\u0c6c\nc\3c\5c\u0c6f\nc\3c\3c\5c\u0c73\nc\3d\3d\5d\u0c77"+
		"\nd\3d\5d\u0c7a\nd\3d\5d\u0c7d\nd\3d\3d\3d\5d\u0c82\nd\3d\3d\3d\3d\5d"+
		"\u0c88\nd\7d\u0c8a\nd\fd\16d\u0c8d\13d\3d\3d\3d\3d\3d\3d\3d\5d\u0c96\n"+
		"d\3d\3d\3d\3d\5d\u0c9c\nd\7d\u0c9e\nd\fd\16d\u0ca1\13d\3d\3d\3d\5d\u0ca6"+
		"\nd\3d\3d\5d\u0caa\nd\3e\3e\3e\3e\5e\u0cb0\ne\3e\5e\u0cb3\ne\3f\3f\3f"+
		"\3f\3f\3f\3f\3f\3f\3f\5f\u0cbf\nf\3f\3f\5f\u0cc3\nf\3f\3f\5f\u0cc7\nf"+
		"\3g\3g\3g\3g\3g\3g\5g\u0ccf\ng\3g\3g\5g\u0cd3\ng\3h\3h\3h\3h\3i\3i\5i"+
		"\u0cdb\ni\3i\5i\u0cde\ni\3i\3i\5i\u0ce2\ni\3i\5i\u0ce5\ni\3i\3i\3i\3i"+
		"\7i\u0ceb\ni\fi\16i\u0cee\13i\3i\3i\5i\u0cf2\ni\3i\5i\u0cf5\ni\3i\5i\u0cf8"+
		"\ni\3j\3j\5j\u0cfc\nj\3j\5j\u0cff\nj\3j\3j\3j\3j\3j\7j\u0d06\nj\fj\16"+
		"j\u0d09\13j\3j\3j\5j\u0d0d\nj\3k\3k\3k\3k\3k\7k\u0d14\nk\fk\16k\u0d17"+
		"\13k\3l\3l\5l\u0d1b\nl\3m\3m\3m\7m\u0d20\nm\fm\16m\u0d23\13m\3n\3n\7n"+
		"\u0d27\nn\fn\16n\u0d2a\13n\3n\3n\3n\7n\u0d2f\nn\fn\16n\u0d32\13n\3n\3"+
		"n\5n\u0d36\nn\3o\3o\3o\3o\3o\3o\5o\u0d3e\no\3o\5o\u0d41\no\3o\5o\u0d44"+
		"\no\3o\3o\3o\7o\u0d49\no\fo\16o\u0d4c\13o\5o\u0d4e\no\3o\3o\3o\3o\3o\5"+
		"o\u0d55\no\3o\5o\u0d58\no\3o\3o\3o\3o\3o\3o\5o\u0d60\no\3p\3p\3p\3p\5"+
		"p\u0d66\np\3p\3p\3p\3p\3q\3q\3q\3q\3q\5q\u0d71\nq\3r\5r\u0d74\nr\3r\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\5r\u0d7f\nr\3r\3r\3r\3r\5r\u0d85\nr\3r\3r\5r\u0d89"+
		"\nr\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0d94\nr\3r\3r\3r\5r\u0d99\nr\5r\u0d9b"+
		"\nr\3r\3r\5r\u0d9f\nr\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0da9\ns\3t\3t\3t\3t"+
		"\3t\3t\3t\3t\5t\u0db3\nt\3u\3u\7u\u0db7\nu\fu\16u\u0dba\13u\3u\3u\5u\u0dbe"+
		"\nu\3u\5u\u0dc1\nu\3u\5u\u0dc4\nu\3u\5u\u0dc7\nu\3u\5u\u0dca\nu\3u\5u"+
		"\u0dcd\nu\3u\5u\u0dd0\nu\3u\3u\7u\u0dd4\nu\fu\16u\u0dd7\13u\3u\3u\5u\u0ddb"+
		"\nu\3u\5u\u0dde\nu\3u\5u\u0de1\nu\3u\5u\u0de4\nu\3u\5u\u0de7\nu\3u\5u"+
		"\u0dea\nu\3u\5u\u0ded\nu\5u\u0def\nu\3v\3v\7v\u0df3\nv\fv\16v\u0df6\13"+
		"v\3v\3v\5v\u0dfa\nv\3v\5v\u0dfd\nv\3v\5v\u0e00\nv\3v\5v\u0e03\nv\3v\5"+
		"v\u0e06\nv\3v\5v\u0e09\nv\3w\3w\5w\u0e0d\nw\3w\3w\3x\3x\5x\u0e13\nx\3"+
		"x\3x\5x\u0e17\nx\3y\3y\3y\3y\3y\3y\3y\3y\5y\u0e21\ny\3z\3z\5z\u0e25\n"+
		"z\3z\3z\7z\u0e29\nz\fz\16z\u0e2c\13z\3{\3{\3{\3{\3{\3{\5{\u0e34\n{\3{"+
		"\5{\u0e37\n{\3{\3{\5{\u0e3b\n{\3{\5{\u0e3e\n{\3{\3{\5{\u0e42\n{\3{\3{"+
		"\5{\u0e46\n{\3{\5{\u0e49\n{\5{\u0e4b\n{\3|\3|\3|\3|\7|\u0e51\n|\f|\16"+
		"|\u0e54\13|\3|\3|\3|\3|\3|\3|\3|\3|\3|\5|\u0e5f\n|\3|\3|\6|\u0e63\n|\r"+
		"|\16|\u0e64\5|\u0e67\n|\3|\3|\6|\u0e6b\n|\r|\16|\u0e6c\5|\u0e6f\n|\5|"+
		"\u0e71\n|\3}\3}\3}\3}\5}\u0e77\n}\3}\3}\3}\3}\3}\3}\5}\u0e7f\n}\3~\3~"+
		"\3~\3~\3~\3~\5~\u0e87\n~\3\177\3\177\5\177\u0e8b\n\177\3\177\3\177\5\177"+
		"\u0e8f\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u0e96\n\u0080"+
		"\f\u0080\16\u0080\u0e99\13\u0080\3\u0080\3\u0080\5\u0080\u0e9d\n\u0080"+
		"\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082\u0eaf"+
		"\n\u0082\f\u0082\16\u0082\u0eb2\13\u0082\3\u0083\3\u0083\5\u0083\u0eb6"+
		"\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0ebc\n\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0ec3\n\u0084\3\u0085\3\u0085"+
		"\3\u0085\5\u0085\u0ec8\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\7\u0086\u0ecf\n\u0086\f\u0086\16\u0086\u0ed2\13\u0086\5\u0086\u0ed4\n"+
		"\u0086\3\u0087\3\u0087\5\u0087\u0ed8\n\u0087\3\u0088\3\u0088\5\u0088\u0edc"+
		"\n\u0088\3\u0088\3\u0088\5\u0088\u0ee0\n\u0088\3\u0088\5\u0088\u0ee3\n"+
		"\u0088\3\u0088\5\u0088\u0ee6\n\u0088\3\u0088\5\u0088\u0ee9\n\u0088\3\u0089"+
		"\3\u0089\5\u0089\u0eed\n\u0089\3\u0089\3\u0089\5\u0089\u0ef1\n\u0089\3"+
		"\u0089\5\u0089\u0ef4\n\u0089\3\u0089\5\u0089\u0ef7\n\u0089\3\u0089\5\u0089"+
		"\u0efa\n\u0089\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b\u0f01\n"+
		"\u008b\3\u008b\3\u008b\5\u008b\u0f05\n\u008b\3\u008b\3\u008b\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d"+
		"\u0f12\n\u008d\f\u008d\16\u008d\u0f15\13\u008d\3\u008e\3\u008e\3\u008e"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\5\u0090\u0f21"+
		"\n\u0090\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090\u0f27\n\u0090\f\u0090"+
		"\16\u0090\u0f2a\13\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u0f33\n\u0091\3\u0092\3\u0092\5\u0092\u0f37\n\u0092\3"+
		"\u0092\5\u0092\u0f3a\n\u0092\3\u0092\3\u0092\3\u0093\3\u0093\5\u0093\u0f40"+
		"\n\u0093\3\u0093\5\u0093\u0f43\n\u0093\3\u0093\5\u0093\u0f46\n\u0093\3"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0f4f\n"+
		"\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u0f58\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096"+
		"\u0f60\n\u0096\f\u0096\16\u0096\u0f63\13\u0096\3\u0096\5\u0096\u0f66\n"+
		"\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0f6e\n"+
		"\u0097\f\u0097\16\u0097\u0f71\13\u0097\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\5\u0098\u0f7a\n\u0098\3\u0099\3\u0099\3\u0099"+
		"\3\u009a\3\u009a\3\u009a\5\u009a\u0f82\n\u009a\3\u009a\5\u009a\u0f85\n"+
		"\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b\u0f8c\n\u009b\f"+
		"\u009b\16\u009b\u0f8f\13\u009b\5\u009b\u0f91\n\u009b\3\u009b\3\u009b\5"+
		"\u009b\u0f95\n\u009b\3\u009b\7\u009b\u0f98\n\u009b\f\u009b\16\u009b\u0f9b"+
		"\13\u009b\3\u009b\5\u009b\u0f9e\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\7\u009c\u0fa5\n\u009c\f\u009c\16\u009c\u0fa8\13\u009c\5\u009c"+
		"\u0faa\n\u009c\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\7\u009f\u0fc7\n\u009f\f\u009f\16\u009f\u0fca\13\u009f"+
		"\5\u009f\u0fcc\n\u009f\3\u009f\5\u009f\u0fcf\n\u009f\3\u00a0\3\u00a0\3"+
		"\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u1005\n\u00a4\f\u00a4"+
		"\16\u00a4\u1008\13\u00a4\3\u00a4\3\u00a4\5\u00a4\u100c\n\u00a4\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u1028"+
		"\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u1036\n\u00a8\3\u00a9\3\u00a9"+
		"\3\u00a9\7\u00a9\u103b\n\u00a9\f\u00a9\16\u00a9\u103e\13\u00a9\3\u00a9"+
		"\5\u00a9\u1041\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u1047\n"+
		"\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u104f\n"+
		"\u00ab\5\u00ab\u1051\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u105c\n\u00ad\3\u00ae\3\u00ae\3"+
		"\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1066\n\u00af\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u106d\n\u00b0\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\5\u00b1\u1073\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b3\3\u00b3\5\u00b3\u107b\n\u00b3\3\u00b4\3\u00b4\3\u00b4\5"+
		"\u00b4\u1080\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u1086\n\u00b4"+
		"\f\u00b4\16\u00b4\u1089\13\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u108e"+
		"\n\u00b4\f\u00b4\16\u00b4\u1091\13\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4"+
		"\u1096\n\u00b4\f\u00b4\16\u00b4\u1099\13\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\7\u00b4\u109e\n\u00b4\f\u00b4\16\u00b4\u10a1\13\u00b4\3\u00b4\7\u00b4"+
		"\u10a4\n\u00b4\f\u00b4\16\u00b4\u10a7\13\u00b4\5\u00b4\u10a9\n\u00b4\3"+
		"\u00b4\3\u00b4\5\u00b4\u10ad\n\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u10b2"+
		"\n\u00b5\3\u00b5\6\u00b5\u10b5\n\u00b5\r\u00b5\16\u00b5\u10b6\3\u00b5"+
		"\3\u00b5\6\u00b5\u10bb\n\u00b5\r\u00b5\16\u00b5\u10bc\5\u00b5\u10bf\n"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\6\u00b6"+
		"\u10c8\n\u00b6\r\u00b6\16\u00b6\u10c9\3\u00b6\7\u00b6\u10cd\n\u00b6\f"+
		"\u00b6\16\u00b6\u10d0\13\u00b6\3\u00b6\3\u00b6\6\u00b6\u10d4\n\u00b6\r"+
		"\u00b6\16\u00b6\u10d5\5\u00b6\u10d8\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9"+
		"\5\u00b9\u10e6\n\u00b9\3\u00b9\3\u00b9\6\u00b9\u10ea\n\u00b9\r\u00b9\16"+
		"\u00b9\u10eb\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u10f1\n\u00b9\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u10f6\n\u00ba\3\u00ba\3\u00ba\6\u00ba\u10fa\n\u00ba\r"+
		"\u00ba\16\u00ba\u10fb\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u1103\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc"+
		"\u110b\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\6\u00bc\u1111\n\u00bc\r"+
		"\u00bc\16\u00bc\u1112\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1118\n\u00bc\3"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u111e\n\u00bd\3\u00bd\5\u00bd\u1121"+
		"\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u1129"+
		"\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1130\n\u00be"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1139"+
		"\n\u00bf\3\u00bf\5\u00bf\u113c\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\7\u00c1\u114b\n\u00c1\f\u00c1\16\u00c1\u114e\13\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1155\n\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u115d\n\u00c2\3\u00c3\3\u00c3\5\u00c3"+
		"\u1161\n\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1168\n"+
		"\u00c4\3\u00c4\3\u00c4\6\u00c4\u116c\n\u00c4\r\u00c4\16\u00c4\u116d\3"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\6\u00c5\u1174\n\u00c5\r\u00c5\16\u00c5"+
		"\u1175\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u117d\n\u00c6\f"+
		"\u00c6\16\u00c6\u1180\13\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1185\n"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u118a\n\u00c6\f\u00c6\16\u00c6"+
		"\u118d\13\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1193\n\u00c6"+
		"\3\u00c6\7\u00c6\u1196\n\u00c6\f\u00c6\16\u00c6\u1199\13\u00c6\5\u00c6"+
		"\u119b\n\u00c6\5\u00c6\u119d\n\u00c6\3\u00c6\3\u00c6\6\u00c6\u11a1\n\u00c6"+
		"\r\u00c6\16\u00c6\u11a2\5\u00c6\u11a5\n\u00c6\3\u00c6\3\u00c6\7\u00c6"+
		"\u11a9\n\u00c6\f\u00c6\16\u00c6\u11ac\13\u00c6\5\u00c6\u11ae\n\u00c6\3"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11b5\n\u00c7\f\u00c7\16"+
		"\u00c7\u11b8\13\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11bd\n\u00c7\3"+
		"\u00c7\3\u00c7\3\u00c7\7\u00c7\u11c2\n\u00c7\f\u00c7\16\u00c7\u11c5\13"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11cb\n\u00c7\3\u00c7\7"+
		"\u00c7\u11ce\n\u00c7\f\u00c7\16\u00c7\u11d1\13\u00c7\5\u00c7\u11d3\n\u00c7"+
		"\5\u00c7\u11d5\n\u00c7\3\u00c7\3\u00c7\6\u00c7\u11d9\n\u00c7\r\u00c7\16"+
		"\u00c7\u11da\5\u00c7\u11dd\n\u00c7\3\u00c7\3\u00c7\7\u00c7\u11e1\n\u00c7"+
		"\f\u00c7\16\u00c7\u11e4\13\u00c7\5\u00c7\u11e6\n\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u11eb\n\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u11f0\n"+
		"\u00c8\f\u00c8\16\u00c8\u11f3\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\7\u00c9\u11f9\n\u00c9\f\u00c9\16\u00c9\u11fc\13\u00c9\3\u00c9\3\u00c9"+
		"\5\u00c9\u1200\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9"+
		"\u1207\n\u00c9\f\u00c9\16\u00c9\u120a\13\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u1210\n\u00c9\3\u00c9\7\u00c9\u1213\n\u00c9\f\u00c9\16"+
		"\u00c9\u1216\13\u00c9\5\u00c9\u1218\n\u00c9\5\u00c9\u121a\n\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u1220\n\u00c9\f\u00c9\16\u00c9\u1223"+
		"\13\u00c9\5\u00c9\u1225\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u122d\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1232\n"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1237\n\u00c9\7\u00c9\u1239\n\u00c9"+
		"\f\u00c9\16\u00c9\u123c\13\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1241"+
		"\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1246\n\u00c9\7\u00c9\u1248\n"+
		"\u00c9\f\u00c9\16\u00c9\u124b\13\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u1250\n\u00c9\5\u00c9\u1252\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\7\u00ca\u125b\n\u00ca\f\u00ca\16\u00ca\u125e\13"+
		"\u00ca\5\u00ca\u1260\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u1265\n\u00ca"+
		"\f\u00ca\16\u00ca\u1268\13\u00ca\5\u00ca\u126a\n\u00ca\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u1274\n\u00cb"+
		"\f\u00cb\16\u00cb\u1277\13\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u127c"+
		"\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u1283\n\u00cc"+
		"\f\u00cc\16\u00cc\u1286\13\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd"+
		"\u128c\n\u00cd\f\u00cd\16\u00cd\u128f\13\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u1293\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u129a\n"+
		"\u00cd\f\u00cd\16\u00cd\u129d\13\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u12a2\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\7\u00cd\u12ab\n\u00cd\f\u00cd\16\u00cd\u12ae\13\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\7\u00cd\u12b4\n\u00cd\f\u00cd\16\u00cd\u12b7\13\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u12bc\n\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u12c1\n\u00cd\7\u00cd\u12c3\n\u00cd\f\u00cd\16\u00cd\u12c6\13"+
		"\u00cd\5\u00cd\u12c8\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\7\u00ce\u12d2\n\u00ce\f\u00ce\16\u00ce\u12d5\13"+
		"\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u12db\n\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\5\u00cf\u12e0\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\5\u00d1\u12ef\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u12f6\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u12fe\n\u00d1\3\u00d1\5\u00d1\u1301\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3"+
		"\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u130b\n\u00d2\3\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1315\n"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\5\u00d4\u131f\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u1329\n\u00d6\3\u00d7\3\u00d7\5\u00d7\u132d\n"+
		"\u00d7\3\u00d7\3\u00d7\5\u00d7\u1331\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u133b\n\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\5\u00d7\u1340\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u137a"+
		"\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u138c\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da\5\u00da"+
		"\u1394\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\7\u00da\u139e\n\u00da\f\u00da\16\u00da\u13a1\13\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\5\u00da\u13a7\n\u00da\5\u00da\u13a9\n\u00da\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u13b1\n\u00da\f"+
		"\u00da\16\u00da\u13b4\13\u00da\5\u00da\u13b6\n\u00da\3\u00db\3\u00db\3"+
		"\u00db\3\u00db\7\u00db\u13bc\n\u00db\f\u00db\16\u00db\u13bf\13\u00db\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u13c5\n\u00dc\3\u00dd\3\u00dd\5"+
		"\u00dd\u13c9\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\5\u00de\u13d0"+
		"\n\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u13d5\n\u00de\3\u00de\5\u00de"+
		"\u13d8\n\u00de\3\u00de\5\u00de\u13db\n\u00de\3\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u13e4\n\u00df\3\u00e0\3\u00e0\5"+
		"\u00e0\u13e8\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\7\u00e3\u1404\n\u00e3\f\u00e3\16\u00e3\u1407\13\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u140d\n\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1414\n\u00e3\3\u00e3\5\u00e3\u1417\n"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u1425\n\u00e3\f\u00e3\16\u00e3"+
		"\u1428\13\u00e3\5\u00e3\u142a\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1434\n\u00e4\3\u00e4\3\u00e4"+
		"\5\u00e4\u1438\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u143e\n"+
		"\u00e4\3\u00e4\5\u00e4\u1441\n\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1446"+
		"\n\u00e4\3\u00e4\3\u00e4\5\u00e4\u144a\n\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u1451\n\u00e4\3\u00e4\5\u00e4\u1454\n\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u145a\n\u00e4\3\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u1472\n\u00e4\3\u00e4\5\u00e4\u1475\n\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u1481\n\u00e4\3\u00e4\5\u00e4\u1484\n\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u148e\n"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1496\n"+
		"\u00e4\3\u00e4\3\u00e4\5\u00e4\u149a\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\5\u00e4\u14a1\n\u00e4\3\u00e4\5\u00e4\u14a4\n\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u14ab\n\u00e4\f\u00e4\16\u00e4"+
		"\u14ae\13\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u14b3\n\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u14b9\n\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u14c3\n\u00e4\5\u00e4"+
		"\u14c5\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u14cb\n\u00e5\3"+
		"\u00e5\5\u00e5\u14ce\n\u00e5\3\u00e5\5\u00e5\u14d1\n\u00e5\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6"+
		"\u14dd\n\u00e6\3\u00e6\5\u00e6\u14e0\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\5\u00e7\u14e6\n\u00e7\3\u00e8\5\u00e8\u14e9\n\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u14f1\n\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u14f9\n\u00e8\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\5\u00e9\u14ff\n\u00e9\3\u00e9\3\u00e9\5\u00e9\u1503\n"+
		"\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1511\n\u00ea\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u151b\n\u00ec"+
		"\f\u00ec\16\u00ec\u151e\13\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec"+
		"\u1524\n\u00ec\3\u00ec\5\u00ec\u1527\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ed\3\u00ed\5\u00ed\u152e\n\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u1533"+
		"\n\u00ed\f\u00ed\16\u00ed\u1536\13\u00ed\3\u00ee\3\u00ee\5\u00ee\u153a"+
		"\n\u00ee\3\u00ee\6\u00ee\u153d\n\u00ee\r\u00ee\16\u00ee\u153e\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u1548\n\u00ef"+
		"\f\u00ef\16\u00ef\u154b\13\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f1"+
		"\3\u00f1\3\u00f2\3\u00f2\5\u00f2\u1555\n\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\5\u00f2\u155b\n\u00f2\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1560\n"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u156d\n\u00f3\5\u00f3\u156f\n\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\5\u00f3\u1574\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u1578"+
		"\n\u00f3\3\u00f3\5\u00f3\u157b\n\u00f3\5\u00f3\u157d\n\u00f3\3\u00f4\3"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1584\n\u00f4\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\5\u00f5\u158b\n\u00f5\3\u00f5\5\u00f5\u158e\n\u00f5"+
		"\3\u00f5\5\u00f5\u1591\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5"+
		"\u1597\n\u00f5\3\u00f5\3\u00f5\5\u00f5\u159b\n\u00f5\3\u00f6\3\u00f6\3"+
		"\u00f6\3\u00f6\5\u00f6\u15a1\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5"+
		"\u00f7\u15a7\n\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u15b4\n\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\5\u00fa\u15b9\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7"+
		"\u00fa\u15bf\n\u00fa\f\u00fa\16\u00fa\u15c2\13\u00fa\5\u00fa\u15c4\n\u00fa"+
		"\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u15c9\n\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\5\u00fb\u15ce\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u15d4\n"+
		"\u00fb\f\u00fb\16\u00fb\u15d7\13\u00fb\5\u00fb\u15d9\n\u00fb\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u15e1\n\u00fc\3\u00fd\3"+
		"\u00fd\5\u00fd\u15e5\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u15f0\n\u00fd\f\u00fd\16\u00fd"+
		"\u15f3\13\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u15f8\n\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u1602"+
		"\n\u00fd\f\u00fd\16\u00fd\u1605\13\u00fd\5\u00fd\u1607\n\u00fd\3\u00fe"+
		"\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1610\n\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1615\n\u00ff\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\5\u0100\u161b\n\u0100\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102"+
		"\5\u0102\u1622\n\u0102\5\u0102\u1624\n\u0102\3\u0102\3\u0102\3\u0102\5"+
		"\u0102\u1629\n\u0102\5\u0102\u162b\n\u0102\3\u0103\3\u0103\5\u0103\u162f"+
		"\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1635\n\u0103\3\u0103"+
		"\5\u0103\u1638\n\u0103\3\u0103\5\u0103\u163b\n\u0103\3\u0104\3\u0104\3"+
		"\u0105\3\u0105\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1645\n\u0106\3"+
		"\u0107\3\u0107\5\u0107\u1649\n\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\6\u0109\u165b\n\u0109\r\u0109\16\u0109\u165c"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1664\n\u010a\5\u010a"+
		"\u1666\n\u010a\3\u010b\3\u010b\3\u010b\6\u010b\u166b\n\u010b\r\u010b\16"+
		"\u010b\u166c\5\u010b\u166f\n\u010b\3\u010c\3\u010c\5\u010c\u1673\n\u010c"+
		"\3\u010d\3\u010d\3\u010d\5\u010d\u1678\n\u010d\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u1683\n\u010e"+
		"\3\u010f\3\u010f\3\u010f\5\u010f\u1688\n\u010f\3\u0110\3\u0110\3\u0111"+
		"\3\u0111\5\u0111\u168e\n\u0111\3\u0112\5\u0112\u1691\n\u0112\3\u0112\3"+
		"\u0112\5\u0112\u1695\n\u0112\3\u0112\6\u0112\u1698\n\u0112\r\u0112\16"+
		"\u0112\u1699\3\u0112\5\u0112\u169d\n\u0112\3\u0112\3\u0112\5\u0112\u16a1"+
		"\n\u0112\3\u0112\3\u0112\5\u0112\u16a5\n\u0112\5\u0112\u16a7\n\u0112\3"+
		"\u0113\3\u0113\3\u0114\5\u0114\u16ac\n\u0114\3\u0114\3\u0114\3\u0115\5"+
		"\u0115\u16b1\n\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3"+
		"\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u16be\n\u0116\3\u0116\5"+
		"\u0116\u16c1\n\u0116\3\u0117\3\u0117\5\u0117\u16c5\n\u0117\3\u0117\5\u0117"+
		"\u16c8\n\u0117\3\u0117\5\u0117\u16cb\n\u0117\3\u0117\3\u0117\3\u0117\5"+
		"\u0117\u16d0\n\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u16d5\n\u0117\3\u0117"+
		"\3\u0117\3\u0117\5\u0117\u16da\n\u0117\3\u0117\5\u0117\u16dd\n\u0117\3"+
		"\u0117\3\u0117\3\u0117\5\u0117\u16e2\n\u0117\3\u0117\5\u0117\u16e5\n\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u16eb\n\u0117\3\u0117\5\u0117"+
		"\u16ee\n\u0117\3\u0117\3\u0117\5\u0117\u16f2\n\u0117\3\u0117\7\u0117\u16f5"+
		"\n\u0117\f\u0117\16\u0117\u16f8\13\u0117\3\u0117\3\u0117\5\u0117\u16fc"+
		"\n\u0117\3\u0117\7\u0117\u16ff\n\u0117\f\u0117\16\u0117\u1702\13\u0117"+
		"\3\u0117\3\u0117\5\u0117\u1706\n\u0117\3\u0117\5\u0117\u1709\n\u0117\3"+
		"\u0117\7\u0117\u170c\n\u0117\f\u0117\16\u0117\u170f\13\u0117\3\u0117\3"+
		"\u0117\5\u0117\u1713\n\u0117\3\u0117\7\u0117\u1716\n\u0117\f\u0117\16"+
		"\u0117\u1719\13\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u171e\n\u0117\3"+
		"\u0117\3\u0117\3\u0117\5\u0117\u1723\n\u0117\3\u0117\3\u0117\3\u0117\5"+
		"\u0117\u1728\n\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u172d\n\u0117\3\u0117"+
		"\5\u0117\u1730\n\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1735\n\u0117\3"+
		"\u0117\3\u0117\5\u0117\u1739\n\u0117\3\u0117\3\u0117\5\u0117\u173d\n\u0117"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u1743\n\u0118\f\u0118\16\u0118"+
		"\u1746\13\u0118\3\u0118\3\u0118\3\u0119\3\u0119\5\u0119\u174c\n\u0119"+
		"\3\u0119\3\u0119\5\u0119\u1750\n\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u1755\n\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u175a\n\u0119\3\u0119\3"+
		"\u0119\5\u0119\u175e\n\u0119\5\u0119\u1760\n\u0119\3\u0119\5\u0119\u1763"+
		"\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1773\n\u011c"+
		"\3\u011c\3\u011c\3\u011d\3\u011d\3\u011d\7\u011d\u177a\n\u011d\f\u011d"+
		"\16\u011d\u177d\13\u011d\3\u011e\3\u011e\3\u011e\7\u011e\u1782\n\u011e"+
		"\f\u011e\16\u011e\u1785\13\u011e\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f"+
		"\u178b\n\u011f\f\u011f\16\u011f\u178e\13\u011f\3\u011f\3\u011f\3\u0120"+
		"\3\u0120\3\u0120\7\u0120\u1795\n\u0120\f\u0120\16\u0120\u1798\13\u0120"+
		"\3\u0121\3\u0121\3\u0121\7\u0121\u179d\n\u0121\f\u0121\16\u0121\u17a0"+
		"\13\u0121\3\u0122\3\u0122\3\u0122\7\u0122\u17a5\n\u0122\f\u0122\16\u0122"+
		"\u17a8\13\u0122\3\u0123\3\u0123\3\u0123\7\u0123\u17ad\n\u0123\f\u0123"+
		"\16\u0123\u17b0\13\u0123\3\u0124\3\u0124\3\u0124\7\u0124\u17b5\n\u0124"+
		"\f\u0124\16\u0124\u17b8\13\u0124\3\u0125\3\u0125\5\u0125\u17bc\n\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u17c4\n\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u17c9\n\u0125\3\u0126\3\u0126\3\u0126"+
		"\5\u0126\u17ce\n\u0126\3\u0126\5\u0126\u17d1\n\u0126\3\u0126\3\u0126\3"+
		"\u0126\5\u0126\u17d6\n\u0126\3\u0126\5\u0126\u17d9\n\u0126\3\u0127\3\u0127"+
		"\5\u0127\u17dd\n\u0127\3\u0128\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u17ec"+
		"\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u17f3\n\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u17f8\n\u012a\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u17fd\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\6\u012b\u181c\n\u012b\r\u012b"+
		"\16\u012b\u181d\3\u012b\3\u012b\5\u012b\u1822\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\6\u012b\u1828\n\u012b\r\u012b\16\u012b\u1829\3\u012b"+
		"\3\u012b\5\u012b\u182e\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\5\u012b\u1837\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\5\u012b\u183f\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u1844\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u184c\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1851\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\5\u012b\u1856\n\u012b\5\u012b\u1858\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1861\n\u012b\3\u012b"+
		"\3\u012b\3\u012b\5\u012b\u1866\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\5\u012b\u186e\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u1873\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u187b\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u1883\n\u012b\3\u012b\5\u012b\u1886\n\u012b\3\u012b\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1890\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u18a2\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u18a8\n\u012b\3\u012b\3\u012b"+
		"\5\u012b\u18ac\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u18b2\n"+
		"\u012b\3\u012b\3\u012b\5\u012b\u18b6\n\u012b\3\u012b\3\u012b\5\u012b\u18ba"+
		"\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\7\u012d\u18c5\n\u012d\f\u012d\16\u012d\u18c8\13\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u18cf\n\u012d\3\u012e\3\u012e"+
		"\5\u012e\u18d3\n\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u18d8\n\u012f\3"+
		"\u012f\3\u012f\3\u012f\5\u012f\u18dd\n\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\5\u012f\u18e3\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u18e8\n\u012f"+
		"\3\u012f\3\u012f\5\u012f\u18ec\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u18f1\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u18f6\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u18fb\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\7\u012f\u1903\n\u012f\f\u012f\16\u012f\u1906\13\u012f\5"+
		"\u012f\u1908\n\u012f\3\u012f\3\u012f\5\u012f\u190c\n\u012f\3\u012f\3\u012f"+
		"\5\u012f\u1910\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u1917\n\u0130\3\u0130\3\u0130\5\u0130\u191b\n\u0130\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u1938"+
		"\n\u0130\3\u0131\3\u0131\3\u0131\5\u0131\u193d\n\u0131\3\u0131\3\u0131"+
		"\5\u0131\u1941\n\u0131\3\u0132\5\u0132\u1944\n\u0132\3\u0132\5\u0132\u1947"+
		"\n\u0132\3\u0132\5\u0132\u194a\n\u0132\3\u0132\5\u0132\u194d\n\u0132\3"+
		"\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0136\3\u0136"+
		"\5\u0136\u1958\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1966\n\u0138"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\7\u0139\u196d\n\u0139\f\u0139"+
		"\16\u0139\u1970\13\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a"+
		"\u1989\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\5\u013c\u1994\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\5\u013c\u199b\n\u013c\7\u013c\u199d\n\u013c\f\u013c\16\u013c"+
		"\u19a0\13\u013c\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u19a6\n\u013d"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u19ae\n\u013e"+
		"\3\u013e\3\u013e\3\u013e\5\u013e\u19b3\n\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\7\u013e\u19b9\n\u013e\f\u013e\16\u013e\u19bc\13\u013e\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u19c1\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u19cb\n\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\5\u013f\u19d8\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u19de\n"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u19e4\n\u013f\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u19f4\n\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u19fa\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\7\u013f\u1a03\n\u013f\f\u013f\16\u013f\u1a06"+
		"\13\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u1a16\n\u0140"+
		"\f\u0140\16\u0140\u1a19\13\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\6\u0140\u1a22\n\u0140\r\u0140\16\u0140\u1a23\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1a35\n\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u1a46\n\u0140\f\u0140"+
		"\16\u0140\u1a49\13\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\5\u0142\u1a5b\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\5\u0143\u1a64\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\5\u0144\u1a6d\n\u0144\3\u0145\3\u0145\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1a76\n\u0146\3\u0147\3\u0147"+
		"\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014c"+
		"\3\u014c\3\u014d\3\u014d\3\u014d\2\5\u027a\u027c\u027e\u014e\2\4\6\b\n"+
		"\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\"+
		"^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090"+
		"\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8"+
		"\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0"+
		"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8"+
		"\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0"+
		"\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108"+
		"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120"+
		"\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138"+
		"\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150"+
		"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168"+
		"\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180"+
		"\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198"+
		"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0"+
		"\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8"+
		"\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0"+
		"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8"+
		"\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210"+
		"\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228"+
		"\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240"+
		"\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258"+
		"\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270"+
		"\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288"+
		"\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\2\u008a\4\2\'\'\u0091"+
		"\u0091\4\2\u01fb\u01fb\u0201\u0201\5\2DD\u0098\u0098\u00ad\u00ad\5\2*"+
		"*\u0174\u0174\u01b4\u01b4\6\2**\u0194\u0194\u01f9\u01f9\u0243\u0243\4"+
		"\2\u01f0\u01f0\u0450\u0450\4\2MM\u0088\u0088\4\2\20\20\u0143\u0143\5\2"+
		",,SS\u00b0\u00b0\4\2\u01a2\u01a2\u0213\u0213\5\2\u01e8\u01e8\u026a\u026a"+
		"\u0272\u0272\4\2\u017b\u017b\u01ba\u01ba\4\2\u0155\u0155\u01c8\u01c8\4"+
		"\2\u0153\u0153\u01ab\u01ab\5\2NNRRxx\5\2**\u0185\u0185\u019f\u019f\5\2"+
		"**\u0181\u0181\u02f0\u02f0\4\2\u025d\u025d\u0280\u0280\4\2OOYY\5\2\u01a4"+
		"\u01a4\u020a\u020a\u0245\u0245\4\2DD\u0098\u0098\3\2\u0159\u015a\3\2\u0446"+
		"\u0447\4\2\u0450\u0450\u0458\u0458\5\2\u019e\u019e\u01c3\u01c3\u01f7\u01f7"+
		"\4\2**\u0446\u0447\t\2**\u0166\u0166\u0168\u0168\u0185\u0185\u019f\u019f"+
		"\u0221\u0221\u0458\u0458\4\2\u01f0\u01f0\u01fa\u01fa\3\2\u0447\u0448\4"+
		"\2\7\7\63\63\6\2**\u0174\u0174\u01b4\u01b4\u01b8\u01b8\4\2\33\33\37\37"+
		"\4\2\u01b9\u01b9\u0281\u0281\4\2\16\16\u00a7\u00a7\4\2\u00b8\u00b8\u0285"+
		"\u0285\4\2\26\26\u008b\u008b\5\2++JJff\4\2ff\u016a\u016a\4\2\u0161\u0161"+
		"\u019b\u019b\4\2bb\u023b\u023b\4\2++ff\4\2\b\b\61\61\4\2\u00b4\u00b4\u027d"+
		"\u027d\6\2\u019e\u019e\u01c3\u01c3\u01f6\u01f6\u0217\u0217\4\2\u019e\u019e"+
		"\u01f6\u01f6\4\2\17\17--\5\2AAMM\u00b2\u00b2\4\2##QQ\4\2^^\u008f\u008f"+
		"\4\2\b\b\61\62\3\2\u0252\u0253\4\2\u01a7\u01a7\u0241\u0241\4\2\u00da\u00da"+
		"\u01cb\u01cb\7\2gg\u01d0\u01d1\u01d3\u01d3\u01d7\u01df\u0223\u0223\6\2"+
		"\u01cd\u01ce\u01d2\u01d2\u01d4\u01d5\u0224\u0224\5\2hh\u01cc\u01cc\u01d6"+
		"\u01d6\4\2\u01bc\u01bc\u0254\u0254\4\2\u024e\u024e\u0250\u0250\4\2\u014d"+
		"\u014d\u0255\u0255\4\2XX\u0232\u0232\4\2\63\63\u0179\u0179\5\2  <<\u00ab"+
		"\u00ab\5\2~~\u00a4\u00a4\u01a5\u01a5\4\2dd\u00ae\u00ae\4\2\u015d\u015d"+
		"\u0246\u0246\4\2((\u027f\u027f\4\2nn\u01c8\u01c8\4\2\u0197\u0197\u021d"+
		"\u021d\4\2\u00a4\u00a4\u0298\u0298\6\2\u00c6\u00c6\u00c8\u00c8\u00ce\u00ce"+
		"\u025e\u025e\4\2\u0428\u0428\u0438\u0438\4\2\u014e\u014e\u0225\u0225\4"+
		"\2CCNN\b\2~~\u00a4\u00a4\u00a9\u00a9\u0190\u0190\u01a5\u01a5\u027f\u027f"+
		"\4\2\u01ef\u01ef\u025a\u025a\4\2\u018d\u018d\u0283\u0283\4\2~~\u01a5\u01a5"+
		"\5\2OOZZ\u01b2\u01b2\5\2\u01a7\u01a7\u01c8\u01c8\u0241\u0241\4\2\u025a"+
		"\u025a\u027e\u027e\4\2\u016c\u016c\u021c\u021c\b\2\u00da\u00da\u018a\u018a"+
		"\u018c\u018c\u01a6\u01a6\u0222\u0222\u0247\u0247\4\2-.==\5\2\u0197\u0197"+
		"\u020c\u020c\u034c\u034c\4\2\u01c0\u01c0\u026c\u026c\f\2\u015c\u015c\u0163"+
		"\u0163\u016e\u0170\u0176\u0176\u01e9\u01e9\u01f1\u01f1\u025f\u025f\u0266"+
		"\u0266\u031c\u031c\u03c2\u03c2\4\2$$\u00a1\u00a1\4\2pp\u03ba\u03ba\r\2"+
		"\u015c\u015c\u0163\u0163\u016e\u0170\u0176\u0176\u01e9\u01e9\u01f1\u01f1"+
		"\u0233\u0233\u025f\u025f\u0266\u0266\u031c\u031c\u03c2\u03c2\6\2\u02af"+
		"\u02af\u0450\u0450\u0458\u0458\u045a\u045a\3\2\u045c\u045d\6\2\u016b\u016b"+
		"\u02eb\u02f6\u0450\u0450\u0458\u0459\5\2\u0446\u0448\u0451\u0451\u0453"+
		"\u0453\4\2>>\u00aa\u00aa\4\2oo\u0454\u0454\7\2\32\32\u00d6\u00d8\u00df"+
		"\u00df\u00e1\u00e4\u01f4\u01f4\4\2\32\32\u00d7\u00d7\4\2\32\32\u00d6\u00d6"+
		"\3\2\u00bc\u00c7\5\2\u00af\u00af\u00bb\u00bb\u0244\u0244\4\2\u00cb\u00d0"+
		"\u019f\u019f\b\2\u00d1\u00d1\u00dc\u00dc\u00de\u00de\u00e0\u00e0\u00e7"+
		"\u00e7\u0151\u0152\6\2\u00d2\u00d5\u00da\u00db\u00dd\u00dd\u014f\u014f"+
		"\4\2\u0094\u0094\u00e5\u00e5\4\2\u01c0\u01c0\u02fb\u0303\4\2\u00da\u00da"+
		"\u01f4\u01f4\7\2\u00c0\u00c0\u00c6\u00c6\u00d1\u00d2\u00d4\u00d4\u01c0"+
		"\u01c0\4\2\u00af\u00af\u0244\u0244\4\2\u0130\u0131\u0137\u0137\4\2%%\u012e"+
		"\u0131\3\2\u013a\u013b\5\2\22\22\\\\\u00a8\u00a8\4\2\u00d6\u00d6\u00da"+
		"\u00da\4\2\u00d1\u00d2\u00d4\u00d4\5\2\17\17--\u03b8\u03b8\5\2\u0113\u0113"+
		"\u011f\u0120\u012a\u012a\5\2\u0114\u0116\u0126\u0129\u012b\u012d\4\2\u011c"+
		"\u011c\u011e\u011e\4\2\u011a\u011a\u011d\u011d\4\2\u0118\u0119\u0123\u0125"+
		"\4\2\u0080\u0080\u023b\u023b\4\2\u01a1\u01a1\u0214\u0214\4\2\u01ff\u01ff"+
		"\u020d\u020d\4\2mm\u043b\u043b\5\2>>\u00aa\u00aa\u0276\u0276\4\2\u0084"+
		"\u0084\u0090\u0090\5\2\b\b\u0146\u0146\u024a\u024a\5\2mm\u0434\u0435\u043b"+
		"\u043c\3\2\u0431\u0437\4\2\u00da\u00da\u02c2\u02ea\3\2\u02f7\u02fa\3\2"+
		"\u0298\u02a0\3\2\u0290\u0297\5\2\u00d1\u00d5\u00e2\u00e2\u00e5\u00e5 "+
		"\2$$\60\60::HHppttww\u00a1\u00a1\u00e7\u00e7\u0113\u0117\u011b\u011b\u011f"+
		"\u0120\u0126\u012d\u0141\u01a0\u01a2\u01b8\u01ba\u0213\u0215\u0233\u0235"+
		"\u025c\u025e\u0267\u0269\u0270\u0272\u027f\u0282\u0283\u0285\u028f\u02a2"+
		"\u02aa\u02af\u02b1\u02b3\u02b9\u02bb\u02c1\u02f0\u02f0\u031c\u031c\u03c2"+
		"\u03c2\24\2\'\'^^\u008f\u008f\u0091\u0091\u00d1\u00d3\u00d5\u00d5\u00f3"+
		"\u0112\u0117\u0117\u0139\u0139\u01b9\u01b9\u0281\u0281\u0290\u0297\u02bb"+
		"\u02bb\u02fb\u02fb\u02fe\u031b\u031d\u03c1\u03c3\u0427\u0437\u0437\2\u1f2b"+
		"\2\u029b\3\2\2\2\4\u02ae\3\2\2\2\6\u02c3\3\2\2\2\b\u02c5\3\2\2\2\n\u02ea"+
		"\3\2\2\2\f\u02f6\3\2\2\2\16\u0301\3\2\2\2\20\u0312\3\2\2\2\22\u0317\3"+
		"\2\2\2\24\u0323\3\2\2\2\26\u033e\3\2\2\2\30\u0347\3\2\2\2\32\u0349\3\2"+
		"\2\2\34\u0355\3\2\2\2\36\u0373\3\2\2\2 \u0397\3\2\2\2\"\u03ca\3\2\2\2"+
		"$\u03e4\3\2\2\2&\u0402\3\2\2\2(\u0463\3\2\2\2*\u0465\3\2\2\2,\u0477\3"+
		"\2\2\2.\u04b4\3\2\2\2\60\u04c7\3\2\2\2\62\u04fe\3\2\2\2\64\u0505\3\2\2"+
		"\2\66\u0507\3\2\2\28\u0533\3\2\2\2:\u0539\3\2\2\2<\u053b\3\2\2\2>\u0550"+
		"\3\2\2\2@\u0557\3\2\2\2B\u0559\3\2\2\2D\u0569\3\2\2\2F\u056c\3\2\2\2H"+
		"\u0571\3\2\2\2J\u058b\3\2\2\2L\u059b\3\2\2\2N\u059d\3\2\2\2P\u05ad\3\2"+
		"\2\2R\u05af\3\2\2\2T\u05eb\3\2\2\2V\u0632\3\2\2\2X\u0634\3\2\2\2Z\u0650"+
		"\3\2\2\2\\\u0658\3\2\2\2^\u0676\3\2\2\2`\u0709\3\2\2\2b\u070b\3\2\2\2"+
		"d\u070d\3\2\2\2f\u0710\3\2\2\2h\u075a\3\2\2\2j\u0771\3\2\2\2l\u0805\3"+
		"\2\2\2n\u080a\3\2\2\2p\u080c\3\2\2\2r\u0816\3\2\2\2t\u084e\3\2\2\2v\u0862"+
		"\3\2\2\2x\u0864\3\2\2\2z\u0887\3\2\2\2|\u0890\3\2\2\2~\u0897\3\2\2\2\u0080"+
		"\u08ae\3\2\2\2\u0082\u08b7\3\2\2\2\u0084\u08c6\3\2\2\2\u0086\u08dc\3\2"+
		"\2\2\u0088\u08f0\3\2\2\2\u008a\u0a7e\3\2\2\2\u008c\u0a80\3\2\2\2\u008e"+
		"\u0a87\3\2\2\2\u0090\u0a8e\3\2\2\2\u0092\u0aa5\3\2\2\2\u0094\u0aad\3\2"+
		"\2\2\u0096\u0ab4\3\2\2\2\u0098\u0abb\3\2\2\2\u009a\u0ac2\3\2\2\2\u009c"+
		"\u0ace\3\2\2\2\u009e\u0ad8\3\2\2\2\u00a0\u0adf\3\2\2\2\u00a2\u0aef\3\2"+
		"\2\2\u00a4\u0af9\3\2\2\2\u00a6\u0afd\3\2\2\2\u00a8\u0b03\3\2\2\2\u00aa"+
		"\u0b0f\3\2\2\2\u00ac\u0b11\3\2\2\2\u00ae\u0b18\3\2\2\2\u00b0\u0b1a\3\2"+
		"\2\2\u00b2\u0b4d\3\2\2\2\u00b4\u0b97\3\2\2\2\u00b6\u0bd2\3\2\2\2\u00b8"+
		"\u0c2a\3\2\2\2\u00ba\u0c2e\3\2\2\2\u00bc\u0c42\3\2\2\2\u00be\u0c44\3\2"+
		"\2\2\u00c0\u0c4c\3\2\2\2\u00c2\u0c54\3\2\2\2\u00c4\u0c56\3\2\2\2\u00c6"+
		"\u0c74\3\2\2\2\u00c8\u0cab\3\2\2\2\u00ca\u0cb4\3\2\2\2\u00cc\u0cc8\3\2"+
		"\2\2\u00ce\u0cd4\3\2\2\2\u00d0\u0cd8\3\2\2\2\u00d2\u0cf9\3\2\2\2\u00d4"+
		"\u0d0e\3\2\2\2\u00d6\u0d18\3\2\2\2\u00d8\u0d1c\3\2\2\2\u00da\u0d35\3\2"+
		"\2\2\u00dc\u0d5f\3\2\2\2\u00de\u0d61\3\2\2\2\u00e0\u0d70\3\2\2\2\u00e2"+
		"\u0d9e\3\2\2\2\u00e4\u0da8\3\2\2\2\u00e6\u0db2\3\2\2\2\u00e8\u0dee\3\2"+
		"\2\2\u00ea\u0df0\3\2\2\2\u00ec\u0e0a\3\2\2\2\u00ee\u0e10\3\2\2\2\u00f0"+
		"\u0e20\3\2\2\2\u00f2\u0e24\3\2\2\2\u00f4\u0e4a\3\2\2\2\u00f6\u0e70\3\2"+
		"\2\2\u00f8\u0e7e\3\2\2\2\u00fa\u0e86\3\2\2\2\u00fc\u0e8a\3\2\2\2\u00fe"+
		"\u0e90\3\2\2\2\u0100\u0e9e\3\2\2\2\u0102\u0ea1\3\2\2\2\u0104\u0eb3\3\2"+
		"\2\2\u0106\u0eb7\3\2\2\2\u0108\u0ec7\3\2\2\2\u010a\u0ec9\3\2\2\2\u010c"+
		"\u0ed5\3\2\2\2\u010e\u0ed9\3\2\2\2\u0110\u0eea\3\2\2\2\u0112\u0efb\3\2"+
		"\2\2\u0114\u0efe\3\2\2\2\u0116\u0f08\3\2\2\2\u0118\u0f0c\3\2\2\2\u011a"+
		"\u0f16\3\2\2\2\u011c\u0f19\3\2\2\2\u011e\u0f1e\3\2\2\2\u0120\u0f32\3\2"+
		"\2\2\u0122\u0f34\3\2\2\2\u0124\u0f45\3\2\2\2\u0126\u0f4e\3\2\2\2\u0128"+
		"\u0f57\3\2\2\2\u012a\u0f59\3\2\2\2\u012c\u0f67\3\2\2\2\u012e\u0f72\3\2"+
		"\2\2\u0130\u0f7b\3\2\2\2\u0132\u0f7e\3\2\2\2\u0134\u0f86\3\2\2\2\u0136"+
		"\u0f9f\3\2\2\2\u0138\u0fab\3\2\2\2\u013a\u0fae\3\2\2\2\u013c\u0fce\3\2"+
		"\2\2\u013e\u0fd0\3\2\2\2\u0140\u0fd2\3\2\2\2\u0142\u0fd4\3\2\2\2\u0144"+
		"\u0fd6\3\2\2\2\u0146\u100b\3\2\2\2\u0148\u100d\3\2\2\2\u014a\u1013\3\2"+
		"\2\2\u014c\u1027\3\2\2\2\u014e\u1035\3\2\2\2\u0150\u1040\3\2\2\2\u0152"+
		"\u1042\3\2\2\2\u0154\u1048\3\2\2\2\u0156\u1052\3\2\2\2\u0158\u1056\3\2"+
		"\2\2\u015a\u105d\3\2\2\2\u015c\u1061\3\2\2\2\u015e\u1067\3\2\2\2\u0160"+
		"\u106e\3\2\2\2\u0162\u1074\3\2\2\2\u0164\u107a\3\2\2\2\u0166\u107f\3\2"+
		"\2\2\u0168\u10ae\3\2\2\2\u016a\u10c3\3\2\2\2\u016c\u10dc\3\2\2\2\u016e"+
		"\u10df\3\2\2\2\u0170\u10e5\3\2\2\2\u0172\u10f5\3\2\2\2\u0174\u1104\3\2"+
		"\2\2\u0176\u110a\3\2\2\2\u0178\u1128\3\2\2\2\u017a\u112a\3\2\2\2\u017c"+
		"\u1131\3\2\2\2\u017e\u113d\3\2\2\2\u0180\u1143\3\2\2\2\u0182\u115c\3\2"+
		"\2\2\u0184\u1160\3\2\2\2\u0186\u1164\3\2\2\2\u0188\u116f\3\2\2\2\u018a"+
		"\u11ad\3\2\2\2\u018c\u11e5\3\2\2\2\u018e\u11e7\3\2\2\2\u0190\u1251\3\2"+
		"\2\2\u0192\u1269\3\2\2\2\u0194\u126b\3\2\2\2\u0196\u127d\3\2\2\2\u0198"+
		"\u12c7\3\2\2\2\u019a\u12c9\3\2\2\2\u019c\u12d6\3\2\2\2\u019e\u12e1\3\2"+
		"\2\2\u01a0\u1300\3\2\2\2\u01a2\u130a\3\2\2\2\u01a4\u1314\3\2\2\2\u01a6"+
		"\u1316\3\2\2\2\u01a8\u1320\3\2\2\2\u01aa\u1323\3\2\2\2\u01ac\u1379\3\2"+
		"\2\2\u01ae\u138b\3\2\2\2\u01b0\u138d\3\2\2\2\u01b2\u1391\3\2\2\2\u01b4"+
		"\u13b7\3\2\2\2\u01b6\u13c0\3\2\2\2\u01b8\u13c6\3\2\2\2\u01ba\u13cd\3\2"+
		"\2\2\u01bc\u13e3\3\2\2\2\u01be\u13e5\3\2\2\2\u01c0\u13f0\3\2\2\2\u01c2"+
		"\u13f6\3\2\2\2\u01c4\u1429\3\2\2\2\u01c6\u14c4\3\2\2\2\u01c8\u14d0\3\2"+
		"\2\2\u01ca\u14df\3\2\2\2\u01cc\u14e5\3\2\2\2\u01ce\u14f8\3\2\2\2\u01d0"+
		"\u1502\3\2\2\2\u01d2\u1510\3\2\2\2\u01d4\u1512\3\2\2\2\u01d6\u1515\3\2"+
		"\2\2\u01d8\u152b\3\2\2\2\u01da\u1537\3\2\2\2\u01dc\u1540\3\2\2\2\u01de"+
		"\u154c\3\2\2\2\u01e0\u1550\3\2\2\2\u01e2\u1552\3\2\2\2\u01e4\u157c\3\2"+
		"\2\2\u01e6\u1583\3\2\2\2\u01e8\u1585\3\2\2\2\u01ea\u159c\3\2\2\2\u01ec"+
		"\u15a2\3\2\2\2\u01ee\u15aa\3\2\2\2\u01f0\u15ad\3\2\2\2\u01f2\u15b0\3\2"+
		"\2\2\u01f4\u15c5\3\2\2\2\u01f6\u15da\3\2\2\2\u01f8\u15e2\3\2\2\2\u01fa"+
		"\u1608\3\2\2\2\u01fc\u1614\3\2\2\2\u01fe\u1616\3\2\2\2\u0200\u161c\3\2"+
		"\2\2\u0202\u162a\3\2\2\2\u0204\u1637\3\2\2\2\u0206\u163c\3\2\2\2\u0208"+
		"\u163e\3\2\2\2\u020a\u1644\3\2\2\2\u020c\u1648\3\2\2\2\u020e\u164a\3\2"+
		"\2\2\u0210\u164c\3\2\2\2\u0212\u165e\3\2\2\2\u0214\u166e\3\2\2\2\u0216"+
		"\u1672\3\2\2\2\u0218\u1677\3\2\2\2\u021a\u1682\3\2\2\2\u021c\u1687\3\2"+
		"\2\2\u021e\u1689\3\2\2\2\u0220\u168d\3\2\2\2\u0222\u16a6\3\2\2\2\u0224"+
		"\u16a8\3\2\2\2\u0226\u16ab\3\2\2\2\u0228\u16b0\3\2\2\2\u022a\u16c0\3\2"+
		"\2\2\u022c\u173c\3\2\2\2\u022e\u173e\3\2\2\2\u0230\u175f\3\2\2\2\u0232"+
		"\u1764\3\2\2\2\u0234\u1768\3\2\2\2\u0236\u176e\3\2\2\2\u0238\u1776\3\2"+
		"\2\2\u023a\u177e\3\2\2\2\u023c\u1786\3\2\2\2\u023e\u1791\3\2\2\2\u0240"+
		"\u1799\3\2\2\2\u0242\u17a1\3\2\2\2\u0244\u17a9\3\2\2\2\u0246\u17b1\3\2"+
		"\2\2\u0248\u17c3\3\2\2\2\u024a\u17d8\3\2\2\2\u024c\u17dc\3\2\2\2\u024e"+
		"\u17de\3\2\2\2\u0250\u17e1\3\2\2\2\u0252\u17f7\3\2\2\2\u0254\u18b9\3\2"+
		"\2\2\u0256\u18bb\3\2\2\2\u0258\u18ce\3\2\2\2\u025a\u18d0\3\2\2\2\u025c"+
		"\u190f\3\2\2\2\u025e\u1937\3\2\2\2\u0260\u1939\3\2\2\2\u0262\u1943\3\2"+
		"\2\2\u0264\u194e\3\2\2\2\u0266\u1950\3\2\2\2\u0268\u1953\3\2\2\2\u026a"+
		"\u1957\3\2\2\2\u026c\u1959\3\2\2\2\u026e\u1965\3\2\2\2\u0270\u1967\3\2"+
		"\2\2\u0272\u1988\3\2\2\2\u0274\u198a\3\2\2\2\u0276\u1993\3\2\2\2\u0278"+
		"\u19a5\3\2\2\2\u027a\u19b2\3\2\2\2\u027c\u19bd\3\2\2\2\u027e\u1a34\3\2"+
		"\2\2\u0280\u1a4a\3\2\2\2\u0282\u1a5a\3\2\2\2\u0284\u1a63\3\2\2\2\u0286"+
		"\u1a6c\3\2\2\2\u0288\u1a6e\3\2\2\2\u028a\u1a75\3\2\2\2\u028c\u1a77\3\2"+
		"\2\2\u028e\u1a79\3\2\2\2\u0290\u1a7b\3\2\2\2\u0292\u1a7d\3\2\2\2\u0294"+
		"\u1a7f\3\2\2\2\u0296\u1a81\3\2\2\2\u0298\u1a83\3\2\2\2\u029a\u029c\5\4"+
		"\3\2\u029b\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029f\3\2\2\2\u029d"+
		"\u029e\7\u0435\2\2\u029e\u02a0\7\u0435\2\2\u029f\u029d\3\2\2\2\u029f\u02a0"+
		"\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a2\7\2\2\3\u02a2\3\3\2\2\2\u02a3"+
		"\u02a6\5\6\4\2\u02a4\u02a5\7\u0435\2\2\u02a5\u02a7\7\u0435\2\2\u02a6\u02a4"+
		"\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2\u02a8\u02aa\7\u0444\2"+
		"\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02ad"+
		"\5\b\5\2\u02ac\u02a3\3\2\2\2\u02ac\u02ab\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae"+
		"\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02ba\3\2\2\2\u02b0\u02ae\3\2"+
		"\2\2\u02b1\u02b7\5\6\4\2\u02b2\u02b3\7\u0435\2\2\u02b3\u02b5\7\u0435\2"+
		"\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b8"+
		"\7\u0444\2\2\u02b7\u02b4\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02bb\3\2\2"+
		"\2\u02b9\u02bb\5\b\5\2\u02ba\u02b1\3\2\2\2\u02ba\u02b9\3\2\2\2\u02bb\5"+
		"\3\2\2\2\u02bc\u02c4\5\n\6\2\u02bd\u02c4\5\f\7\2\u02be\u02c4\5\16\b\2"+
		"\u02bf\u02c4\5\20\t\2\u02c0\u02c4\5\22\n\2\u02c1\u02c4\5\26\f\2\u02c2"+
		"\u02c4\5\30\r\2\u02c3\u02bc\3\2\2\2\u02c3\u02bd\3\2\2\2\u02c3\u02be\3"+
		"\2\2\2\u02c3\u02bf\3\2\2\2\u02c3\u02c0\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c3"+
		"\u02c2\3\2\2\2\u02c4\7\3\2\2\2\u02c5\u02c6\7\u0444\2\2\u02c6\t\3\2\2\2"+
		"\u02c7\u02eb\5\32\16\2\u02c8\u02eb\5\34\17\2\u02c9\u02eb\5\36\20\2\u02ca"+
		"\u02eb\5 \21\2\u02cb\u02eb\5\"\22\2\u02cc\u02eb\5$\23\2\u02cd\u02eb\5"+
		"&\24\2\u02ce\u02eb\5(\25\2\u02cf\u02eb\5*\26\2\u02d0\u02eb\5,\27\2\u02d1"+
		"\u02eb\5.\30\2\u02d2\u02eb\5\60\31\2\u02d3\u02eb\5v<\2\u02d4\u02eb\5x"+
		"=\2\u02d5\u02eb\5z>\2\u02d6\u02eb\5|?\2\u02d7\u02eb\5~@\2\u02d8\u02eb"+
		"\5\u0080A\2\u02d9\u02eb\5\u0082B\2\u02da\u02eb\5\u0084C\2\u02db\u02eb"+
		"\5\u0086D\2\u02dc\u02eb\5\u0088E\2\u02dd\u02eb\5\u008cG\2\u02de\u02eb"+
		"\5\u008eH\2\u02df\u02eb\5\u0090I\2\u02e0\u02eb\5\u0092J\2\u02e1\u02eb"+
		"\5\u0094K\2\u02e2\u02eb\5\u0096L\2\u02e3\u02eb\5\u0098M\2\u02e4\u02eb"+
		"\5\u009aN\2\u02e5\u02eb\5\u009cO\2\u02e6\u02eb\5\u009eP\2\u02e7\u02eb"+
		"\5\u00a0Q\2\u02e8\u02eb\5\u00a2R\2\u02e9\u02eb\5\u00a6T\2\u02ea\u02c7"+
		"\3\2\2\2\u02ea\u02c8\3\2\2\2\u02ea\u02c9\3\2\2\2\u02ea\u02ca\3\2\2\2\u02ea"+
		"\u02cb\3\2\2\2\u02ea\u02cc\3\2\2\2\u02ea\u02cd\3\2\2\2\u02ea\u02ce\3\2"+
		"\2\2\u02ea\u02cf\3\2\2\2\u02ea\u02d0\3\2\2\2\u02ea\u02d1\3\2\2\2\u02ea"+
		"\u02d2\3\2\2\2\u02ea\u02d3\3\2\2\2\u02ea\u02d4\3\2\2\2\u02ea\u02d5\3\2"+
		"\2\2\u02ea\u02d6\3\2\2\2\u02ea\u02d7\3\2\2\2\u02ea\u02d8\3\2\2\2\u02ea"+
		"\u02d9\3\2\2\2\u02ea\u02da\3\2\2\2\u02ea\u02db\3\2\2\2\u02ea\u02dc\3\2"+
		"\2\2\u02ea\u02dd\3\2\2\2\u02ea\u02de\3\2\2\2\u02ea\u02df\3\2\2\2\u02ea"+
		"\u02e0\3\2\2\2\u02ea\u02e1\3\2\2\2\u02ea\u02e2\3\2\2\2\u02ea\u02e3\3\2"+
		"\2\2\u02ea\u02e4\3\2\2\2\u02ea\u02e5\3\2\2\2\u02ea\u02e6\3\2\2\2\u02ea"+
		"\u02e7\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea\u02e9\3\2\2\2\u02eb\13\3\2\2"+
		"\2\u02ec\u02f7\5\u00b8]\2\u02ed\u02f7\5\u00b0Y\2\u02ee\u02f7\5\u00ba^"+
		"\2\u02ef\u02f7\5\u00aaV\2\u02f0\u02f7\5\u00b6\\\2\u02f1\u02f7\5\u00a8"+
		"U\2\u02f2\u02f7\5\u00b2Z\2\u02f3\u02f7\5\u00b4[\2\u02f4\u02f7\5\u00ac"+
		"W\2\u02f5\u02f7\5\u00aeX\2\u02f6\u02ec\3\2\2\2\u02f6\u02ed\3\2\2\2\u02f6"+
		"\u02ee\3\2\2\2\u02f6\u02ef\3\2\2\2\u02f6\u02f0\3\2\2\2\u02f6\u02f1\3\2"+
		"\2\2\u02f6\u02f2\3\2\2\2\u02f6\u02f3\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f6"+
		"\u02f5\3\2\2\2\u02f7\r\3\2\2\2\u02f8\u0302\5\u010a\u0086\2\u02f9\u0302"+
		"\5\u010c\u0087\2\u02fa\u0302\5\u010e\u0088\2\u02fb\u0302\5\u0110\u0089"+
		"\2\u02fc\u0302\5\u0112\u008a\2\u02fd\u0302\5\u0114\u008b\2\u02fe\u0302"+
		"\5\u0116\u008c\2\u02ff\u0302\5\u0118\u008d\2\u0300\u0302\5\u011a\u008e"+
		"\2\u0301\u02f8\3\2\2\2\u0301\u02f9\3\2\2\2\u0301\u02fa\3\2\2\2\u0301\u02fb"+
		"\3\2\2\2\u0301\u02fc\3\2\2\2\u0301\u02fd\3\2\2\2\u0301\u02fe\3\2\2\2\u0301"+
		"\u02ff\3\2\2\2\u0301\u0300\3\2\2\2\u0302\17\3\2\2\2\u0303\u0313\5\u012a"+
		"\u0096\2\u0304\u0313\5\u012c\u0097\2\u0305\u0313\5\u012e\u0098\2\u0306"+
		"\u0313\5\u0130\u0099\2\u0307\u0313\5\u0132\u009a\2\u0308\u0313\5\u0134"+
		"\u009b\2\u0309\u0313\5\u0136\u009c\2\u030a\u0313\5\u0138\u009d\2\u030b"+
		"\u0313\5\u013a\u009e\2\u030c\u0313\5\u0152\u00aa\2\u030d\u0313\5\u0154"+
		"\u00ab\2\u030e\u0313\5\u0156\u00ac\2\u030f\u0313\5\u0158\u00ad\2\u0310"+
		"\u0313\5\u015a\u00ae\2\u0311\u0313\5\u015c\u00af\2\u0312\u0303\3\2\2\2"+
		"\u0312\u0304\3\2\2\2\u0312\u0305\3\2\2\2\u0312\u0306\3\2\2\2\u0312\u0307"+
		"\3\2\2\2\u0312\u0308\3\2\2\2\u0312\u0309\3\2\2\2\u0312\u030a\3\2\2\2\u0312"+
		"\u030b\3\2\2\2\u0312\u030c\3\2\2\2\u0312\u030d\3\2\2\2\u0312\u030e\3\2"+
		"\2\2\u0312\u030f\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0311\3\2\2\2\u0313"+
		"\21\3\2\2\2\u0314\u0318\5\u015e\u00b0\2\u0315\u0318\5\u0160\u00b1\2\u0316"+
		"\u0318\5\u0162\u00b2\2\u0317\u0314\3\2\2\2\u0317\u0315\3\2\2\2\u0317\u0316"+
		"\3\2\2\2\u0318\23\3\2\2\2\u0319\u0324\5\u0166\u00b4\2\u031a\u0324\5\u0168"+
		"\u00b5\2\u031b\u0324\5\u016a\u00b6\2\u031c\u0324\5\u016e\u00b8\2\u031d"+
		"\u0324\5\u0170\u00b9\2\u031e\u0324\5\u0172\u00ba\2\u031f\u0324\5\u0176"+
		"\u00bc\2\u0320\u0324\5\u016c\u00b7\2\u0321\u0324\5\u0174\u00bb\2\u0322"+
		"\u0324\5\u0178\u00bd\2\u0323\u0319\3\2\2\2\u0323\u031a\3\2\2\2\u0323\u031b"+
		"\3\2\2\2\u0323\u031c\3\2\2\2\u0323\u031d\3\2\2\2\u0323\u031e\3\2\2\2\u0323"+
		"\u031f\3\2\2\2\u0323\u0320\3\2\2\2\u0323\u0321\3\2\2\2\u0323\u0322\3\2"+
		"\2\2\u0324\25\3\2\2\2\u0325\u033f\5\u018a\u00c6\2\u0326\u033f\5\u018c"+
		"\u00c7\2\u0327\u033f\5\u018e\u00c8\2\u0328\u033f\5\u0190\u00c9\2\u0329"+
		"\u033f\5\u0194\u00cb\2\u032a\u033f\5\u0196\u00cc\2\u032b\u033f\5\u0198"+
		"\u00cd\2\u032c\u033f\5\u019a\u00ce\2\u032d\u033f\5\u01b2\u00da\2\u032e"+
		"\u033f\5\u01b4\u00db\2\u032f\u033f\5\u01b6\u00dc\2\u0330\u033f\5\u01b8"+
		"\u00dd\2\u0331\u033f\5\u01ba\u00de\2\u0332\u033f\5\u01be\u00e0\2\u0333"+
		"\u033f\5\u01c0\u00e1\2\u0334\u033f\5\u01c2\u00e2\2\u0335\u033f\5\u01c4"+
		"\u00e3\2\u0336\u033f\5\u01c6\u00e4\2\u0337\u033f\5\u01d4\u00eb\2\u0338"+
		"\u033f\5\u01d6\u00ec\2\u0339\u033f\5\u01d8\u00ed\2\u033a\u033f\5\u01da"+
		"\u00ee\2\u033b\u033f\5\u01dc\u00ef\2\u033c\u033f\5\u01de\u00f0\2\u033d"+
		"\u033f\5\u01e0\u00f1\2\u033e\u0325\3\2\2\2\u033e\u0326\3\2\2\2\u033e\u0327"+
		"\3\2\2\2\u033e\u0328\3\2\2\2\u033e\u0329\3\2\2\2\u033e\u032a\3\2\2\2\u033e"+
		"\u032b\3\2\2\2\u033e\u032c\3\2\2\2\u033e\u032d\3\2\2\2\u033e\u032e\3\2"+
		"\2\2\u033e\u032f\3\2\2\2\u033e\u0330\3\2\2\2\u033e\u0331\3\2\2\2\u033e"+
		"\u0332\3\2\2\2\u033e\u0333\3\2\2\2\u033e\u0334\3\2\2\2\u033e\u0335\3\2"+
		"\2\2\u033e\u0336\3\2\2\2\u033e\u0337\3\2\2\2\u033e\u0338\3\2\2\2\u033e"+
		"\u0339\3\2\2\2\u033e\u033a\3\2\2\2\u033e\u033b\3\2\2\2\u033e\u033c\3\2"+
		"\2\2\u033e\u033d\3\2\2\2\u033f\27\3\2\2\2\u0340\u0348\5\u01ea\u00f6\2"+
		"\u0341\u0348\5\u01ec\u00f7\2\u0342\u0348\5\u01ee\u00f8\2\u0343\u0348\5"+
		"\u01f0\u00f9\2\u0344\u0348\5\u01f2\u00fa\2\u0345\u0348\5\u01f4\u00fb\2"+
		"\u0346\u0348\5\u01f8\u00fd\2\u0347\u0340\3\2\2\2\u0347\u0341\3\2\2\2\u0347"+
		"\u0342\3\2\2\2\u0347\u0343\3\2\2\2\u0347\u0344\3\2\2\2\u0347\u0345\3\2"+
		"\2\2\u0347\u0346\3\2\2\2\u0348\31\3\2\2\2\u0349\u034a\7\"\2\2\u034a\u034c"+
		"\t\2\2\2\u034b\u034d\5\u0250\u0129\2\u034c\u034b\3\2\2\2\u034c\u034d\3"+
		"\2\2\2\u034d\u034e\3\2\2\2\u034e\u0352\5\u0218\u010d\2\u034f\u0351\5\62"+
		"\32\2\u0350\u034f\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352"+
		"\u0353\3\2\2\2\u0353\33\3\2\2\2\u0354\u0352\3\2\2\2\u0355\u0357\7\"\2"+
		"\2\u0356\u0358\5\66\34\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358"+
		"\u0359\3\2\2\2\u0359\u035b\7\u0190\2\2\u035a\u035c\5\u0250\u0129\2\u035b"+
		"\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\5\u01fe"+
		"\u0100\2\u035e\u035f\7q\2\2\u035f\u0360\7\u023e\2\2\u0360\u0367\58\35"+
		"\2\u0361\u0362\7q\2\2\u0362\u0364\7\u0167\2\2\u0363\u0365\7m\2\2\u0364"+
		"\u0363\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\7\u0216"+
		"\2\2\u0367\u0361\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\3\2\2\2\u0369"+
		"\u036b\5@!\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036e\3\2\2"+
		"\2\u036c\u036d\7\u0164\2\2\u036d\u036f\7\u0450\2\2\u036e\u036c\3\2\2\2"+
		"\u036e\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371\7\u0182\2\2\u0371"+
		"\u0372\5\u0164\u00b3\2\u0372\35\3\2\2\2\u0373\u0375\7\"\2\2\u0374\u0376"+
		"\t\3\2\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377"+
		"\u0379\t\4\2\2\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\3\2"+
		"\2\2\u037a\u037b\7O\2\2\u037b\u037d\5\u0218\u010d\2\u037c\u037e\5B\"\2"+
		"\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380"+
		"\7q\2\2\u0380\u0381\5\u0200\u0101\2\u0381\u0385\5\u023c\u011f\2\u0382"+
		"\u0384\5D#\2\u0383\u0382\3\2\2\2\u0384\u0387\3\2\2\2\u0385\u0383\3\2\2"+
		"\2\u0385\u0386\3\2\2\2\u0386\u0394\3\2\2\2\u0387\u0385\3\2\2\2\u0388\u038a"+
		"\7\u0145\2\2\u0389\u038b\7\u0438\2\2\u038a\u0389\3\2\2\2\u038a\u038b\3"+
		"\2\2\2\u038b\u038c\3\2\2\2\u038c\u0393\t\5\2\2\u038d\u038f\7d\2\2\u038e"+
		"\u0390\7\u0438\2\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391"+
		"\3\2\2\2\u0391\u0393\t\6\2\2\u0392\u0388\3\2\2\2\u0392\u038d\3\2\2\2\u0393"+
		"\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395\37\3\2\2"+
		"\2\u0396\u0394\3\2\2\2\u0397\u0398\7\"\2\2\u0398\u0399\7\u01c9\2\2\u0399"+
		"\u039a\7H\2\2\u039a\u039b\5\u0218\u010d\2\u039b\u039c\7\7\2\2\u039c\u039d"+
		"\7\u0273\2\2\u039d\u03a3\7\u0450\2\2\u039e\u03a0\7\u01b3\2\2\u039f\u03a1"+
		"\7\u0438\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3\2\2"+
		"\2\u03a2\u03a4\5\u0220\u0111\2\u03a3\u039e\3\2\2\2\u03a3\u03a4\3\2\2\2"+
		"\u03a4\u03aa\3\2\2\2\u03a5\u03a7\7\u0274\2\2\u03a6\u03a8\7\u0438\2\2\u03a7"+
		"\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\5\u0220"+
		"\u0111\2\u03aa\u03a5\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03b1\3\2\2\2\u03ac"+
		"\u03ae\7\u0220\2\2\u03ad\u03af\7\u0438\2\2\u03ae\u03ad\3\2\2\2\u03ae\u03af"+
		"\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b2\5\u0220\u0111\2\u03b1\u03ac\3"+
		"\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b8\3\2\2\2\u03b3\u03b5\7\u01f8\2\2"+
		"\u03b4\u03b6\7\u0438\2\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6"+
		"\u03b7\3\2\2\2\u03b7\u03b9\5\u0218\u010d\2\u03b8\u03b3\3\2\2\2\u03b8\u03b9"+
		"\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03bc\7\u0282\2\2\u03bb\u03ba\3\2\2"+
		"\2\u03bb\u03bc\3\2\2\2\u03bc\u03c2\3\2\2\2\u03bd\u03bf\7\u0164\2\2\u03be"+
		"\u03c0\7\u0438\2\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1"+
		"\3\2\2\2\u03c1\u03c3\7\u0450\2\2\u03c2\u03bd\3\2\2\2\u03c2\u03c3\3\2\2"+
		"\2\u03c3\u03c4\3\2\2\2\u03c4\u03c6\7\u018a\2\2\u03c5\u03c7\7\u0438\2\2"+
		"\u03c6\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9"+
		"\5\u020e\u0108\2\u03c9!\3\2\2\2\u03ca\u03cc\7\"\2\2\u03cb\u03cd\5\66\34"+
		"\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf"+
		"\7~\2\2\u03cf\u03d0\5\u01fe\u0100\2\u03d0\u03d2\7\u0441\2\2\u03d1\u03d3"+
		"\5F$\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d8\3\2\2\2\u03d4"+
		"\u03d5\7\u0443\2\2\u03d5\u03d7\5F$\2\u03d6\u03d4\3\2\2\2\u03d7\u03da\3"+
		"\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03db\3\2\2\2\u03da"+
		"\u03d8\3\2\2\2\u03db\u03df\7\u0442\2\2\u03dc\u03de\5J&\2\u03dd\u03dc\3"+
		"\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0"+
		"\u03e2\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03e3\5\u0164\u00b3\2\u03e3#"+
		"\3\2\2\2\u03e4\u03e6\7\"\2\2\u03e5\u03e7\5\66\34\2\u03e6\u03e5\3\2\2\2"+
		"\u03e6\u03e7\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\7\u01a5\2\2\u03e9"+
		"\u03ea\5\u01fe\u0100\2\u03ea\u03ec\7\u0441\2\2\u03eb\u03ed\5H%\2\u03ec"+
		"\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03f2\3\2\2\2\u03ee\u03ef\7\u0443"+
		"\2\2\u03ef\u03f1\5H%\2\u03f0\u03ee\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0"+
		"\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5"+
		"\u03f6\7\u0442\2\2\u03f6\u03f7\7\u0235\2\2\u03f7\u03fb\5\u022c\u0117\2"+
		"\u03f8\u03fa\5J&\2\u03f9\u03f8\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03f9"+
		"\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u0400\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe"+
		"\u0401\5\u0164\u00b3\2\u03ff\u0401\5\u0174\u00bb\2\u0400\u03fe\3\2\2\2"+
		"\u0400\u03ff\3\2\2\2\u0401%\3\2\2\2\u0402\u0403\7\"\2\2\u0403\u0404\7"+
		"\u0240\2\2\u0404\u0405\5\u0218\u010d\2\u0405\u0406\7B\2\2\u0406\u0407"+
		"\7\u0177\2\2\u0407\u0408\7\u0287\2\2\u0408\u0409\t\7\2\2\u0409\u040a\7"+
		"\u0205\2\2\u040a\u040b\7\u0441\2\2\u040b\u0410\5L\'\2\u040c\u040d\7\u0443"+
		"\2\2\u040d\u040f\5L\'\2\u040e\u040c\3\2\2\2\u040f\u0412\3\2\2\2\u0410"+
		"\u040e\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u0410\3\2"+
		"\2\2\u0413\u0414\7\u0442\2\2\u0414\'\3\2\2\2\u0415\u0417\7\"\2\2\u0416"+
		"\u0418\7\u0269\2\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419"+
		"\3\2\2\2\u0419\u041b\7\u00a4\2\2\u041a\u041c\5\u0250\u0129\2\u041b\u041a"+
		"\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u0425\5\u0200\u0101"+
		"\2\u041e\u041f\7_\2\2\u041f\u0426\5\u0200\u0101\2\u0420\u0421\7\u0441"+
		"\2\2\u0421\u0422\7_\2\2\u0422\u0423\5\u0200\u0101\2\u0423\u0424\7\u0442"+
		"\2\2\u0424\u0426\3\2\2\2\u0425\u041e\3\2\2\2\u0425\u0420\3\2\2\2\u0426"+
		"\u0464\3\2\2\2\u0427\u0429\7\"\2\2\u0428\u042a\7\u0269\2\2\u0429\u0428"+
		"\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042d\7\u00a4\2"+
		"\2\u042c\u042e\5\u0250\u0129\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2\2\2"+
		"\u042e\u042f\3\2\2\2\u042f\u0431\5\u0200\u0101\2\u0430\u0432\5N(\2\u0431"+
		"\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u043d\3\2\2\2\u0433\u043a\5`"+
		"\61\2\u0434\u0436\7\u0443\2\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2"+
		"\u0436\u0437\3\2\2\2\u0437\u0439\5`\61\2\u0438\u0435\3\2\2\2\u0439\u043c"+
		"\3\2\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043e\3\2\2\2\u043c"+
		"\u043a\3\2\2\2\u043d\u0433\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3\2"+
		"\2\2\u043f\u0441\5f\64\2\u0440\u043f\3\2\2\2\u0440\u0441\3\2\2\2\u0441"+
		"\u0443\3\2\2\2\u0442\u0444\t\b\2\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2"+
		"\2\2\u0444\u0446\3\2\2\2\u0445\u0447\7\16\2\2\u0446\u0445\3\2\2\2\u0446"+
		"\u0447\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\5\u00b8]\2\u0449\u0464"+
		"\3\2\2\2\u044a\u044c\7\"\2\2\u044b\u044d\7\u0269\2\2\u044c\u044b\3\2\2"+
		"\2\u044c\u044d\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0450\7\u00a4\2\2\u044f"+
		"\u0451\5\u0250\u0129\2\u0450\u044f\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452"+
		"\3\2\2\2\u0452\u0453\5\u0200\u0101\2\u0453\u045e\5N(\2\u0454\u045b\5`"+
		"\61\2\u0455\u0457\7\u0443\2\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2\2\2"+
		"\u0457\u0458\3\2\2";
	private static final String _serializedATNSegment1 =
		"\2\u0458\u045a\5`\61\2\u0459\u0456\3\2\2\2\u045a\u045d\3\2\2\2\u045b\u0459"+
		"\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045f\3\2\2\2\u045d\u045b\3\2\2\2\u045e"+
		"\u0454\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461\3\2\2\2\u0460\u0462\5f"+
		"\64\2\u0461\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0464\3\2\2\2\u0463"+
		"\u0415\3\2\2\2\u0463\u0427\3\2\2\2\u0463\u044a\3\2\2\2\u0464)\3\2\2\2"+
		"\u0465\u0466\7\"\2\2\u0466\u0467\7\u0267\2\2\u0467\u0468\5\u0218\u010d"+
		"\2\u0468\u0469\7\7\2\2\u0469\u046a\7\u0178\2\2\u046a\u046e\7\u0450\2\2"+
		"\u046b\u046c\7\u019c\2\2\u046c\u046d\7\u0438\2\2\u046d\u046f\5\u0220\u0111"+
		"\2\u046e\u046b\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0475\3\2\2\2\u0470\u0472"+
		"\7\u018a\2\2\u0471\u0473\7\u0438\2\2\u0472\u0471\3\2\2\2\u0472\u0473\3"+
		"\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\5\u020e\u0108\2\u0475\u0470\3\2"+
		"\2\2\u0475\u0476\3\2\2\2\u0476+\3\2\2\2\u0477\u0478\7\"\2\2\u0478\u0479"+
		"\7\u0267\2\2\u0479\u047a\5\u0218\u010d\2\u047a\u047b\7\7\2\2\u047b\u047c"+
		"\7\u0178\2\2\u047c\u047d\7\u0450\2\2\u047d\u047e\7\u00b2\2\2\u047e\u047f"+
		"\7\u01c9\2\2\u047f\u0480\7H\2\2\u0480\u0486\5\u0218\u010d\2\u0481\u0483"+
		"\7\u0198\2\2\u0482\u0484\7\u0438\2\2\u0483\u0482\3\2\2\2\u0483\u0484\3"+
		"\2\2\2\u0484\u0485\3\2\2\2\u0485\u0487\5\u0220\u0111\2\u0486\u0481\3\2"+
		"\2\2\u0486\u0487\3\2\2\2\u0487\u048d\3\2\2\2\u0488\u048a\7\u01b3\2\2\u0489"+
		"\u048b\7\u0438\2\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c"+
		"\3\2\2\2\u048c\u048e\5\u0220\u0111\2\u048d\u0488\3\2\2\2\u048d\u048e\3"+
		"\2\2\2\u048e\u0494\3\2\2\2\u048f\u0491\7\u014a\2\2\u0490\u0492\7\u0438"+
		"\2\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493\3\2\2\2\u0493"+
		"\u0495\5\u0220\u0111\2\u0494\u048f\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u049b"+
		"\3\2\2\2\u0496\u0498\7\u01e3\2\2\u0497\u0499\7\u0438\2\2\u0498\u0497\3"+
		"\2\2\2\u0498\u0499\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c\5\u0220\u0111"+
		"\2\u049b\u0496\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u04a2\3\2\2\2\u049d\u049f"+
		"\7\u01f8\2\2\u049e\u04a0\7\u0438\2\2\u049f\u049e\3\2\2\2\u049f\u04a0\3"+
		"\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\5\u0218\u010d\2\u04a2\u049d\3\2"+
		"\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a5\3\2\2\2\u04a4\u04a6\7\u0282\2\2\u04a5"+
		"\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04ac\3\2\2\2\u04a7\u04a9\7\u0164"+
		"\2\2\u04a8\u04aa\7\u0438\2\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa"+
		"\u04ab\3\2\2\2\u04ab\u04ad\7\u0450\2\2\u04ac\u04a7\3\2\2\2\u04ac\u04ad"+
		"\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b0\7\u018a\2\2\u04af\u04b1\7\u0438"+
		"\2\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2"+
		"\u04b3\5\u020e\u0108\2\u04b3-\3\2\2\2\u04b4\u04b6\7\"\2\2\u04b5\u04b7"+
		"\5\66\34\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8\3\2\2\2"+
		"\u04b8\u04b9\7\u00a9\2\2\u04b9\u04ba\5\u01fe\u0100\2\u04ba\u04bb\t\t\2"+
		"\2\u04bb\u04bc\t\n\2\2\u04bc\u04bd\7q\2\2\u04bd\u04be\5\u0200\u0101\2"+
		"\u04be\u04bf\7@\2\2\u04bf\u04c0\7\64\2\2\u04c0\u04c3\7\u023a\2\2\u04c1"+
		"\u04c2\t\13\2\2\u04c2\u04c4\5\u01fe\u0100\2\u04c3\u04c1\3\2\2\2\u04c3"+
		"\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6\5\u0164\u00b3\2\u04c6/"+
		"\3\2\2\2\u04c7\u04ca\7\"\2\2\u04c8\u04c9\7v\2\2\u04c9\u04cb\7\u0088\2"+
		"\2\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cf\3\2\2\2\u04cc\u04cd"+
		"\7\u0145\2\2\u04cd\u04ce\7\u0438\2\2\u04ce\u04d0\t\f\2\2\u04cf\u04cc\3"+
		"\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04d3\5\66\34\2\u04d2"+
		"\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d7\3\2\2\2\u04d4\u04d5\7\u0099"+
		"\2\2\u04d5\u04d6\7\u023f\2\2\u04d6\u04d8\t\r\2\2\u04d7\u04d4\3\2\2\2\u04d7"+
		"\u04d8\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\7\u027f\2\2\u04da\u04df"+
		"\5\u01fe\u0100\2\u04db\u04dc\7\u0441\2\2\u04dc\u04dd\5\u0238\u011d\2\u04dd"+
		"\u04de\7\u0442\2\2\u04de\u04e0\3\2\2\2\u04df\u04db\3\2\2\2\u04df\u04e0"+
		"\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\7\16\2\2\u04e2\u04e9\5\u00b8"+
		"]\2\u04e3\u04e5\7\u00b8\2\2\u04e4\u04e6\t\16\2\2\u04e5\u04e4\3\2\2\2\u04e5"+
		"\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\7\33\2\2\u04e8\u04ea\7"+
		"s\2\2\u04e9\u04e3\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\61\3\2\2\2\u04eb\u04ed"+
		"\7*\2\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee"+
		"\u04f0\5\64\33\2\u04ef\u04f1\7\u0438\2\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1"+
		"\3\2\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f5\5\u020a\u0106\2\u04f3\u04f5\7"+
		"*\2\2\u04f4\u04f2\3\2\2\2\u04f4\u04f3\3\2\2\2\u04f5\u04ff\3\2\2\2\u04f6"+
		"\u04f8\7*\2\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04f9\3\2"+
		"\2\2\u04f9\u04fb\7\34\2\2\u04fa\u04fc\7\u0438\2\2\u04fb\u04fa\3\2\2\2"+
		"\u04fb\u04fc\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff\5\u020c\u0107\2\u04fe"+
		"\u04ec\3\2\2\2\u04fe\u04f7\3\2\2\2\u04ff\63\3\2\2\2\u0500\u0501\7\32\2"+
		"\2\u0501\u0506\7\u0094\2\2\u0502\u0506\7\u0321\2\2\u0503\u0504\7\u00d6"+
		"\2\2\u0504\u0506\7\u0094\2\2\u0505\u0500\3\2\2\2\u0505\u0502\3\2\2\2\u0505"+
		"\u0503\3\2\2\2\u0506\65\3\2\2\2\u0507\u0508\7\u017b\2\2\u0508\u050f\7"+
		"\u0438\2\2\u0509\u0510\5\u0206\u0104\2\u050a\u050d\7%\2\2\u050b\u050c"+
		"\7\u0441\2\2\u050c\u050e\7\u0442\2\2\u050d\u050b\3\2\2\2\u050d\u050e\3"+
		"\2\2\2\u050e\u0510\3\2\2\2\u050f\u0509\3\2\2\2\u050f\u050a\3\2\2\2\u0510"+
		"\67\3\2\2\2\u0511\u0512\7\u0147\2\2\u0512\u0516\5:\36\2\u0513\u0515\5"+
		"<\37\2\u0514\u0513\3\2\2\2\u0515\u0518\3\2\2\2\u0516\u0514\3\2\2\2\u0516"+
		"\u0517\3\2\2\2\u0517\u0534\3\2\2\2\u0518\u0516\3\2\2\2\u0519\u051c\7\u0192"+
		"\2\2\u051a\u051d\5\u021e\u0110\2\u051b\u051d\5\u027a\u013e\2\u051c\u051a"+
		"\3\2\2\2\u051c\u051b\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0527\5> \2\u051f"+
		"\u0520\7\u0256\2\2\u0520\u0524\5:\36\2\u0521\u0523\5<\37\2\u0522\u0521"+
		"\3\2\2\2\u0523\u0526\3\2\2\2\u0524\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525"+
		"\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0527\u051f\3\2\2\2\u0527\u0528\3\2"+
		"\2\2\u0528\u0531\3\2\2\2\u0529\u052a\7\u0189\2\2\u052a\u052e\5:\36\2\u052b"+
		"\u052d\5<\37\2\u052c\u052b\3\2\2\2\u052d\u0530\3\2\2\2\u052e\u052c\3\2"+
		"\2\2\u052e\u052f\3\2\2\2\u052f\u0532\3\2\2\2\u0530\u052e\3\2\2\2\u0531"+
		"\u0529\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0534\3\2\2\2\u0533\u0511\3\2"+
		"\2\2\u0533\u0519\3\2\2\2\u05349\3\2\2\2\u0535\u053a\7\u0130\2\2\u0536"+
		"\u053a\5\u0222\u0112\2\u0537\u053a\5\u021e\u0110\2\u0538\u053a\5\u027a"+
		"\u013e\2\u0539\u0535\3\2\2\2\u0539\u0536\3\2\2\2\u0539\u0537\3\2\2\2\u0539"+
		"\u0538\3\2\2\2\u053a;\3\2\2\2\u053b\u053c\7\u0434\2\2\u053c\u053f\7T\2"+
		"\2\u053d\u0540\5\u021e\u0110\2\u053e\u0540\5\u027a\u013e\2\u053f\u053d"+
		"\3\2\2\2\u053f\u053e\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0542\5> \2\u0542"+
		"=\3\2\2\2\u0543\u0551\5\u0292\u014a\2\u0544\u0551\7\u00d5\2\2\u0545\u0551"+
		"\7\u00e8\2\2\u0546\u0551\7\u00e9\2\2\u0547\u0551\7\u00ea\2\2\u0548\u0551"+
		"\7\u00eb\2\2\u0549\u0551\7\u00ec\2\2\u054a\u0551\7\u00ed\2\2\u054b\u0551"+
		"\7\u00ee\2\2\u054c\u0551\7\u00ef\2\2\u054d\u0551\7\u00f0\2\2\u054e\u0551"+
		"\7\u00f1\2\2\u054f\u0551\7\u00f2\2\2\u0550\u0543\3\2\2\2\u0550\u0544\3"+
		"\2\2\2\u0550\u0545\3\2\2\2\u0550\u0546\3\2\2\2\u0550\u0547\3\2\2\2\u0550"+
		"\u0548\3\2\2\2\u0550\u0549\3\2\2\2\u0550\u054a\3\2\2\2\u0550\u054b\3\2"+
		"\2\2\u0550\u054c\3\2\2\2\u0550\u054d\3\2\2\2\u0550\u054e\3\2\2\2\u0550"+
		"\u054f\3\2\2\2\u0551?\3\2\2\2\u0552\u0558\7\u0186\2\2\u0553\u0558\7\u017f"+
		"\2\2\u0554\u0555\7\u017f\2\2\u0555\u0556\7q\2\2\u0556\u0558\7\u0246\2"+
		"\2\u0557\u0552\3\2\2\2\u0557\u0553\3\2\2\2\u0557\u0554\3\2\2\2\u0558A"+
		"\3\2\2\2\u0559\u055a\7\u00b3\2\2\u055a\u055b\t\17\2\2\u055bC\3\2\2\2\u055c"+
		"\u055e\7\u01c1\2\2\u055d\u055f\7\u0438\2\2\u055e\u055d\3\2\2\2\u055e\u055f"+
		"\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u056a\5\u0220\u0111\2\u0561\u056a\5"+
		"B\"\2\u0562\u0563\7\u00b8\2\2\u0563\u0564\7\u0209\2\2\u0564\u056a\5\u0218"+
		"\u010d\2\u0565\u0566\7\u0164\2\2\u0566\u056a\7\u0450\2\2\u0567\u056a\7"+
		"\u01b9\2\2\u0568\u056a\7\u0281\2\2\u0569\u055c\3\2\2\2\u0569\u0561\3\2"+
		"\2\2\u0569\u0562\3\2\2\2\u0569\u0565\3\2\2\2\u0569\u0567\3\2\2\2\u0569"+
		"\u0568\3\2\2\2\u056aE\3\2\2\2\u056b\u056d\t\20\2\2\u056c\u056b\3\2\2\2"+
		"\u056c\u056d\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u056f\5\u0218\u010d\2\u056f"+
		"\u0570\5\u022c\u0117\2\u0570G\3\2\2\2\u0571\u0572\5\u0218\u010d\2\u0572"+
		"\u0573\5\u022c\u0117\2\u0573I\3\2\2\2\u0574\u0575\7\u0164\2\2\u0575\u058c"+
		"\7\u0450\2\2\u0576\u0577\7\u01c2\2\2\u0577\u058c\7\u0099\2\2\u0578\u057a"+
		"\7m\2\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b\3\2\2\2\u057b"+
		"\u058c\7/\2\2\u057c\u057d\7\u0171\2\2\u057d\u0587\7\u0099\2\2\u057e\u057f"+
		"\7\u01f7\2\2\u057f\u0587\7\u0099\2\2\u0580\u0581\7\u0082\2\2\u0581\u0582"+
		"\7\u0099\2\2\u0582\u0587\7\u0177\2\2\u0583\u0584\7k\2\2\u0584\u0585\7"+
		"\u0099\2\2\u0585\u0587\7\u0177\2\2\u0586\u057c\3\2\2\2\u0586\u057e\3\2"+
		"\2\2\u0586\u0580\3\2\2\2\u0586\u0583\3\2\2\2\u0587\u058c\3\2\2\2\u0588"+
		"\u0589\7\u0099\2\2\u0589\u058a\7\u023f\2\2\u058a\u058c\t\r\2\2\u058b\u0574"+
		"\3\2\2\2\u058b\u0576\3\2\2\2\u058b\u0579\3\2\2\2\u058b\u0586\3\2\2\2\u058b"+
		"\u0588\3\2\2\2\u058cK\3\2\2\2\u058d\u058e\7\u01ad\2\2\u058e\u059c\7\u0450"+
		"\2\2\u058f\u0590\7\'\2\2\u0590\u059c\7\u0450\2\2\u0591\u0592\7\u0279\2"+
		"\2\u0592\u059c\7\u0450\2\2\u0593\u0594\7\u020d\2\2\u0594\u059c\7\u0450"+
		"\2\2\u0595\u0596\7\u0249\2\2\u0596\u059c\7\u0450\2\2\u0597\u0598\7\u0206"+
		"\2\2\u0598\u059c\7\u0450\2\2\u0599\u059a\7\u0212\2\2\u059a\u059c\5\u021e"+
		"\u0110\2\u059b\u058d\3\2\2\2\u059b\u058f\3\2\2\2\u059b\u0591\3\2\2\2\u059b"+
		"\u0593\3\2\2\2\u059b\u0595\3\2\2\2\u059b\u0597\3\2\2\2\u059b\u0599\3\2"+
		"\2\2\u059cM\3\2\2\2\u059d\u059e\7\u0441\2\2\u059e\u05a3\5P)\2\u059f\u05a0"+
		"\7\u0443\2\2\u05a0\u05a2\5P)\2\u05a1\u059f\3\2\2\2\u05a2\u05a5\3\2\2\2"+
		"\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5\u05a3"+
		"\3\2\2\2\u05a6\u05a7\7\u0442\2\2\u05a7O\3\2\2\2\u05a8\u05a9\5\u0218\u010d"+
		"\2\u05a9\u05aa\5R*\2\u05aa\u05ae\3\2\2\2\u05ab\u05ae\5V,\2\u05ac\u05ae"+
		"\5^\60\2\u05ad\u05a8\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ad\u05ac\3\2\2\2\u05ae"+
		"Q\3\2\2\2\u05af\u05b3\5\u022c\u0117\2\u05b0\u05b2\5T+\2\u05b1\u05b0\3"+
		"\2\2\2\u05b2\u05b5\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4"+
		"S\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u05ec\5\u0228\u0115\2\u05b7\u05b8"+
		"\7*\2\2\u05b8\u05ec\5\u0248\u0125\2\u05b9\u05ec\7\u0281\2\2\u05ba\u05ec"+
		"\7\u01b9\2\2\u05bb\u05c0\7\u014b\2\2\u05bc\u05bd\7q\2\2\u05bd\u05be\7"+
		"\u00b0\2\2\u05be\u05c0\5\u024a\u0126\2\u05bf\u05bb\3\2\2\2\u05bf\u05bc"+
		"\3\2\2\2\u05c0\u05ec\3\2\2\2\u05c1\u05c3\7}\2\2\u05c2\u05c1\3\2\2\2\u05c2"+
		"\u05c3\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05ec\7Y\2\2\u05c5\u05c7\7\u00ad"+
		"\2\2\u05c6\u05c8\7Y\2\2\u05c7\u05c6\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8"+
		"\u05ec\3\2\2\2\u05c9\u05ca\7\u0164\2\2\u05ca\u05ec\7\u0450\2\2\u05cb\u05cc"+
		"\7\u0162\2\2\u05cc\u05ec\t\21\2\2\u05cd\u05ce\7\u025c\2\2\u05ce\u05ec"+
		"\t\22\2\2\u05cf\u05ec\5X-\2\u05d0\u05d1\7\34\2\2\u05d1\u05ec\5\u020c\u0107"+
		"\2\u05d2\u05d3\7E\2\2\u05d3\u05d5\7\n\2\2\u05d4\u05d2\3\2\2\2\u05d4\u05d5"+
		"\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\7\16\2\2\u05d7\u05d8\7\u0441"+
		"\2\2\u05d8\u05d9\5\u027a\u013e\2\u05d9\u05db\7\u0442\2\2\u05da\u05dc\t"+
		"\23\2\2\u05db\u05da\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05ec\3\2\2\2\u05dd"+
		"\u05de\7\u00e7\2\2\u05de\u05df\7*\2\2\u05df\u05ec\7\u027d\2\2\u05e0\u05e2"+
		"\7\37\2\2\u05e1\u05e3\5\u0218\u010d\2\u05e2\u05e1\3\2\2\2\u05e2\u05e3"+
		"\3\2\2\2\u05e3\u05e5\3\2\2\2\u05e4\u05e0\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5"+
		"\u05e6\3\2\2\2\u05e6\u05e7\7\33\2\2\u05e7\u05e8\7\u0441\2\2\u05e8\u05e9"+
		"\5\u027a\u013e\2\u05e9\u05ea\7\u0442\2\2\u05ea\u05ec\3\2\2\2\u05eb\u05b6"+
		"\3\2\2\2\u05eb\u05b7\3\2\2\2\u05eb\u05b9\3\2\2\2\u05eb\u05ba\3\2\2\2\u05eb"+
		"\u05bf\3\2\2\2\u05eb\u05c2\3\2\2\2\u05eb\u05c5\3\2\2\2\u05eb\u05c9\3\2"+
		"\2\2\u05eb\u05cb\3\2\2\2\u05eb\u05cd\3\2\2\2\u05eb\u05cf\3\2\2\2\u05eb"+
		"\u05d0\3\2\2\2\u05eb\u05d4\3\2\2\2\u05eb\u05dd\3\2\2\2\u05eb\u05e4\3\2"+
		"\2\2\u05ecU\3\2\2\2\u05ed\u05ef\7\37\2\2\u05ee\u05f0\5\u0218\u010d\2\u05ef"+
		"\u05ee\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05ed\3\2"+
		"\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4\7}\2\2\u05f4"+
		"\u05f6\7Y\2\2\u05f5\u05f7\5\u0218\u010d\2\u05f6\u05f5\3\2\2\2\u05f6\u05f7"+
		"\3\2\2\2\u05f7\u05f9\3\2\2\2\u05f8\u05fa\5B\"\2\u05f9\u05f8\3\2\2\2\u05f9"+
		"\u05fa\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05ff\5\u023c\u011f\2\u05fc\u05fe"+
		"\5D#\2\u05fd\u05fc\3\2\2\2\u05fe\u0601\3\2\2\2\u05ff\u05fd\3\2\2\2\u05ff"+
		"\u0600\3\2\2\2\u0600\u0633\3\2\2\2\u0601\u05ff\3\2\2\2\u0602\u0604\7\37"+
		"\2\2\u0603\u0605\5\u0218\u010d\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2"+
		"\2\u0605\u0607\3\2\2\2\u0606\u0602\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0608"+
		"\3\2\2\2\u0608\u060a\7\u00ad\2\2\u0609\u060b\t\24\2\2\u060a\u0609\3\2"+
		"\2\2\u060a\u060b\3\2\2\2\u060b\u060d\3\2\2\2\u060c\u060e\5\u0218\u010d"+
		"\2\u060d\u060c\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u0610\3\2\2\2\u060f\u0611"+
		"\5B\"\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0612\3\2\2\2\u0612"+
		"\u0616\5\u023c\u011f\2\u0613\u0615\5D#\2\u0614\u0613\3\2\2\2\u0615\u0618"+
		"\3\2\2\2\u0616\u0614\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0633\3\2\2\2\u0618"+
		"\u0616\3\2\2\2\u0619\u061b\7\37\2\2\u061a\u061c\5\u0218\u010d\2\u061b"+
		"\u061a\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061e\3\2\2\2\u061d\u0619\3\2"+
		"\2\2\u061d\u061e\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620\7B\2\2\u0620"+
		"\u0622\7Y\2\2\u0621\u0623\5\u0218\u010d\2\u0622\u0621\3\2\2\2\u0622\u0623"+
		"\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\5\u023c\u011f\2\u0625\u0626\5"+
		"X-\2\u0626\u0633\3\2\2\2\u0627\u0629\7\37\2\2\u0628\u062a\5\u0218\u010d"+
		"\2\u0629\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062c\3\2\2\2\u062b\u0627"+
		"\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\7\33\2\2"+
		"\u062e\u062f\7\u0441\2\2\u062f\u0630\5\u027a\u013e\2\u0630\u0631\7\u0442"+
		"\2\2\u0631\u0633\3\2\2\2\u0632\u05f1\3\2\2\2\u0632\u0606\3\2\2\2\u0632"+
		"\u061d\3\2\2\2\u0632\u062b\3\2\2\2\u0633W\3\2\2\2\u0634\u0635\7\u0083"+
		"\2\2\u0635\u0637\5\u0200\u0101\2\u0636\u0638\5\u023c\u011f\2\u0637\u0636"+
		"\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u063b\3\2\2\2\u0639\u063a\7i\2\2\u063a"+
		"\u063c\t\25\2\2\u063b\u0639\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063e\3"+
		"\2\2\2\u063d\u063f\5Z.\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2\2\u063f"+
		"Y\3\2\2\2\u0640\u0641\7q\2\2\u0641\u0642\7,\2\2\u0642\u0646\5\\/\2\u0643"+
		"\u0644\7q\2\2\u0644\u0645\7\u00b0\2\2\u0645\u0647\5\\/\2\u0646\u0643\3"+
		"\2\2\2\u0646\u0647\3\2\2\2\u0647\u0651\3\2\2\2\u0648\u0649\7q\2\2\u0649"+
		"\u064a\7\u00b0\2\2\u064a\u064e\5\\/\2\u064b\u064c\7q\2\2\u064c\u064d\7"+
		",\2\2\u064d\u064f\5\\/\2\u064e\u064b\3\2\2\2\u064e\u064f\3\2\2\2\u064f"+
		"\u0651\3\2\2\2\u0650\u0640\3\2\2\2\u0650\u0648\3\2\2\2\u0651[\3\2\2\2"+
		"\u0652\u0659\7\u008b\2\2\u0653\u0659\7\26\2\2\u0654\u0655\7\u0094\2\2"+
		"\u0655\u0659\7o\2\2\u0656\u0657\7\u01f7\2\2\u0657\u0659\7\u0142\2\2\u0658"+
		"\u0652\3\2\2\2\u0658\u0653\3\2\2\2\u0658\u0654\3\2\2\2\u0658\u0656\3\2"+
		"\2\2\u0659]\3\2\2\2\u065a\u065c\t\24\2\2\u065b\u065d\5\u0218\u010d\2\u065c"+
		"\u065b\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065f\3\2\2\2\u065e\u0660\5B"+
		"\"\2\u065f\u065e\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0661\3\2\2\2\u0661"+
		"\u0665\5\u023c\u011f\2\u0662\u0664\5D#\2\u0663\u0662\3\2\2\2\u0664\u0667"+
		"\3\2\2\2\u0665\u0663\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0677\3\2\2\2\u0667"+
		"\u0665\3\2\2\2\u0668\u066a\t\26\2\2\u0669\u066b\t\24\2\2\u066a\u0669\3"+
		"\2\2\2\u066a\u066b\3\2\2\2\u066b\u066d\3\2\2\2\u066c\u066e\5\u0218\u010d"+
		"\2\u066d\u066c\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0673"+
		"\5\u023c\u011f\2\u0670\u0672\5D#\2\u0671\u0670\3\2\2\2\u0672\u0675\3\2"+
		"\2\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0677\3\2\2\2\u0675"+
		"\u0673\3\2\2\2\u0676\u065a\3\2\2\2\u0676\u0668\3\2\2\2\u0677_\3\2\2\2"+
		"\u0678\u067a\7\u018a\2\2\u0679\u067b\7\u0438\2\2\u067a\u0679\3\2\2\2\u067a"+
		"\u067b\3\2\2\2\u067b\u067d\3\2\2\2\u067c\u067e\5\u020e\u0108\2\u067d\u067c"+
		"\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u070a\3\2\2\2\u067f\u0681\7\u014b\2"+
		"\2\u0680\u0682\7\u0438\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682"+
		"\u0683\3\2\2\2\u0683\u070a\5\u021e\u0110\2\u0684\u0686\7\u014c\2\2\u0685"+
		"\u0687\7\u0438\2\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0688"+
		"\3\2\2\2\u0688\u070a\5\u021e\u0110\2\u0689\u068b\7*\2\2\u068a\u0689\3"+
		"\2\2\2\u068a\u068b\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u068e\5\64\33\2\u068d"+
		"\u068f\7\u0438\2\2\u068e\u068d\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0692"+
		"\3\2\2\2\u0690\u0693\5\u020a\u0106\2\u0691\u0693\7*\2\2\u0692\u0690\3"+
		"\2\2\2\u0692\u0691\3\2\2\2\u0693\u070a\3\2\2\2\u0694\u0696\t\27\2\2\u0695"+
		"\u0697\7\u0438\2\2\u0696\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698"+
		"\3\2\2\2\u0698\u070a\t\30\2\2\u0699\u069b\7*\2\2\u069a\u0699\3\2\2\2\u069a"+
		"\u069b\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069e\7\34\2\2\u069d\u069f\7"+
		"\u0438\2\2\u069e\u069d\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a0\3\2\2\2"+
		"\u06a0\u070a\5\u020c\u0107\2\u06a1\u06a3\7\u0164\2\2\u06a2\u06a4\7\u0438"+
		"\2\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5"+
		"\u070a\7\u0450\2\2\u06a6\u06a8\7\u0169\2\2\u06a7\u06a9\7\u0438\2\2\u06a8"+
		"\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u070a\t\31"+
		"\2\2\u06ab\u06ad\7\u016c\2\2\u06ac\u06ae\7\u0438\2\2\u06ad\u06ac\3\2\2"+
		"\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u070a\7\u0450\2\2\u06b0"+
		"\u06b1\7\u0177\2\2\u06b1\u06b3\7\u017e\2\2\u06b2\u06b4\7\u0438\2\2\u06b3"+
		"\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u070a\7\u0450"+
		"\2\2\u06b6\u06b8\7\u017c\2\2\u06b7\u06b9\7\u0438\2\2\u06b8\u06b7\3\2\2"+
		"\2\u06b8\u06b9\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u070a\t\30\2\2\u06bb"+
		"\u06bd\7\u0187\2\2\u06bc\u06be\7\u0438\2\2\u06bd\u06bc\3\2\2\2\u06bd\u06be"+
		"\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u070a\7\u0450\2\2\u06c0\u06c1\7O\2"+
		"\2\u06c1\u06c3\7\u017e\2\2\u06c2\u06c4\7\u0438\2\2\u06c3\u06c2\3\2\2\2"+
		"\u06c3\u06c4\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u070a\7\u0450\2\2\u06c6"+
		"\u06c8\7\u01b5\2\2\u06c7\u06c9\7\u0438\2\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9"+
		"\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u070a\t\32\2\2\u06cb\u06cd\7\u01c1"+
		"\2\2\u06cc\u06ce\7\u0438\2\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce"+
		"\u06cf\3\2\2\2\u06cf\u070a\5\u0220\u0111\2\u06d0\u06d2\7\u01e2\2\2\u06d1"+
		"\u06d3\7\u0438\2\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4"+
		"\3\2\2\2\u06d4\u070a\5\u021e\u0110\2\u06d5\u06d7\7\u01ec\2\2\u06d6\u06d8"+
		"\7\u0438\2\2\u06d7\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2"+
		"\2\u06d9\u070a\5\u021e\u0110\2\u06da\u06dc\7\u0207\2\2\u06db\u06dd\7\u0438"+
		"\2\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\3\2\2\2\u06de"+
		"\u070a\t\33\2\2\u06df\u06e1\7\u020d\2\2\u06e0\u06e2\7\u0438\2\2\u06e1"+
		"\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u070a\7\u0450"+
		"\2\2\u06e4\u06e6\7\u023c\2\2\u06e5\u06e7\7\u0438\2\2\u06e6\u06e5\3\2\2"+
		"\2\u06e6\u06e7\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u070a\t\34\2\2\u06e9"+
		"\u06eb\7\u0257\2\2\u06ea\u06ec\7\u0438\2\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec"+
		"\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u070a\t\33\2\2\u06ee\u06f0\7\u0258"+
		"\2\2\u06ef\u06f1\7\u0438\2\2\u06f0\u06ef\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1"+
		"\u06f2\3\2\2\2\u06f2\u070a\t\33\2\2\u06f3\u06f5\7\u0259\2\2\u06f4\u06f6"+
		"\7\u0438\2\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f7\3\2\2"+
		"\2\u06f7\u070a\5\u021e\u0110\2\u06f8\u06f9\7\u0267\2\2\u06f9\u06fb\5\u0218"+
		"\u010d\2\u06fa\u06fc\5d\63\2\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc"+
		"\u070a\3\2\2\2\u06fd\u06fe\7\u0268\2\2\u06fe\u06ff\7\u0438\2\2\u06ff\u070a"+
		"\5b\62\2\u0700\u070a\5d\63\2\u0701\u0703\7\u00ac\2\2\u0702\u0704\7\u0438"+
		"\2\2\u0703\u0702\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0705\3\2\2\2\u0705"+
		"\u0706\7\u0441\2\2\u0706\u0707\5\u023a\u011e\2\u0707\u0708\7\u0442\2\2"+
		"\u0708\u070a\3\2\2\2\u0709\u0678\3\2\2\2\u0709\u067f\3\2\2\2\u0709\u0684"+
		"\3\2\2\2\u0709\u068a\3\2\2\2\u0709\u0694\3\2\2\2\u0709\u069a\3\2\2\2\u0709"+
		"\u06a1\3\2\2\2\u0709\u06a6\3\2\2\2\u0709\u06ab\3\2\2\2\u0709\u06b0\3\2"+
		"\2\2\u0709\u06b6\3\2\2\2\u0709\u06bb\3\2\2\2\u0709\u06c0\3\2\2\2\u0709"+
		"\u06c6\3\2\2\2\u0709\u06cb\3\2\2\2\u0709\u06d0\3\2\2\2\u0709\u06d5\3\2"+
		"\2\2\u0709\u06da\3\2\2\2\u0709\u06df\3\2\2\2\u0709\u06e4\3\2\2\2\u0709"+
		"\u06e9\3\2\2\2\u0709\u06ee\3\2\2\2\u0709\u06f3\3\2\2\2\u0709\u06f8\3\2"+
		"\2\2\u0709\u06fd\3\2\2\2\u0709\u0700\3\2\2\2\u0709\u0701\3\2\2\2\u070a"+
		"a\3\2\2\2\u070b\u070c\t\35\2\2\u070cc\3\2\2\2\u070d\u070e\7\u025c\2\2"+
		"\u070e\u070f\t\22\2\2\u070fe\3\2\2\2\u0710\u0711\7|\2\2\u0711\u0712\7"+
		"\24\2\2\u0712\u0715\5h\65\2\u0713\u0714\7\u020c\2\2\u0714\u0716\5\u021e"+
		"\u0110\2\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u071e\3\2\2\2\u0717"+
		"\u0718\7\u0261\2\2\u0718\u0719\7\24\2\2\u0719\u071c\5j\66\2\u071a\u071b"+
		"\7\u0262\2\2\u071b\u071d\5\u021e\u0110\2\u071c\u071a\3\2\2\2\u071c\u071d"+
		"\3\2\2\2\u071d\u071f\3\2\2\2\u071e\u0717\3\2\2\2\u071e\u071f\3\2\2\2\u071f"+
		"\u072b\3\2\2\2\u0720\u0721\7\u0441\2\2\u0721\u0726\5l\67\2\u0722\u0723"+
		"\7\u0443\2\2\u0723\u0725\5l\67\2\u0724\u0722\3\2\2\2\u0725\u0728\3\2\2"+
		"\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0729\3\2\2\2\u0728\u0726"+
		"\3\2\2\2\u0729\u072a\7\u0442\2\2\u072a\u072c\3\2\2\2\u072b\u0720\3\2\2"+
		"\2\u072b\u072c\3\2\2\2\u072cg\3\2\2\2\u072d\u072f\7a\2\2\u072e\u072d\3"+
		"\2\2\2\u072e\u072f\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731\7\u01ab\2\2"+
		"\u0731\u0732\7\u0441\2\2\u0732\u0733\5\u027a\u013e\2\u0733\u0734\7\u0442"+
		"\2\2\u0734\u075b\3\2\2\2\u0735\u0737\7a\2\2\u0736\u0735\3\2\2\2\u0736"+
		"\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u073c\7Y\2\2\u0739\u073a\7\u0145"+
		"\2\2\u073a\u073b\7\u0438\2\2\u073b\u073d\t\36\2\2\u073c\u0739\3\2\2\2"+
		"\u073c\u073d\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\7\u0441\2\2\u073f"+
		"\u0740\5\u0238\u011d\2\u0740\u0741\7\u0442\2\2\u0741\u075b\3\2\2\2\u0742"+
		"\u074c\7\u0080\2\2\u0743\u0744\7\u0441\2\2\u0744\u0745\5\u027a\u013e\2"+
		"\u0745\u0746\7\u0442\2\2\u0746\u074d\3\2\2\2\u0747\u0748\7\u0161\2\2\u0748"+
		"\u0749\7\u0441\2\2\u0749\u074a\5\u0238\u011d\2\u074a\u074b\7\u0442\2\2"+
		"\u074b\u074d\3\2\2\2\u074c\u0743\3\2\2\2\u074c\u0747\3\2\2\2\u074d\u075b"+
		"\3\2\2\2\u074e\u0758\7\u01c7\2\2\u074f\u0750\7\u0441\2\2\u0750\u0751\5"+
		"\u027a\u013e\2\u0751\u0752\7\u0442\2\2\u0752\u0759\3\2\2\2\u0753\u0754"+
		"\7\u0161\2\2\u0754\u0755\7\u0441\2\2\u0755\u0756\5\u0238\u011d\2\u0756"+
		"\u0757\7\u0442\2\2\u0757\u0759\3\2\2\2\u0758\u074f\3\2\2\2\u0758\u0753"+
		"\3\2\2\2\u0759\u075b\3\2\2\2\u075a\u072e\3\2\2\2\u075a\u0736\3\2\2\2\u075a"+
		"\u0742\3\2\2\2\u075a\u074e\3\2\2\2\u075bi\3\2\2\2\u075c\u075e\7a\2\2\u075d"+
		"\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760\7\u01ab"+
		"\2\2\u0760\u0761\7\u0441\2\2\u0761\u0762\5\u027a\u013e\2\u0762\u0763\7"+
		"\u0442\2\2\u0763\u0772\3\2\2\2\u0764\u0766\7a\2\2\u0765\u0764\3\2\2\2"+
		"\u0765\u0766\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u076b\7Y\2\2\u0768\u0769"+
		"\7\u0145\2\2\u0769\u076a\7\u0438\2\2\u076a\u076c\t\36\2\2\u076b\u0768"+
		"\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076e\7\u0441\2"+
		"\2\u076e\u076f\5\u0238\u011d\2\u076f\u0770\7\u0442\2\2\u0770\u0772\3\2"+
		"\2\2\u0771\u075d\3\2\2\2\u0771\u0765\3\2\2\2\u0772k\3\2\2\2\u0773\u0774"+
		"\7|\2\2\u0774\u0775\5\u0218\u010d\2\u0775\u0776\7\u00b4\2\2\u0776\u0777"+
		"\7\u01c5\2\2\u0777\u0778\7\u026b\2\2\u0778\u0779\7\u0441\2\2\u0779\u077e"+
		"\5n8\2\u077a\u077b\7\u0443\2\2\u077b\u077d\5n8\2\u077c\u077a\3\2\2\2\u077d"+
		"\u0780\3\2\2\2\u077e\u077c\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781\3\2"+
		"\2\2\u0780\u077e\3\2\2\2\u0781\u0785\7\u0442\2\2\u0782\u0784\5t;\2\u0783"+
		"\u0782\3\2\2\2\u0784\u0787\3\2\2\2\u0785\u0783\3\2\2\2\u0785\u0786\3\2"+
		"\2\2\u0786\u0793\3\2\2\2\u0787\u0785\3\2\2\2\u0788\u0789\7\u0441\2\2\u0789"+
		"\u078e\5r:\2\u078a\u078b\7\u0443\2\2\u078b\u078d\5r:\2\u078c\u078a\3\2"+
		"\2\2\u078d\u0790\3\2\2\2\u078e\u078c\3\2\2\2\u078e\u078f\3\2\2\2\u078f"+
		"\u0791\3\2\2\2\u0790\u078e\3\2\2\2\u0791\u0792\7\u0442\2\2\u0792\u0794"+
		"\3\2\2\2\u0793\u0788\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0806\3\2\2\2\u0795"+
		"\u0796\7|\2\2\u0796\u0797\5\u0218\u010d\2\u0797\u0798\7\u00b4\2\2\u0798"+
		"\u0799\7\u01c5\2\2\u0799\u079a\7\u026b\2\2\u079a\u079e\5n8\2\u079b\u079d"+
		"\5t;\2\u079c\u079b\3\2\2\2\u079d\u07a0\3\2\2\2\u079e\u079c\3\2\2\2\u079e"+
		"\u079f\3\2\2\2\u079f\u07ac\3\2\2\2\u07a0\u079e\3\2\2\2\u07a1\u07a2\7\u0441"+
		"\2\2\u07a2\u07a7\5r:\2\u07a3\u07a4\7\u0443\2\2\u07a4\u07a6\5r:\2\u07a5"+
		"\u07a3\3\2\2\2\u07a6\u07a9\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a7\u07a8\3\2"+
		"\2\2\u07a8\u07aa\3\2\2\2\u07a9\u07a7\3\2\2\2\u07aa\u07ab\7\u0442\2\2\u07ab"+
		"\u07ad\3\2\2\2\u07ac\u07a1\3\2\2\2\u07ac\u07ad\3\2\2\2\u07ad\u0806\3\2"+
		"\2\2\u07ae\u07af\7|\2\2\u07af\u07b0\5\u0218\u010d\2\u07b0\u07b1\7\u00b4"+
		"\2\2\u07b1\u07b2\7N\2\2\u07b2\u07b3\7\u0441\2\2\u07b3\u07b8\5n8\2\u07b4"+
		"\u07b5\7\u0443\2\2\u07b5\u07b7\5n8\2\u07b6\u07b4\3\2\2\2\u07b7\u07ba\3"+
		"\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bb\3\2\2\2\u07ba"+
		"\u07b8\3\2\2\2\u07bb\u07bf\7\u0442\2\2\u07bc\u07be\5t;\2\u07bd\u07bc\3"+
		"\2\2\2\u07be\u07c1\3\2\2\2\u07bf\u07bd\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0"+
		"\u07cd\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2\u07c3\7\u0441\2\2\u07c3\u07c8"+
		"\5r:\2\u07c4\u07c5\7\u0443\2\2\u07c5\u07c7\5r:\2\u07c6\u07c4\3\2\2\2\u07c7"+
		"\u07ca\3\2\2\2\u07c8\u07c6\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07cb\3\2"+
		"\2\2\u07ca\u07c8\3\2\2\2\u07cb\u07cc\7\u0442\2\2\u07cc\u07ce\3\2\2\2\u07cd"+
		"\u07c2\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u0806\3\2\2\2\u07cf\u07d0\7|"+
		"\2\2\u07d0\u07d1\5\u0218\u010d\2\u07d1\u07d2\7\u00b4\2\2\u07d2\u07d3\7"+
		"N\2\2\u07d3\u07d4\7\u0441\2\2\u07d4\u07d9\5p9\2\u07d5\u07d6\7\u0443\2"+
		"\2\u07d6\u07d8\5p9\2\u07d7\u07d5\3\2\2\2\u07d8\u07db\3\2\2\2\u07d9\u07d7"+
		"\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07dc\3\2\2\2\u07db\u07d9\3\2\2\2\u07dc"+
		"\u07e0\7\u0442\2\2\u07dd\u07df\5t;\2\u07de\u07dd\3\2\2\2\u07df\u07e2\3"+
		"\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07ee\3\2\2\2\u07e2"+
		"\u07e0\3\2\2\2\u07e3\u07e4\7\u0441\2\2\u07e4\u07e9\5r:\2\u07e5\u07e6\7"+
		"\u0443\2\2\u07e6\u07e8\5r:\2\u07e7\u07e5\3\2\2\2\u07e8\u07eb\3\2\2\2\u07e9"+
		"\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\3\2\2\2\u07eb\u07e9\3\2"+
		"\2\2\u07ec\u07ed\7\u0442\2\2\u07ed\u07ef\3\2\2\2\u07ee\u07e3\3\2\2\2\u07ee"+
		"\u07ef\3\2\2\2\u07ef\u0806\3\2\2\2\u07f0\u07f1\7|\2\2\u07f1\u07f5\5\u0218"+
		"\u010d\2\u07f2\u07f4\5t;\2\u07f3\u07f2\3\2\2\2\u07f4\u07f7\3\2\2\2\u07f5"+
		"\u07f3\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u0803\3\2\2\2\u07f7\u07f5\3\2"+
		"\2\2\u07f8\u07f9\7\u0441\2\2\u07f9\u07fe\5r:\2\u07fa\u07fb\7\u0443\2\2"+
		"\u07fb\u07fd\5r:\2\u07fc\u07fa\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc"+
		"\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0801\3\2\2\2\u0800\u07fe\3\2\2\2\u0801"+
		"\u0802\7\u0442\2\2\u0802\u0804\3\2\2\2\u0803\u07f8\3\2\2\2\u0803\u0804"+
		"\3\2\2\2\u0804\u0806\3\2\2\2\u0805\u0773\3\2\2\2\u0805\u0795\3\2\2\2\u0805"+
		"\u07ae\3\2\2\2\u0805\u07cf\3\2\2\2\u0805\u07f0\3\2\2\2\u0806m\3\2\2\2"+
		"\u0807\u080b\5\u022a\u0116\2\u0808\u080b\5\u027a\u013e\2\u0809\u080b\7"+
		"j\2\2\u080a\u0807\3\2\2\2\u080a\u0808\3\2\2\2\u080a\u0809\3\2\2\2\u080b"+
		"o\3\2\2\2\u080c\u080d\7\u0441\2\2\u080d\u0810\5n8\2\u080e\u080f\7\u0443"+
		"\2\2\u080f\u0811\5n8\2\u0810\u080e\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0810"+
		"\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0815\7\u0442\2"+
		"\2\u0815q\3\2\2\2\u0816\u0817\7\u0261\2\2\u0817\u081b\5\u0218\u010d\2"+
		"\u0818\u081a\5t;\2\u0819\u0818\3\2\2\2\u081a\u081d\3\2\2\2\u081b\u0819"+
		"\3\2\2\2\u081b\u081c\3\2\2\2\u081cs\3\2\2\2\u081d\u081b\3\2\2\2\u081e"+
		"\u0820\7*\2\2\u081f\u081e\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0822\3\2"+
		"\2\2\u0821\u0823\7\u025c\2\2\u0822\u0821\3\2\2\2\u0822\u0823\3\2\2\2\u0823"+
		"\u0824\3\2\2\2\u0824\u0826\7\u018a\2\2\u0825\u0827\7\u0438\2\2\u0826\u0825"+
		"\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u084f\5\u020e\u0108"+
		"\2\u0829\u082b\7\u0164\2\2\u082a\u082c\7\u0438\2\2\u082b\u082a\3\2\2\2"+
		"\u082b\u082c\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u084f\7\u0450\2\2\u082e"+
		"\u082f\7\u0177\2\2\u082f\u0831\7\u017e\2\2\u0830\u0832\7\u0438\2\2\u0831"+
		"\u0830\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u084f\7\u0450"+
		"\2\2\u0834\u0835\7O\2\2\u0835\u0837\7\u017e\2\2\u0836\u0838\7\u0438\2"+
		"\2\u0837\u0836\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u084f"+
		"\7\u0450\2\2\u083a\u083c\7\u01e2\2\2\u083b\u083d\7\u0438\2\2\u083c\u083b"+
		"\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u084f\5\u021e\u0110"+
		"\2\u083f\u0841\7\u01ec\2\2\u0840\u0842\7\u0438\2\2\u0841\u0840\3\2\2\2"+
		"\u0841\u0842\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u084f\5\u021e\u0110\2\u0844"+
		"\u0846\7\u0267\2\2\u0845\u0847\7\u0438\2\2\u0846\u0845\3\2\2\2\u0846\u0847"+
		"\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084f\5\u0218\u010d\2\u0849\u084b\7"+
		"\u01f8\2\2\u084a\u084c\7\u0438\2\2\u084b\u084a\3\2\2\2\u084b\u084c\3\2"+
		"\2\2\u084c\u084d\3\2\2\2\u084d\u084f\5\u0218\u010d\2\u084e\u081f\3\2\2"+
		"\2\u084e\u0829\3\2\2\2\u084e\u082e\3\2\2\2\u084e\u0834\3\2\2\2\u084e\u083a"+
		"\3\2\2\2\u084e\u083f\3\2\2\2\u084e\u0844\3\2\2\2\u084e\u0849\3\2\2\2\u084f"+
		"u\3\2\2\2\u0850\u0851\7\t\2\2\u0851\u0853\t\2\2\2\u0852\u0854\5\u0218"+
		"\u010d\2\u0853\u0852\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0856\3\2\2\2\u0855"+
		"\u0857\5\62\32\2\u0856\u0855\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u0856\3"+
		"\2\2\2\u0858\u0859\3\2\2\2\u0859\u0863\3\2\2\2\u085a\u085b\7\t\2\2\u085b"+
		"\u085c\t\2\2\2\u085c\u085d\5\u0218\u010d\2\u085d\u085e\7\u0278\2\2\u085e"+
		"\u085f\7\u0177\2\2\u085f\u0860\7\u017e\2\2\u0860\u0861\7\u01f2\2\2\u0861"+
		"\u0863\3\2\2\2\u0862\u0850\3\2\2\2\u0862\u085a\3\2\2\2\u0863w\3\2\2\2"+
		"\u0864\u0866\7\t\2\2\u0865\u0867\5\66\34\2\u0866\u0865\3\2\2\2\u0866\u0867"+
		"\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u0869\7\u0190\2\2\u0869\u086d\5\u01fe"+
		"\u0100\2\u086a\u086b\7q\2\2\u086b\u086c\7\u023e\2\2\u086c\u086e\58\35"+
		"\2\u086d\u086a\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u0875\3\2\2\2\u086f\u0870"+
		"\7q\2\2\u0870\u0872\7\u0167\2\2\u0871\u0873\7m\2\2\u0872\u0871\3\2\2\2"+
		"\u0872\u0873\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0876\7\u0216\2\2\u0875"+
		"\u086f\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u087a\3\2\2\2\u0877\u0878\7\u0086"+
		"\2\2\u0878\u0879\7\u00a7\2\2\u0879\u087b\5\u01fe\u0100\2\u087a\u0877\3"+
		"\2\2\2\u087a\u087b\3\2\2\2\u087b\u087d\3\2\2\2\u087c\u087e\5@!\2\u087d"+
		"\u087c\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u0881\3\2\2\2\u087f\u0880\7\u0164"+
		"\2\2\u0880\u0882\7\u0450\2\2\u0881\u087f\3\2\2\2\u0881\u0882\3\2\2\2\u0882"+
		"\u0885\3\2\2\2\u0883\u0884\7\u0182\2\2\u0884\u0886\5\u0164\u00b3\2\u0885"+
		"\u0883\3\2\2\2\u0885\u0886\3\2\2\2\u0886y\3\2\2\2\u0887\u0888\7\t\2\2"+
		"\u0888\u0889\7\u01a5\2\2\u0889\u088d\5\u01fe\u0100\2\u088a\u088c\5J&\2"+
		"\u088b\u088a\3\2\2\2\u088c\u088f\3\2\2\2\u088d\u088b\3\2\2\2\u088d\u088e"+
		"\3\2\2\2\u088e{\3\2\2\2\u088f\u088d\3\2\2\2\u0890\u0891\7\t\2\2\u0891"+
		"\u0892\7\u01b7\2\2\u0892\u0893\7\u0239\2\2\u0893\u0894\7\u02ef\2\2\u0894"+
		"\u0895\7\u01cb\2\2\u0895\u0896\7Y\2\2\u0896}\3\2\2\2\u0897\u0898\7\t\2"+
		"\2\u0898\u0899\7\u01c9\2\2\u0899\u089a\7H\2\2\u089a\u089b\5\u0218\u010d"+
		"\2\u089b\u089c\7\7\2\2\u089c\u089d\7\u0273\2\2\u089d\u08a3\7\u0450\2\2"+
		"\u089e\u08a0\7\u01b3\2\2\u089f\u08a1\7\u0438\2\2\u08a0\u089f\3\2\2\2\u08a0"+
		"\u08a1\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u08a4\5\u0220\u0111\2\u08a3\u089e"+
		"\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a6\3\2\2\2\u08a5\u08a7\7\u0282\2"+
		"\2\u08a6\u08a5\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08aa"+
		"\7\u018a\2\2\u08a9\u08ab\7\u0438\2\2\u08aa\u08a9\3\2\2\2\u08aa\u08ab\3"+
		"\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08ad\5\u020e\u0108\2\u08ad\177\3\2\2"+
		"\2\u08ae\u08af\7\t\2\2\u08af\u08b0\7~\2\2\u08b0\u08b4\5\u01fe\u0100\2"+
		"\u08b1\u08b3\5J&\2\u08b2\u08b1\3\2\2\2\u08b3\u08b6\3\2\2\2\u08b4\u08b2"+
		"\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u0081\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b7"+
		"\u08b8\7\t\2\2\u08b8\u08b9\7\u0240\2\2\u08b9\u08ba\5\u0218\u010d\2\u08ba"+
		"\u08bb\7\u0205\2\2\u08bb\u08bc\7\u0441\2\2\u08bc\u08c1\5L\'\2\u08bd\u08be"+
		"\7\u0443\2\2\u08be\u08c0\5L\'\2\u08bf\u08bd\3\2\2\2\u08c0\u08c3\3\2\2"+
		"\2\u08c1\u08bf\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c4\3\2\2\2\u08c3\u08c1"+
		"\3\2\2\2\u08c4\u08c5\7\u0442\2\2\u08c5\u0083\3\2\2\2\u08c6\u08c8\7\t\2"+
		"\2\u08c7\u08c9\t\3\2\2\u08c8\u08c7\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u08cb"+
		"\3\2\2\2\u08ca\u08cc\7M\2\2\u08cb\u08ca\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc"+
		"\u08cd\3\2\2\2\u08cd\u08ce\7\u00a4\2\2\u08ce\u08d7\5\u0200\u0101\2\u08cf"+
		"\u08d4\5\u008aF\2\u08d0\u08d1\7\u0443\2\2\u08d1\u08d3\5\u008aF\2\u08d2"+
		"\u08d0\3\2\2\2\u08d3\u08d6\3\2\2\2\u08d4\u08d2\3\2\2\2\u08d4\u08d5\3\2"+
		"\2\2\u08d5\u08d8\3\2\2\2\u08d6\u08d4\3\2\2\2\u08d7\u08cf\3\2\2\2\u08d7"+
		"\u08d8\3\2\2\2\u08d8\u08da\3\2\2\2\u08d9\u08db\5f\64\2\u08da\u08d9\3\2"+
		"\2\2\u08da\u08db\3\2\2\2\u08db\u0085\3\2\2\2\u08dc\u08dd\7\t\2\2\u08dd"+
		"\u08de\7\u0267\2\2\u08de\u08df\5\u0218\u010d\2\u08df\u08e0\t\37\2\2\u08e0"+
		"\u08e1\7\u0178\2\2\u08e1\u08e5\7\u0450\2\2\u08e2\u08e3\7\u01b3\2\2\u08e3"+
		"\u08e4\7\u0438\2\2\u08e4\u08e6\5\u0220\u0111\2\u08e5\u08e2\3\2\2\2\u08e5"+
		"\u08e6\3\2\2\2\u08e6\u08e8\3\2\2\2\u08e7\u08e9\7\u0282\2\2\u08e8\u08e7"+
		"\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08ec\7\u018a\2"+
		"\2\u08eb\u08ed\7\u0438\2\2\u08ec\u08eb\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed"+
		"\u08ee\3\2\2\2\u08ee\u08ef\5\u020e\u0108\2\u08ef\u0087\3\2\2\2\u08f0\u08f4"+
		"\7\t\2\2\u08f1\u08f2\7\u0145\2\2\u08f2\u08f3\7\u0438\2\2\u08f3\u08f5\t"+
		"\f\2\2\u08f4\u08f1\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6"+
		"\u08f8\5\66\34\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fc\3"+
		"\2\2\2\u08f9\u08fa\7\u0099\2\2\u08fa\u08fb\7\u023f\2\2\u08fb\u08fd\t\r"+
		"\2\2\u08fc\u08f9\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe"+
		"\u08ff\7\u027f\2\2\u08ff\u0904\5\u01fe\u0100\2\u0900\u0901\7\u0441\2\2"+
		"\u0901\u0902\5\u0238\u011d\2\u0902\u0903\7\u0442\2\2\u0903\u0905\3\2\2"+
		"\2\u0904\u0900\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0907"+
		"\7\16\2\2\u0907\u090e\5\u00b8]\2\u0908\u090a\7\u00b8\2\2\u0909\u090b\t"+
		"\16\2\2\u090a\u0909\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\3\2\2\2\u090c"+
		"\u090d\7\33\2\2\u090d\u090f\7s\2\2\u090e\u0908\3\2\2\2\u090e\u090f\3\2"+
		"\2\2\u090f\u0089\3\2\2\2\u0910\u0917\5`\61\2\u0911\u0913\7\u0443\2\2\u0912"+
		"\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0916\5`"+
		"\61\2\u0915\u0912\3\2\2\2\u0916\u0919\3\2\2\2\u0917\u0915\3\2\2\2\u0917"+
		"\u0918\3\2\2\2\u0918\u0a7f\3\2\2\2\u0919\u0917\3\2\2\2\u091a\u091c\7\7"+
		"\2\2\u091b\u091d\7\35\2\2\u091c\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d"+
		"\u091e\3\2\2\2\u091e\u091f\5\u0218\u010d\2\u091f\u0923\5R*\2\u0920\u0924"+
		"\7\u019e\2\2\u0921\u0922\7\u0143\2\2\u0922\u0924\5\u0218\u010d\2\u0923"+
		"\u0920\3\2\2\2\u0923\u0921\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0a7f\3\2"+
		"\2\2\u0925\u0927\7\7\2\2\u0926\u0928\7\35\2\2\u0927\u0926\3\2\2\2\u0927"+
		"\u0928\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092a\7\u0441\2\2\u092a\u092b"+
		"\5\u0218\u010d\2\u092b\u0932\5R*\2\u092c\u092d\7\u0443\2\2\u092d\u092e"+
		"\5\u0218\u010d\2\u092e\u092f\5R*\2\u092f\u0931\3\2\2\2\u0930\u092c\3\2"+
		"\2\2\u0931\u0934\3\2\2\2\u0932\u0930\3\2\2\2\u0932\u0933\3\2\2\2\u0933"+
		"\u0935\3\2\2\2\u0934\u0932\3\2\2\2\u0935\u0936\7\u0442\2\2\u0936\u0a7f"+
		"\3\2\2\2\u0937\u0938\7\7\2\2\u0938\u093a\t\24\2\2\u0939\u093b\5\u0218"+
		"\u010d\2\u093a\u0939\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093d\3\2\2\2\u093c"+
		"\u093e\5B\"\2\u093d\u093c\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u093f\3\2"+
		"\2\2\u093f\u0943\5\u023c\u011f\2\u0940\u0942\5D#\2\u0941\u0940\3\2\2\2"+
		"\u0942\u0945\3\2\2\2\u0943\u0941\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u0a7f"+
		"\3\2\2\2\u0945\u0943\3\2\2\2\u0946\u094b\7\7\2\2\u0947\u0949\7\37\2\2"+
		"\u0948\u094a\5\u0218\u010d\2\u0949\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a"+
		"\u094c\3\2\2\2\u094b\u0947\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094d\3\2"+
		"\2\2\u094d\u094e\7}\2\2\u094e\u0950\7Y\2\2\u094f\u0951\5\u0218\u010d\2"+
		"\u0950\u094f\3\2\2\2\u0950\u0951\3\2\2\2\u0951\u0953\3\2\2\2\u0952\u0954"+
		"\5B\"\2\u0953\u0952\3\2\2\2\u0953\u0954\3\2\2\2\u0954\u0955\3\2\2\2\u0955"+
		"\u0959\5\u023c\u011f\2\u0956\u0958\5D#\2\u0957\u0956\3\2\2\2\u0958\u095b"+
		"\3\2\2\2\u0959\u0957\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u0a7f\3\2\2\2\u095b"+
		"\u0959\3\2\2\2\u095c\u0961\7\7\2\2\u095d\u095f\7\37\2\2\u095e\u0960\5"+
		"\u0218\u010d\2\u095f\u095e\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2"+
		"\2\2\u0961\u095d\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0963\3\2\2\2\u0963"+
		"\u0965\7\u00ad\2\2\u0964\u0966\t\24\2\2\u0965\u0964\3\2\2\2\u0965\u0966"+
		"\3\2\2\2\u0966\u0968\3\2\2\2\u0967\u0969\5\u0218\u010d\2\u0968\u0967\3"+
		"\2\2\2\u0968\u0969\3\2\2\2\u0969\u096b\3\2\2\2\u096a\u096c\5B\"\2\u096b"+
		"\u096a\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u0971\5\u023c"+
		"\u011f\2\u096e\u0970\5D#\2\u096f\u096e\3\2\2\2\u0970\u0973\3\2\2\2\u0971"+
		"\u096f\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0a7f\3\2\2\2\u0973\u0971\3\2"+
		"\2\2\u0974\u0975\7\7\2\2\u0975\u0977\t\26\2\2\u0976\u0978\t\24\2\2\u0977"+
		"\u0976\3\2\2\2\u0977\u0978\3\2\2\2\u0978\u097a\3\2\2\2\u0979\u097b\5\u0218"+
		"\u010d\2\u097a\u0979\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097c\3\2\2\2\u097c"+
		"\u0980\5\u023c\u011f\2\u097d\u097f\5D#\2\u097e\u097d\3\2\2\2\u097f\u0982"+
		"\3\2\2\2\u0980\u097e\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0a7f\3\2\2\2\u0982"+
		"\u0980\3\2\2\2\u0983\u0988\7\7\2\2\u0984\u0986\7\37\2\2\u0985\u0987\5"+
		"\u0218\u010d\2\u0986\u0985\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0989\3\2"+
		"\2\2\u0988\u0984\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u098a\3\2\2\2\u098a"+
		"\u098b\7B\2\2\u098b\u098d\7Y\2\2\u098c\u098e\5\u0218\u010d\2\u098d\u098c"+
		"\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0990\5\u023c\u011f"+
		"\2\u0990\u0991\5X-\2\u0991\u0a7f\3\2\2\2\u0992\u0997\7\7\2\2\u0993\u0995"+
		"\7\37\2\2\u0994\u0996\5\u0218\u010d\2\u0995\u0994\3\2\2\2\u0995\u0996"+
		"\3\2\2\2\u0996\u0998\3\2\2\2\u0997\u0993\3\2\2\2\u0997\u0998\3\2\2\2\u0998"+
		"\u0999\3\2\2\2\u0999\u099a\7\33\2\2\u099a\u099b\7\u0441\2\2\u099b\u099c"+
		"\5\u027a\u013e\2\u099c\u099d\7\u0442\2\2\u099d\u0a7f\3\2\2\2\u099e\u09a0"+
		"\7\u0145\2\2\u099f\u09a1\7\u0438\2\2\u09a0\u099f\3\2\2\2\u09a0\u09a1\3"+
		"\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u0a7f\t \2\2\u09a3\u09a5\7\t\2\2\u09a4"+
		"\u09a6\7\35\2\2\u09a5\u09a4\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a7\3"+
		"\2\2\2\u09a7\u09ad\5\u0218\u010d\2\u09a8\u09a9\7\u0094\2\2\u09a9\u09aa"+
		"\7*\2\2\u09aa\u09ae\5\u0248\u0125\2\u09ab\u09ac\7\63\2\2\u09ac\u09ae\7"+
		"*\2\2\u09ad\u09a8\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ae\u0a7f\3\2\2\2\u09af"+
		"\u09b1\7\31\2\2\u09b0\u09b2\7\35\2\2\u09b1\u09b0\3\2\2\2\u09b1\u09b2\3"+
		"\2\2\2\u09b2\u09b3\3\2\2\2\u09b3\u09b4\5\u0218\u010d\2\u09b4\u09b5\5\u0218"+
		"\u010d\2\u09b5\u09b9\5R*\2\u09b6\u09ba\7\u019e\2\2\u09b7\u09b8\7\u0143"+
		"\2\2\u09b8\u09ba\5\u0218\u010d\2\u09b9\u09b6\3\2\2\2\u09b9\u09b7\3\2\2"+
		"\2\u09b9\u09ba\3\2\2\2\u09ba\u0a7f\3\2\2\2\u09bb\u09bc\7\u0086\2\2\u09bc"+
		"\u09bd\7\35\2\2\u09bd\u09be\5\u0218\u010d\2\u09be\u09bf\7\u00a7\2\2\u09bf"+
		"\u09c0\5\u0218\u010d\2\u09c0\u0a7f\3\2\2\2\u09c1\u09c3\7d\2\2\u09c2\u09c4"+
		"\7\u0438\2\2\u09c3\u09c2\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\3\2\2"+
		"\2\u09c5\u0a7f\t\6\2\2\u09c6\u09c8\7\u01ee\2\2\u09c7\u09c9\7\35\2\2\u09c8"+
		"\u09c7\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\5\u0218"+
		"\u010d\2\u09cb\u09cf\5R*\2\u09cc\u09d0\7\u019e\2\2\u09cd\u09ce\7\u0143"+
		"\2\2\u09ce\u09d0\5\u0218\u010d\2\u09cf\u09cc\3\2\2\2\u09cf\u09cd\3\2\2"+
		"\2\u09cf\u09d0\3\2\2\2\u09d0\u0a7f\3\2\2\2\u09d1\u09d3\7\63\2\2\u09d2"+
		"\u09d4\7\35\2\2\u09d3\u09d2\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d5\3"+
		"\2\2\2\u09d5\u09d7\5\u0218\u010d\2\u09d6\u09d8\7\u008b\2\2\u09d7\u09d6"+
		"\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u0a7f\3\2\2\2\u09d9\u09da\7\63\2\2"+
		"\u09da\u09db\t!\2\2\u09db\u0a7f\5\u0218\u010d\2\u09dc\u09dd\7\63\2\2\u09dd"+
		"\u09de\7}\2\2\u09de\u0a7f\7Y\2\2\u09df\u09e0\7\u0086\2\2\u09e0\u09e1\t"+
		"\24\2\2\u09e1\u09e2\5\u0218\u010d\2\u09e2\u09e3\7\u00a7\2\2\u09e3\u09e4"+
		"\5\u0218\u010d\2\u09e4\u0a7f\3\2\2\2\u09e5\u09e6\7\t\2\2\u09e6\u09e7\7"+
		"O\2\2\u09e7\u09e8\5\u0218\u010d\2\u09e8\u09e9\t\"\2\2\u09e9\u0a7f\3\2"+
		"\2\2\u09ea\u09eb\7\63\2\2\u09eb\u09ec\t\24\2\2\u09ec\u0a7f\5\u0218\u010d"+
		"\2\u09ed\u09ee\7\63\2\2\u09ee\u09ef\7B\2\2\u09ef\u09f0\7Y\2\2\u09f0\u0a7f"+
		"\5\u0218\u010d\2\u09f1\u09f2\7\u017f\2\2\u09f2\u0a7f\7Z\2\2\u09f3\u09f4"+
		"\7\u0186\2\2\u09f4\u0a7f\7Z\2\2\u09f5\u09f7\7\u0086\2\2\u09f6\u09f8\t"+
		"#\2\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09fb\3\2\2\2\u09f9"+
		"\u09fc\5\u0218\u010d\2\u09fa\u09fc\5\u01fe\u0100\2\u09fb\u09f9\3\2\2\2"+
		"\u09fb\u09fa\3\2\2\2\u09fc\u0a7f\3\2\2\2\u09fd\u09fe\7w\2\2\u09fe\u09ff"+
		"\7\24\2\2\u09ff\u0a7f\5\u0238\u011d\2\u0a00\u0a01\7!\2\2\u0a01\u0a02\7"+
		"\u00a7\2\2\u0a02\u0a03\7\32\2\2\u0a03\u0a04\7\u0094\2\2\u0a04\u0a07\5"+
		"\u020a\u0106\2\u0a05\u0a06\7\34\2\2\u0a06\u0a08\5\u020c\u0107\2\u0a07"+
		"\u0a05\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08\u0a7f\3\2\2\2\u0a09\u0a0b\7*"+
		"\2\2\u0a0a\u0a09\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c"+
		"\u0a0d\7\32\2\2\u0a0d\u0a0e\7\u0094\2\2\u0a0e\u0a0f\7\u0438\2\2\u0a0f"+
		"\u0a13\5\u020a\u0106\2\u0a10\u0a11\7\34\2\2\u0a11\u0a12\7\u0438\2\2\u0a12"+
		"\u0a14\5\u020c\u0107\2\u0a13\u0a10\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a7f"+
		"\3\2\2\2\u0a15\u0a16\7\u0180\2\2\u0a16\u0a7f\7\u0267\2\2\u0a17\u0a18\7"+
		"\u01b1\2\2\u0a18\u0a7f\7\u0267\2\2\u0a19\u0a7f\7A\2\2\u0a1a\u0a1b\t$\2"+
		"\2\u0a1b\u0a7f\7\u027c\2\2\u0a1c\u0a1d\7\7\2\2\u0a1d\u0a1e\7|\2\2\u0a1e"+
		"\u0a1f\7\u0441\2\2\u0a1f\u0a24\5l\67\2\u0a20\u0a21\7\u0443\2\2\u0a21\u0a23"+
		"\5l\67\2\u0a22\u0a20\3\2\2\2\u0a23\u0a26\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a24"+
		"\u0a25\3\2\2\2\u0a25\u0a27\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a27\u0a28\7\u0442"+
		"\2\2\u0a28\u0a7f\3\2\2\2\u0a29\u0a2a\7\63\2\2\u0a2a\u0a2b\7|\2\2\u0a2b"+
		"\u0a7f\5\u0238\u011d\2\u0a2c\u0a2d\7\u0180\2\2\u0a2d\u0a30\7|\2\2\u0a2e"+
		"\u0a31\5\u0238\u011d\2\u0a2f\u0a31\7\b\2\2\u0a30\u0a2e\3\2\2\2\u0a30\u0a2f"+
		"\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a7f\7\u0267\2\2\u0a33\u0a34\7\u01b1"+
		"\2\2\u0a34\u0a37\7|\2\2\u0a35\u0a38\5\u0238\u011d\2\u0a36\u0a38\7\b\2"+
		"\2\u0a37\u0a35\3\2\2\2\u0a37\u0a36\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a7f"+
		"\7\u0267\2\2\u0a3a\u0a3b\7\u0270\2\2\u0a3b\u0a3e\7|\2\2\u0a3c\u0a3f\5"+
		"\u0238\u011d\2\u0a3d\u0a3f\7\b\2\2\u0a3e\u0a3c\3\2\2\2\u0a3e\u0a3d\3\2"+
		"\2\2\u0a3f\u0a7f\3\2\2\2\u0a40\u0a41\7\u015f\2\2\u0a41\u0a42\7|\2\2\u0a42"+
		"\u0a7f\5\u021e\u0110\2\u0a43\u0a44\7\u0227\2\2\u0a44\u0a45\7|\2\2\u0a45"+
		"\u0a46\5\u0238\u011d\2\u0a46\u0a47\7U\2\2\u0a47\u0a48\7\u0441\2\2\u0a48"+
		"\u0a4d\5l\67\2\u0a49\u0a4a\7\u0443\2\2\u0a4a\u0a4c\5l\67\2\u0a4b\u0a49"+
		"\3\2\2\2\u0a4c\u0a4f\3\2\2\2\u0a4d\u0a4b\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e"+
		"\u0a50\3\2\2\2\u0a4f\u0a4d\3\2\2\2\u0a50\u0a51\7\u0442\2\2\u0a51\u0a7f"+
		"\3\2\2\2\u0a52\u0a53\7\u0193\2\2\u0a53\u0a54\7|\2\2\u0a54\u0a55\5\u0218"+
		"\u010d\2\u0a55\u0a56\7\u00b8\2\2\u0a56\u0a57\7\u00a4\2\2\u0a57\u0a5a\5"+
		"\u0200\u0101\2\u0a58\u0a59\t$\2\2\u0a59\u0a5b\7\u027c\2\2\u0a5a\u0a58"+
		"\3\2\2\2\u0a5a\u0a5b\3\2\2\2\u0a5b\u0a7f\3\2\2\2\u0a5c\u0a5d\7\13\2\2"+
		"\u0a5d\u0a60\7|\2\2\u0a5e\u0a61\5\u0238\u011d\2\u0a5f\u0a61\7\b\2\2\u0a60"+
		"\u0a5e\3\2\2\2\u0a60\u0a5f\3\2\2\2\u0a61\u0a7f\3\2\2\2\u0a62\u0a63\7\33"+
		"\2\2\u0a63\u0a66\7|\2\2\u0a64\u0a67\5\u0238\u011d\2\u0a65\u0a67\7\b\2"+
		"\2\u0a66\u0a64\3\2\2\2\u0a66\u0a65\3\2\2\2\u0a67\u0a7f\3\2\2\2\u0a68\u0a69"+
		"\7r\2\2\u0a69\u0a6c\7|\2\2\u0a6a\u0a6d\5\u0238\u011d\2\u0a6b\u0a6d\7\b"+
		"\2\2\u0a6c\u0a6a\3\2\2\2\u0a6c\u0a6b\3\2\2\2\u0a6d\u0a7f\3\2\2\2\u0a6e"+
		"\u0a6f\7\u021e\2\2\u0a6f\u0a72\7|\2\2\u0a70\u0a73\5\u0238\u011d\2\u0a71"+
		"\u0a73\7\b\2\2\u0a72\u0a70\3\2\2\2\u0a72\u0a71\3\2\2\2\u0a73\u0a7f\3\2"+
		"\2\2\u0a74\u0a75\7\u0228\2\2\u0a75\u0a78\7|\2\2\u0a76\u0a79\5\u0238\u011d"+
		"\2\u0a77\u0a79\7\b\2\2\u0a78\u0a76\3\2\2\2\u0a78\u0a77\3\2\2\2\u0a79\u0a7f"+
		"\3\2\2\2\u0a7a\u0a7b\7\u0226\2\2\u0a7b\u0a7f\7\u020b\2\2\u0a7c\u0a7d\7"+
		"\u0278\2\2\u0a7d\u0a7f\7\u020b\2\2\u0a7e\u0910\3\2\2\2\u0a7e\u091a\3\2"+
		"\2\2\u0a7e\u0925\3\2\2\2\u0a7e\u0937\3\2\2\2\u0a7e\u0946\3\2\2\2\u0a7e"+
		"\u095c\3\2\2\2\u0a7e\u0974\3\2\2\2\u0a7e\u0983\3\2\2\2\u0a7e\u0992\3\2"+
		"\2\2\u0a7e\u099e\3\2\2\2\u0a7e\u09a3\3\2\2\2\u0a7e\u09af\3\2\2\2\u0a7e"+
		"\u09bb\3\2\2\2\u0a7e\u09c1\3\2\2\2\u0a7e\u09c6\3\2\2\2\u0a7e\u09d1\3\2"+
		"\2\2\u0a7e\u09d9\3\2\2\2\u0a7e\u09dc\3\2\2\2\u0a7e\u09df\3\2\2\2\u0a7e"+
		"\u09e5\3\2\2\2\u0a7e\u09ea\3\2\2\2\u0a7e\u09ed\3\2\2\2\u0a7e\u09f1\3\2"+
		"\2\2\u0a7e\u09f3\3\2\2\2\u0a7e\u09f5\3\2\2\2\u0a7e\u09fd\3\2\2\2\u0a7e"+
		"\u0a00\3\2\2\2\u0a7e\u0a0a\3\2\2\2\u0a7e\u0a15\3\2\2\2\u0a7e\u0a17\3\2"+
		"\2\2\u0a7e\u0a19\3\2\2\2\u0a7e\u0a1a\3\2\2\2\u0a7e\u0a1c\3\2\2\2\u0a7e"+
		"\u0a29\3\2\2\2\u0a7e\u0a2c\3\2\2\2\u0a7e\u0a33\3\2\2\2\u0a7e\u0a3a\3\2"+
		"\2\2\u0a7e\u0a40\3\2\2\2\u0a7e\u0a43\3\2\2\2\u0a7e\u0a52\3\2\2\2\u0a7e"+
		"\u0a5c\3\2\2\2\u0a7e\u0a62\3\2\2\2\u0a7e\u0a68\3\2\2\2\u0a7e\u0a6e\3\2"+
		"\2\2\u0a7e\u0a74\3\2\2\2\u0a7e\u0a7a\3\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f"+
		"\u008b\3\2\2\2\u0a80\u0a81\7\63\2\2\u0a81\u0a83\t\2\2\2\u0a82\u0a84\5"+
		"\u024e\u0128\2\u0a83\u0a82\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0a85\3\2"+
		"\2\2\u0a85\u0a86\5\u0218\u010d\2\u0a86\u008d\3\2\2\2\u0a87\u0a88\7\63"+
		"\2\2\u0a88\u0a8a\7\u0190\2\2\u0a89\u0a8b\5\u024e\u0128\2\u0a8a\u0a89\3"+
		"\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\5\u01fe\u0100"+
		"\2\u0a8d\u008f\3\2\2\2\u0a8e\u0a8f\7\63\2\2\u0a8f\u0a91\7O\2\2\u0a90\u0a92"+
		"\t\3\2\2\u0a91\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93"+
		"\u0a94\5\u0218\u010d\2\u0a94\u0a95\7q\2\2\u0a95\u0aa2\5\u0200\u0101\2"+
		"\u0a96\u0a98\7\u0145\2\2\u0a97\u0a99\7\u0438\2\2\u0a98\u0a97\3\2\2\2\u0a98"+
		"\u0a99\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0aa1\t\5\2\2\u0a9b\u0a9d\7d"+
		"\2\2\u0a9c\u0a9e\7\u0438\2\2\u0a9d\u0a9c\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e"+
		"\u0a9f\3\2\2\2\u0a9f\u0aa1\t\6\2\2\u0aa0\u0a96\3\2\2\2\u0aa0\u0a9b\3\2"+
		"\2\2\u0aa1\u0aa4\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3"+
		"\u0091\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa5\u0aa6\7\63\2\2\u0aa6\u0aa7\7"+
		"\u01c9\2\2\u0aa7\u0aa8\7H\2\2\u0aa8\u0aa9\5\u0218\u010d\2\u0aa9\u0aaa"+
		"\7\u018a\2\2\u0aaa\u0aab\7\u0438\2\2\u0aab\u0aac\5\u020e\u0108\2\u0aac"+
		"\u0093\3\2\2\2\u0aad\u0aae\7\63\2\2\u0aae\u0ab0\7~\2\2\u0aaf\u0ab1\5\u024e"+
		"\u0128\2\u0ab0\u0aaf\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2"+
		"\u0ab3\5\u01fe\u0100\2\u0ab3\u0095\3\2\2\2\u0ab4\u0ab5\7\63\2\2\u0ab5"+
		"\u0ab7\7\u01a5\2\2\u0ab6\u0ab8\5\u024e\u0128\2\u0ab7\u0ab6\3\2\2\2\u0ab7"+
		"\u0ab8\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0aba\5\u01fe\u0100\2\u0aba\u0097"+
		"\3\2\2\2\u0abb\u0abc\7\63\2\2\u0abc\u0abe\7\u0240\2\2\u0abd\u0abf\5\u024e"+
		"\u0128\2\u0abe\u0abd\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0"+
		"\u0ac1\5\u0218\u010d\2\u0ac1\u0099\3\2\2\2\u0ac2\u0ac4\7\63\2\2\u0ac3"+
		"\u0ac5\7\u0269\2\2\u0ac4\u0ac3\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac6"+
		"\3\2\2\2\u0ac6\u0ac8\7\u00a4\2\2\u0ac7\u0ac9\5\u024e\u0128\2\u0ac8\u0ac7"+
		"\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u0acc\5\u023a\u011e"+
		"\2\u0acb\u0acd\t%\2\2\u0acc\u0acb\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u009b"+
		"\3\2\2\2\u0ace\u0acf\7\63\2\2\u0acf\u0ad0\7\u0267\2\2\u0ad0\u0ad6\5\u0218"+
		"\u010d\2\u0ad1\u0ad3\7\u018a\2\2\u0ad2\u0ad4\7\u0438\2\2\u0ad3\u0ad2\3"+
		"\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad7\5\u020e\u0108"+
		"\2\u0ad6\u0ad1\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u009d\3\2\2\2\u0ad8\u0ad9"+
		"\7\63\2\2\u0ad9\u0adb\7\u00a9\2\2\u0ada\u0adc\5\u024e\u0128\2\u0adb\u0ada"+
		"\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ade\5\u01fe\u0100"+
		"\2\u0ade\u009f\3\2\2\2\u0adf\u0ae0\7\63\2\2\u0ae0\u0ae2\7\u027f\2\2\u0ae1"+
		"\u0ae3\5\u024e\u0128\2\u0ae2\u0ae1\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae4"+
		"\3\2\2\2\u0ae4\u0ae9\5\u01fe\u0100\2\u0ae5\u0ae6\7\u0443\2\2\u0ae6\u0ae8"+
		"\5\u01fe\u0100\2\u0ae7\u0ae5\3\2\2\2\u0ae8\u0aeb\3\2\2\2\u0ae9\u0ae7\3"+
		"\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aed\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aec"+
		"\u0aee\t%\2\2\u0aed\u0aec\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u00a1\3\2"+
		"\2\2\u0aef\u0af0\7\u0086\2\2\u0af0\u0af1\7\u00a4\2\2\u0af1\u0af6\5\u00a4"+
		"S\2\u0af2\u0af3\7\u0443\2\2\u0af3\u0af5\5\u00a4S\2\u0af4\u0af2\3\2\2\2"+
		"\u0af5\u0af8\3\2\2\2\u0af6\u0af4\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u00a3"+
		"\3\2\2\2\u0af8\u0af6\3\2\2\2\u0af9\u0afa\5\u0200\u0101\2\u0afa\u0afb\7"+
		"\u00a7\2\2\u0afb\u0afc\5\u0200\u0101\2\u0afc\u00a5\3\2\2\2\u0afd\u0aff"+
		"\7\u0270\2\2\u0afe\u0b00\7\u00a4\2\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00\3"+
		"\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b02\5\u0200\u0101\2\u0b02\u00a7\3\2"+
		"\2\2\u0b03\u0b04\7\25\2\2\u0b04\u0b0b\5\u01fe\u0100\2\u0b05\u0b08\7\u0441"+
		"\2\2\u0b06\u0b09\5\u0242\u0122\2\u0b07\u0b09\5\u023e\u0120\2\u0b08\u0b06"+
		"\3\2\2\2\u0b08\u0b07\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a"+
		"\u0b0c\7\u0442\2\2\u0b0b\u0b05\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u00a9"+
		"\3\2\2\2\u0b0d\u0b10\5\u00c4c\2\u0b0e\u0b10\5\u00c6d\2\u0b0f\u0b0d\3\2"+
		"\2\2\u0b0f\u0b0e\3\2\2\2\u0b10\u00ab\3\2\2\2\u0b11\u0b12\7\u0182\2\2\u0b12"+
		"\u0b13\5\u023e\u0120\2\u0b13\u00ad\3\2\2\2\u0b14\u0b19\5\u00c8e\2\u0b15"+
		"\u0b19\5\u00caf\2\u0b16\u0b19\5\u00ccg\2\u0b17\u0b19\5\u00ceh\2\u0b18"+
		"\u0b14\3\2\2\2\u0b18\u0b15\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b18\u0b17\3\2"+
		"\2\2\u0b19\u00af\3\2\2\2\u0b1a\u0b1c\7S\2\2\u0b1b\u0b1d\t&\2\2\u0b1c\u0b1b"+
		"\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1f\3\2\2\2\u0b1e\u0b20\7M\2\2\u0b1f"+
		"\u0b1e\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0b22\3\2\2\2\u0b21\u0b23\7U"+
		"\2\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24"+
		"\u0b2b\5\u0200\u0101\2\u0b25\u0b26\7|\2\2\u0b26\u0b28\7\u0441\2\2\u0b27"+
		"\u0b29\5\u0238\u011d\2\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2a"+
		"\3\2\2\2\u0b2a\u0b2c\7\u0442\2\2\u0b2b\u0b25\3\2\2\2\u0b2b\u0b2c\3\2\2"+
		"\2\u0b2c\u0b3d\3\2\2\2\u0b2d\u0b2e\7\u0441\2\2\u0b2e\u0b2f\5\u0238\u011d"+
		"\2\u0b2f\u0b30\7\u0442\2\2\u0b30\u0b32\3\2\2\2\u0b31\u0b2d\3\2\2\2\u0b31"+
		"\u0b32\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b3e\5\u00bc_\2\u0b34\u0b35"+
		"\7\u0094\2\2\u0b35\u0b3a\5\u00be`\2\u0b36\u0b37\7\u0443\2\2\u0b37\u0b39"+
		"\5\u00be`\2\u0b38\u0b36\3\2\2\2\u0b39\u0b3c\3\2\2\2\u0b3a\u0b38\3\2\2"+
		"\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3e\3\2\2\2\u0b3c\u0b3a\3\2\2\2\u0b3d\u0b31"+
		"\3\2\2\2\u0b3d\u0b34\3\2\2\2\u0b3e\u0b4b\3\2\2\2\u0b3f\u0b40\7q\2\2\u0b40"+
		"\u0b41\7\u0184\2\2\u0b41\u0b42\7Y\2\2\u0b42\u0b43\7\u00b0\2\2\u0b43\u0b48"+
		"\5\u00be`\2\u0b44\u0b45\7\u0443\2\2\u0b45\u0b47\5\u00be`\2\u0b46\u0b44"+
		"\3\2\2\2\u0b47\u0b4a\3\2\2\2\u0b48\u0b46\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49"+
		"\u0b4c\3\2\2\2\u0b4a\u0b48\3\2\2\2\u0b4b\u0b3f\3\2\2\2\u0b4b\u0b4c\3\2"+
		"\2\2\u0b4c\u00b1\3\2\2\2\u0b4d\u0b4e\7c\2\2\u0b4e\u0b50\7\u0177\2\2\u0b4f"+
		"\u0b51\t\'\2\2\u0b50\u0b4f\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b53\3\2"+
		"\2\2\u0b52\u0b54\7\u01c8\2\2\u0b53\u0b52\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54"+
		"\u0b55\3\2\2\2\u0b55\u0b56\7P\2\2\u0b56\u0b58\7\u0450\2\2\u0b57\u0b59"+
		"\t\b\2\2\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a"+
		"\u0b5b\7U\2\2\u0b5b\u0b5c\7\u00a4\2\2\u0b5c\u0b62\5\u0200\u0101\2\u0b5d"+
		"\u0b5e\7|\2\2\u0b5e\u0b5f\7\u0441\2\2\u0b5f\u0b60\5\u0238\u011d\2\u0b60"+
		"\u0b61\7\u0442\2\2\u0b61\u0b63\3\2\2\2\u0b62\u0b5d\3\2\2\2\u0b62\u0b63"+
		"\3\2\2\2\u0b63\u0b67\3\2\2\2\u0b64\u0b65\7\32\2\2\u0b65\u0b66\7\u0094"+
		"\2\2\u0b66\u0b68\5\u020a\u0106\2\u0b67\u0b64\3\2\2\2\u0b67\u0b68\3\2\2"+
		"\2\u0b68\u0b6f\3\2\2\2\u0b69\u0b6b\t(\2\2\u0b6a\u0b6c\5\u00f8}\2\u0b6b"+
		"\u0b6a\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b6b\3\2\2\2\u0b6d\u0b6e\3\2"+
		"\2\2\u0b6e\u0b70\3\2\2\2\u0b6f\u0b69\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70"+
		"\u0b77\3\2\2\2\u0b71\u0b73\7b\2\2\u0b72\u0b74\5\u00fa~\2\u0b73\u0b72\3"+
		"\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b73\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76"+
		"\u0b78\3\2\2\2\u0b77\u0b71\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b7d\3\2"+
		"\2\2\u0b79\u0b7a\7M\2\2\u0b7a\u0b7b\5\u021e\u0110\2\u0b7b\u0b7c\t)\2\2"+
		"\u0b7c\u0b7e\3\2\2\2\u0b7d\u0b79\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e\u0b8a"+
		"\3\2\2\2\u0b7f\u0b80\7\u0441\2\2\u0b80\u0b85\5\u00c0a\2\u0b81\u0b82\7"+
		"\u0443\2\2\u0b82\u0b84\5\u00c0a\2\u0b83\u0b81\3\2\2\2\u0b84\u0b87\3\2"+
		"\2\2\u0b85\u0b83\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b88\3\2\2\2\u0b87"+
		"\u0b85\3\2\2\2\u0b88\u0b89\7\u0442\2\2\u0b89\u0b8b\3\2\2\2\u0b8a\u0b7f"+
		"\3\2\2\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0b95\3\2\2\2\u0b8c\u0b8d\7\u0094\2"+
		"\2\u0b8d\u0b92\5\u00be`\2\u0b8e\u0b8f\7\u0443\2\2\u0b8f\u0b91\5\u00be"+
		"`\2\u0b90\u0b8e\3\2\2\2\u0b91\u0b94\3\2\2\2\u0b92\u0b90\3\2\2\2\u0b92"+
		"\u0b93\3\2\2\2\u0b93\u0b96\3\2\2\2\u0b94\u0b92\3\2\2\2\u0b95\u0b8c\3\2"+
		"\2\2\u0b95\u0b96\3\2\2\2\u0b96\u00b3\3\2\2\2\u0b97\u0b98\7c\2\2\u0b98"+
		"\u0b9a\7\u028a\2\2\u0b99\u0b9b\t\'\2\2\u0b9a\u0b99\3\2\2\2\u0b9a\u0b9b"+
		"\3\2\2\2\u0b9b\u0b9d\3\2\2\2\u0b9c\u0b9e\7\u01c8\2\2\u0b9d\u0b9c\3\2\2"+
		"\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba0\7P\2\2\u0ba0\u0ba2"+
		"\7\u0450\2\2\u0ba1\u0ba3\t\b\2\2\u0ba2\u0ba1\3\2\2\2\u0ba2\u0ba3\3\2\2"+
		"\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba5\7U\2\2\u0ba5\u0ba6\7\u00a4\2\2\u0ba6"+
		"\u0baa\5\u0200\u0101\2\u0ba7\u0ba8\7\32\2\2\u0ba8\u0ba9\7\u0094\2\2\u0ba9"+
		"\u0bab\5\u020a\u0106\2\u0baa\u0ba7\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bb2"+
		"\3\2\2\2\u0bac\u0bad\7\u023b\2\2\u0bad\u0bae\7\u01af\2\2\u0bae\u0baf\7"+
		"\24\2\2\u0baf\u0bb0\7\u043a\2\2\u0bb0\u0bb1\7\u0450\2\2\u0bb1\u0bb3\7"+
		"\u0439\2\2\u0bb2\u0bac\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb8\3\2\2\2"+
		"\u0bb4\u0bb5\7M\2\2\u0bb5\u0bb6\5\u021e\u0110\2\u0bb6\u0bb7\t)\2\2\u0bb7"+
		"\u0bb9\3\2\2\2\u0bb8\u0bb4\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bc5\3\2"+
		"\2\2\u0bba\u0bbb\7\u0441\2\2\u0bbb\u0bc0\5\u00c0a\2\u0bbc\u0bbd\7\u0443"+
		"\2\2\u0bbd\u0bbf\5\u00c0a\2\u0bbe\u0bbc\3\2\2\2\u0bbf\u0bc2\3\2\2\2\u0bc0"+
		"\u0bbe\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc3\3\2\2\2\u0bc2\u0bc0\3\2"+
		"\2\2\u0bc3\u0bc4\7\u0442\2\2\u0bc4\u0bc6\3\2\2\2\u0bc5\u0bba\3\2\2\2\u0bc5"+
		"\u0bc6\3\2\2\2\u0bc6\u0bd0\3\2\2\2\u0bc7\u0bc8\7\u0094\2\2\u0bc8\u0bcd"+
		"\5\u00be`\2\u0bc9\u0bca\7\u0443\2\2\u0bca\u0bcc\5\u00be`\2\u0bcb\u0bc9"+
		"\3\2\2\2\u0bcc\u0bcf\3\2\2\2\u0bcd\u0bcb\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce"+
		"\u0bd1\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bd0\u0bc7\3\2\2\2\u0bd0\u0bd1\3\2"+
		"\2\2\u0bd1\u00b5\3\2\2\2\u0bd2\u0bd4\7\u0088\2\2\u0bd3\u0bd5\t*\2\2\u0bd4"+
		"\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bd8\7U"+
		"\2\2\u0bd7\u0bd6\3\2\2\2\u0bd7\u0bd8\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9"+
		"\u0bdf\5\u0200\u0101\2\u0bda\u0bdb\7|\2\2\u0bdb\u0bdc\7\u0441\2\2\u0bdc"+
		"\u0bdd\5\u0238\u011d\2\u0bdd\u0bde\7\u0442\2\2\u0bde\u0be0\3\2\2\2\u0bdf"+
		"\u0bda\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0bf1\3\2\2\2\u0be1\u0be2\7\u0441"+
		"\2\2\u0be2\u0be3\5\u0238\u011d\2\u0be3\u0be4\7\u0442\2\2\u0be4\u0be6\3"+
		"\2\2\2\u0be5\u0be1\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7"+
		"\u0bf2\5\u00bc_\2\u0be8\u0be9\7\u0094\2\2\u0be9\u0bee\5\u00be`\2\u0bea"+
		"\u0beb\7\u0443\2\2\u0beb\u0bed\5\u00be`\2\u0bec\u0bea\3\2\2\2\u0bed\u0bf0"+
		"\3\2\2\2\u0bee\u0bec\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u0bf2\3\2\2\2\u0bf0"+
		"\u0bee\3\2\2\2\u0bf1\u0be5\3\2\2\2\u0bf1\u0be8\3\2\2\2\u0bf2\u00b7\3\2"+
		"\2\2\u0bf3\u0bf5\5\u00e8u\2\u0bf4\u0bf6\5\u00c2b\2\u0bf5\u0bf4\3\2\2\2"+
		"\u0bf5\u0bf6\3\2\2\2\u0bf6\u0c2b\3\2\2\2\u0bf7\u0bf9\5\u00e4s\2\u0bf8"+
		"\u0bfa\5\u00c2b\2\u0bf9\u0bf8\3\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0c2b"+
		"\3\2\2\2\u0bfb\u0bfd\5\u00eav\2\u0bfc\u0bfe\5\u00eex\2\u0bfd\u0bfc\3\2"+
		"\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0bfd\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00"+
		"\u0c09\3\2\2\2\u0c01\u0c03\7\u00ac\2\2\u0c02\u0c04\t+\2\2\u0c03\u0c02"+
		"\3\2\2\2\u0c03\u0c04\3\2\2\2\u0c04\u0c07\3\2\2\2\u0c05\u0c08\5\u00e8u"+
		"\2\u0c06\u0c08\5\u00e4s\2\u0c07\u0c05\3\2\2\2\u0c07\u0c06\3\2\2\2\u0c08"+
		"\u0c0a\3\2\2\2\u0c09\u0c01\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0c\3\2"+
		"\2\2\u0c0b\u0c0d\5\u00d4k\2\u0c0c\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d"+
		"\u0c0f\3\2\2\2\u0c0e\u0c10\5\u0106\u0084\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10"+
		"\3\2\2\2\u0c10\u0c12\3\2\2\2\u0c11\u0c13\5\u00c2b\2\u0c12\u0c11\3\2\2"+
		"\2\u0c12\u0c13\3\2\2\2\u0c13\u0c2b\3\2\2\2\u0c14\u0c16\5\u00e6t\2\u0c15"+
		"\u0c17\5\u00ecw\2\u0c16\u0c15\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c16"+
		"\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c1f\3\2\2\2\u0c1a\u0c1c\7\u00ac\2"+
		"\2\u0c1b\u0c1d\t+\2\2\u0c1c\u0c1b\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e"+
		"\3\2\2\2\u0c1e\u0c20\5\u00e4s\2\u0c1f\u0c1a\3\2\2\2\u0c1f\u0c20\3\2\2"+
		"\2\u0c20\u0c22\3\2\2\2\u0c21\u0c23\5\u00d4k\2\u0c22\u0c21\3\2\2\2\u0c22"+
		"\u0c23\3\2\2\2\u0c23\u0c25\3\2\2\2\u0c24\u0c26\5\u0106\u0084\2\u0c25\u0c24"+
		"\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c28\3\2\2\2\u0c27\u0c29\5\u00c2b"+
		"\2\u0c28\u0c27\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2b\3\2\2\2\u0c2a\u0bf3"+
		"\3\2\2\2\u0c2a\u0bf7\3\2\2\2\u0c2a\u0bfb\3\2\2\2\u0c2a\u0c14\3\2\2\2\u0c2b"+
		"\u00b9\3\2\2\2\u0c2c\u0c2f\5\u00d0i\2\u0c2d\u0c2f\5\u00d2j\2\u0c2e\u0c2c"+
		"\3\2\2\2\u0c2e\u0c2d\3\2\2\2\u0c2f\u00bb\3\2\2\2\u0c30\u0c43\5\u00b8]"+
		"\2\u0c31\u0c32\t,\2\2\u0c32\u0c34\7\u0441\2\2\u0c33\u0c35\5\u0240\u0121"+
		"\2\u0c34\u0c33\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c3f"+
		"\7\u0442\2\2\u0c37\u0c38\7\u0443\2\2\u0c38\u0c3a\7\u0441\2\2\u0c39\u0c3b"+
		"\5\u0240\u0121\2\u0c3a\u0c39\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3c\3"+
		"\2\2\2\u0c3c\u0c3e\7\u0442\2\2\u0c3d\u0c37\3\2\2\2\u0c3e\u0c41\3\2\2\2"+
		"\u0c3f\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c43\3\2\2\2\u0c41\u0c3f"+
		"\3\2\2\2\u0c42\u0c30\3\2\2\2\u0c42\u0c31\3\2\2\2\u0c43\u00bd\3\2\2\2\u0c44"+
		"\u0c45\5\u0202\u0102\2\u0c45\u0c48\7\u0438\2\2\u0c46\u0c49\5\u027a\u013e"+
		"\2\u0c47\u0c49\7*\2\2\u0c48\u0c46\3\2\2\2\u0c48\u0c47\3\2\2\2\u0c49\u00bf"+
		"\3\2\2\2\u0c4a\u0c4d\5\u0218\u010d\2\u0c4b\u0c4d\7\u045c\2\2\u0c4c\u0c4a"+
		"\3\2\2\2\u0c4c\u0c4b\3\2\2\2\u0c4d\u00c1\3\2\2\2\u0c4e\u0c4f\7@\2\2\u0c4f"+
		"\u0c55\7\u00b0\2\2\u0c50\u0c51\7d\2\2\u0c51\u0c52\7N\2\2\u0c52\u0c53\7"+
		"\u0242\2\2\u0c53\u0c55\7\u01ed\2\2\u0c54\u0c4e\3\2\2\2\u0c54\u0c50\3\2"+
		"\2\2\u0c55\u00c3\3\2\2\2\u0c56\u0c58\7,\2\2\u0c57\u0c59\7f\2\2\u0c58\u0c57"+
		"\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5b\3\2\2\2\u0c5a\u0c5c\7\u021d\2"+
		"\2\u0c5b\u0c5a\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0c5e\3\2\2\2\u0c5d\u0c5f"+
		"\7M\2\2\u0c5e\u0c5d\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60"+
		"\u0c61\7C\2\2\u0c61\u0c67\5\u0200\u0101\2\u0c62\u0c63\7|\2\2\u0c63\u0c64"+
		"\7\u0441\2\2\u0c64\u0c65\5\u0238\u011d\2\u0c65\u0c66\7\u0442\2\2\u0c66"+
		"\u0c68\3\2\2\2\u0c67\u0c62\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c6b\3\2"+
		"\2\2\u0c69\u0c6a\7\u00b6\2\2\u0c6a\u0c6c\5\u027a\u013e\2\u0c6b\u0c69\3"+
		"\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c6e\3\2\2\2\u0c6d\u0c6f\5\u00d4k\2"+
		"\u0c6e\u0c6d\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f\u0c72\3\2\2\2\u0c70\u0c71"+
		"\7`\2\2\u0c71\u0c73\5\u0108\u0085\2\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3"+
		"\2\2\2\u0c73\u00c5\3\2\2\2\u0c74\u0c76\7,\2\2\u0c75\u0c77\7f\2\2\u0c76"+
		"\u0c75\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c79\3\2\2\2\u0c78\u0c7a\7\u021d"+
		"\2\2\u0c79\u0c78\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7c\3\2\2\2\u0c7b"+
		"\u0c7d\7M\2\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0ca5\3\2"+
		"\2\2\u0c7e\u0c81\5\u0200\u0101\2\u0c7f\u0c80\7\u0440\2\2\u0c80\u0c82\7"+
		"\u0431\2\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c8b\3\2\2\2"+
		"\u0c83\u0c84\7\u0443\2\2\u0c84\u0c87\5\u0200\u0101\2\u0c85\u0c86\7\u0440"+
		"\2\2\u0c86\u0c88\7\u0431\2\2\u0c87\u0c85\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88"+
		"\u0c8a\3\2\2\2\u0c89\u0c83\3\2\2\2\u0c8a\u0c8d\3\2\2\2\u0c8b\u0c89\3\2"+
		"\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8e\3\2\2\2\u0c8d\u0c8b\3\2\2\2\u0c8e"+
		"\u0c8f\7C\2\2\u0c8f\u0c90\5\u00d8m\2\u0c90\u0ca6\3\2\2\2\u0c91\u0c92\7"+
		"C\2\2\u0c92\u0c95\5\u0200\u0101\2\u0c93\u0c94\7\u0440\2\2\u0c94\u0c96"+
		"\7\u0431\2\2\u0c95\u0c93\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0c9f\3\2\2"+
		"\2\u0c97\u0c98\7\u0443\2\2\u0c98\u0c9b\5\u0200\u0101\2\u0c99\u0c9a\7\u0440"+
		"\2\2\u0c9a\u0c9c\7\u0431\2\2\u0c9b\u0c99\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c"+
		"\u0c9e\3\2\2\2\u0c9d\u0c97\3\2\2\2\u0c9e\u0ca1\3\2\2\2\u0c9f\u0c9d\3\2"+
		"\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1\u0c9f\3\2\2\2\u0ca2"+
		"\u0ca3\7\u00b3\2\2\u0ca3\u0ca4\5\u00d8m\2\u0ca4\u0ca6\3\2\2\2\u0ca5\u0c7e"+
		"\3\2\2\2\u0ca5\u0c91\3\2\2\2\u0ca6\u0ca9\3\2\2\2\u0ca7\u0ca8\7\u00b6\2"+
		"\2\u0ca8\u0caa\5\u027a\u013e\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0caa\3\2\2\2"+
		"\u0caa\u00c7\3\2\2\2\u0cab\u0cac\7\u01aa\2\2\u0cac\u0cad\5\u0200\u0101"+
		"\2\u0cad\u0cb2\7\u0203\2\2\u0cae\u0cb0\7\16\2\2\u0caf\u0cae\3\2\2\2\u0caf"+
		"\u0cb0\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb3\5\u0218\u010d\2\u0cb2\u0caf"+
		"\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u00c9\3\2\2\2\u0cb4\u0cb5\7\u01aa\2"+
		"\2\u0cb5\u0cb6\5\u0200\u0101\2\u0cb6\u0cb7\7\u0081\2\2\u0cb7\u0cbe\5\u0218"+
		"\u010d\2\u0cb8\u0cb9\5\u0282\u0142\2\u0cb9\u0cba\7\u0441\2\2\u0cba\u0cbb"+
		"\5\u0242\u0122\2\u0cbb\u0cbc\7\u0442\2\2\u0cbc\u0cbf\3\2\2\2\u0cbd\u0cbf"+
		"\t-\2\2\u0cbe\u0cb8\3\2\2\2\u0cbe\u0cbd\3\2\2\2\u0cbf\u0cc2\3\2\2\2\u0cc0"+
		"\u0cc1\7\u00b6\2\2\u0cc1\u0cc3\5\u027a\u013e\2\u0cc2\u0cc0\3\2\2\2\u0cc2"+
		"\u0cc3\3\2\2\2\u0cc3\u0cc6\3\2\2\2\u0cc4\u0cc5\7`\2\2\u0cc5\u0cc7\5\u0108"+
		"\u0085\2\u0cc6\u0cc4\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u00cb\3\2\2\2\u0cc8"+
		"\u0cc9\7\u01aa\2\2\u0cc9\u0cca\5\u0200\u0101\2\u0cca\u0ccb\7\u0081\2\2"+
		"\u0ccb\u0cce\t.\2\2\u0ccc\u0ccd\7\u00b6\2\2\u0ccd\u0ccf\5\u027a\u013e"+
		"\2\u0cce\u0ccc\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd2\3\2\2\2\u0cd0\u0cd1"+
		"\7`\2\2\u0cd1\u0cd3\5\u0108\u0085\2\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd3\3"+
		"\2\2\2\u0cd3\u00cd\3\2\2\2\u0cd4\u0cd5\7\u01aa\2\2\u0cd5\u0cd6\5\u0200"+
		"\u0101\2\u0cd6\u0cd7\7\u015e\2\2\u0cd7\u00cf\3\2\2\2\u0cd8\u0cda\7\u00b0"+
		"\2\2\u0cd9\u0cdb\7f\2\2\u0cda\u0cd9\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb"+
		"\u0cdd\3\2\2\2\u0cdc\u0cde\7M\2\2\u0cdd\u0cdc\3\2\2\2\u0cdd\u0cde\3\2"+
		"\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce4\5\u0200\u0101\2\u0ce0\u0ce2\7\16"+
		"\2\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3"+
		"\u0ce5\5\u0218\u010d\2\u0ce4\u0ce1\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0ce6"+
		"\3\2\2\2\u0ce6\u0ce7\7\u0094\2\2\u0ce7\u0cec\5\u00be`\2\u0ce8\u0ce9\7"+
		"\u0443\2\2\u0ce9\u0ceb\5\u00be`\2\u0cea\u0ce8\3\2\2\2\u0ceb\u0cee\3\2"+
		"\2\2\u0cec\u0cea\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cf1\3\2\2\2\u0cee"+
		"\u0cec\3\2\2\2\u0cef\u0cf0\7\u00b6\2\2\u0cf0\u0cf2\5\u027a\u013e\2\u0cf1"+
		"\u0cef\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\3\2\2\2\u0cf3\u0cf5\5\u00d4"+
		"k\2\u0cf4\u0cf3\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0cf7\3\2\2\2\u0cf6"+
		"\u0cf8\5\u0106\u0084\2\u0cf7\u0cf6\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u00d1"+
		"\3\2\2\2\u0cf9\u0cfb\7\u00b0\2\2\u0cfa\u0cfc\7f\2\2\u0cfb\u0cfa\3\2\2"+
		"\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfe\3\2\2\2\u0cfd\u0cff\7M\2\2\u0cfe\u0cfd"+
		"\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0d01\5\u00d8m"+
		"\2\u0d01\u0d02\7\u0094\2\2\u0d02\u0d07\5\u00be`\2\u0d03\u0d04\7\u0443"+
		"\2\2\u0d04\u0d06\5\u00be`\2\u0d05\u0d03\3\2\2\2\u0d06\u0d09\3\2\2\2\u0d07"+
		"\u0d05\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d0c\3\2\2\2\u0d09\u0d07\3\2"+
		"\2\2\u0d0a\u0d0b\7\u00b6\2\2\u0d0b\u0d0d\5\u027a\u013e\2\u0d0c\u0d0a\3"+
		"\2\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u00d3\3\2\2\2\u0d0e\u0d0f\7w\2\2\u0d0f"+
		"\u0d10\7\24\2\2\u0d10\u0d15\5\u00d6l\2\u0d11\u0d12\7\u0443\2\2\u0d12\u0d14"+
		"\5\u00d6l\2\u0d13\u0d11\3\2\2\2\u0d14\u0d17\3\2\2\2\u0d15\u0d13\3\2\2"+
		"\2\u0d15\u0d16\3\2\2\2\u0d16\u00d5\3\2\2\2\u0d17\u0d15\3\2\2\2\u0d18\u0d1a"+
		"\5\u027a\u013e\2\u0d19\u0d1b\t/\2\2\u0d1a\u0d19\3\2\2\2\u0d1a\u0d1b\3"+
		"\2\2\2\u0d1b\u00d7\3\2\2\2\u0d1c\u0d21\5\u00dan\2\u0d1d\u0d1e\7\u0443"+
		"\2\2\u0d1e\u0d20\5\u00dan\2\u0d1f\u0d1d\3\2\2\2\u0d20\u0d23\3\2\2\2\u0d21"+
		"\u0d1f\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u00d9\3\2\2\2\u0d23\u0d21\3\2"+
		"\2\2\u0d24\u0d28\5\u00dco\2\u0d25\u0d27\5\u00e2r\2\u0d26\u0d25\3\2\2\2"+
		"\u0d27\u0d2a\3\2\2\2\u0d28\u0d26\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u0d36"+
		"\3\2\2\2\u0d2a\u0d28\3\2\2\2\u0d2b\u0d2c\7\u0441\2\2\u0d2c\u0d30\5\u00dc"+
		"o\2\u0d2d\u0d2f\5\u00e2r\2\u0d2e\u0d2d\3\2\2\2\u0d2f\u0d32\3\2\2\2\u0d30"+
		"\u0d2e\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d33\3\2\2\2\u0d32\u0d30\3\2"+
		"\2\2\u0d33\u0d34\7\u0442\2\2\u0d34\u0d36\3\2\2\2\u0d35\u0d24\3\2\2\2\u0d35"+
		"\u0d2b\3\2\2\2\u0d36\u00db\3\2\2\2\u0d37\u0d3d\5\u0200\u0101\2\u0d38\u0d39"+
		"\7|\2\2\u0d39\u0d3a\7\u0441\2\2\u0d3a\u0d3b\5\u0238\u011d\2\u0d3b\u0d3c"+
		"\7\u0442\2\2\u0d3c\u0d3e\3\2\2\2\u0d3d\u0d38\3\2\2\2\u0d3d\u0d3e\3\2\2"+
		"\2\u0d3e\u0d43\3\2\2\2\u0d3f\u0d41\7\16\2\2\u0d40\u0d3f\3\2\2\2\u0d40"+
		"\u0d41\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d44\5\u0218\u010d\2\u0d43\u0d40"+
		"\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d4d\3\2\2\2\u0d45\u0d4a\5\u00dep"+
		"\2\u0d46\u0d47\7\u0443\2\2\u0d47\u0d49\5\u00dep\2\u0d48\u0d46\3\2\2\2"+
		"\u0d49\u0d4c\3\2\2\2\u0d4a\u0d48\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d4e"+
		"\3\2\2\2\u0d4c\u0d4a\3\2\2\2\u0d4d\u0d45\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e"+
		"\u0d60\3\2\2\2\u0d4f\u0d55\5\u00b8]\2\u0d50\u0d51\7\u0441\2\2\u0d51\u0d52"+
		"\5\u00b8]\2\u0d52\u0d53\7\u0442\2\2\u0d53\u0d55\3\2\2\2\u0d54\u0d4f\3"+
		"\2\2\2\u0d54\u0d50\3\2\2\2\u0d55\u0d57\3\2\2\2\u0d56\u0d58\7\16\2\2\u0d57"+
		"\u0d56\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0d5a\5\u0218"+
		"\u010d\2\u0d5a\u0d60\3\2\2\2\u0d5b\u0d5c\7\u0441\2\2\u0d5c\u0d5d\5\u00d8"+
		"m\2\u0d5d\u0d5e\7\u0442\2\2\u0d5e\u0d60\3\2\2\2\u0d5f\u0d37\3\2\2\2\u0d5f"+
		"\u0d54\3\2\2\2\u0d5f\u0d5b\3\2\2\2\u0d60\u00dd\3\2\2\2\u0d61\u0d62\t\60"+
		"\2\2\u0d62\u0d65\t\24\2\2\u0d63\u0d64\7@\2\2\u0d64\u0d66\5\u00e0q\2\u0d65"+
		"\u0d63\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d68\7\u0441"+
		"\2\2\u0d68\u0d69\5\u0238\u011d\2\u0d69\u0d6a\7\u0442\2\2\u0d6a\u00df\3"+
		"\2\2\2\u0d6b\u0d71\7X\2\2\u0d6c\u0d6d\7w\2\2\u0d6d\u0d71\7\24\2\2\u0d6e"+
		"\u0d6f\7H\2\2\u0d6f\u0d71\7\24\2\2\u0d70\u0d6b\3\2\2\2\u0d70\u0d6c\3\2"+
		"\2\2\u0d70\u0d6e\3\2\2\2\u0d71\u00e1\3\2\2\2\u0d72\u0d74\t\61\2\2\u0d73"+
		"\u0d72\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d75\3\2\2\2\u0d75\u0d76\7X"+
		"\2\2\u0d76\u0d7e\5\u00dco\2\u0d77\u0d78\7q\2\2\u0d78\u0d7f\5\u027a\u013e"+
		"\2\u0d79\u0d7a\7\u00b3\2\2\u0d7a\u0d7b\7\u0441\2\2\u0d7b\u0d7c\5\u0238"+
		"\u011d\2\u0d7c\u0d7d\7\u0442\2\2\u0d7d\u0d7f\3\2\2\2\u0d7e\u0d77\3\2\2"+
		"\2\u0d7e\u0d79\3\2\2\2\u0d7e\u0d7f\3\2\2\2\u0d7f\u0d9f\3\2\2\2\u0d80\u0d81"+
		"\7\u00a3\2\2\u0d81\u0d84\5\u00dco\2\u0d82\u0d83\7q\2\2\u0d83\u0d85\5\u027a"+
		"\u013e\2\u0d84\u0d82\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d9f\3\2\2\2\u0d86"+
		"\u0d88\t\62\2\2\u0d87\u0d89\7z\2\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2"+
		"\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8b\7X\2\2\u0d8b\u0d93\5\u00dco\2\u0d8c"+
		"\u0d8d\7q\2\2\u0d8d\u0d94\5\u027a\u013e\2\u0d8e\u0d8f\7\u00b3\2\2\u0d8f"+
		"\u0d90\7\u0441\2\2\u0d90\u0d91\5\u0238\u011d\2\u0d91\u0d92\7\u0442\2\2"+
		"\u0d92\u0d94\3\2\2\2\u0d93\u0d8c\3\2\2\2\u0d93\u0d8e\3\2\2\2\u0d94\u0d9f"+
		"\3\2\2\2\u0d95\u0d9a\7l\2\2\u0d96\u0d98\t\62\2\2\u0d97\u0d99\7z\2\2\u0d98"+
		"\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9b\3\2\2\2\u0d9a\u0d96\3\2"+
		"\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0d9d\7X\2\2\u0d9d"+
		"\u0d9f\5\u00dco\2\u0d9e\u0d73\3\2\2\2\u0d9e\u0d80\3\2\2\2\u0d9e\u0d86"+
		"\3\2\2\2\u0d9e\u0d95\3\2\2\2\u0d9f\u00e3\3\2\2\2\u0da0\u0da1\7\u0441\2"+
		"\2\u0da1\u0da2\5\u00e8u\2\u0da2\u0da3\7\u0442\2\2\u0da3\u0da9\3\2\2\2"+
		"\u0da4\u0da5\7\u0441\2\2\u0da5\u0da6\5\u00e4s\2\u0da6\u0da7\7\u0442\2"+
		"\2\u0da7\u0da9\3\2\2\2\u0da8\u0da0\3\2\2\2\u0da8\u0da4\3\2\2\2\u0da9\u00e5"+
		"\3\2\2\2\u0daa\u0dab\7\u0441\2\2\u0dab\u0dac\5\u00eav\2\u0dac\u0dad\7"+
		"\u0442\2\2\u0dad\u0db3\3\2\2\2\u0dae\u0daf\7\u0441\2\2\u0daf\u0db0\5\u00e6"+
		"t\2\u0db0\u0db1\7\u0442\2\2\u0db1\u0db3\3\2\2\2\u0db2\u0daa\3\2\2\2\u0db2"+
		"\u0dae\3\2\2\2\u0db3\u00e7\3\2\2\2\u0db4\u0db8\7\u0093\2\2\u0db5\u0db7"+
		"\5\u00f0y\2\u0db6\u0db5\3\2\2\2\u0db7\u0dba\3\2\2\2\u0db8\u0db6\3\2\2"+
		"\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbb\3\2\2\2\u0dba\u0db8\3\2\2\2\u0dbb\u0dbd"+
		"\5\u00f2z\2\u0dbc\u0dbe\5\u00f6|\2\u0dbd\u0dbc\3\2\2\2\u0dbd\u0dbe\3\2"+
		"\2\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dc1\5\u00fc\177\2\u0dc0\u0dbf\3\2\2\2"+
		"\u0dc0\u0dc1\3\2\2\2\u0dc1\u0dc3\3\2\2\2\u0dc2\u0dc4\5\u00fe\u0080\2\u0dc3"+
		"\u0dc2\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc6\3\2\2\2\u0dc5\u0dc7\5\u0100"+
		"\u0081\2\u0dc6\u0dc5\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc9\3\2\2\2\u0dc8"+
		"\u0dca\5\u0102\u0082\2\u0dc9\u0dc8\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcc"+
		"\3\2\2\2\u0dcb\u0dcd\5\u00d4k\2\u0dcc\u0dcb\3\2\2\2\u0dcc\u0dcd\3\2\2"+
		"\2\u0dcd\u0dcf\3\2\2\2\u0dce\u0dd0\5\u0106\u0084\2\u0dcf\u0dce\3\2\2\2"+
		"\u0dcf\u0dd0\3\2\2\2\u0dd0\u0def\3\2\2\2\u0dd1\u0dd5\7\u0093\2\2\u0dd2"+
		"\u0dd4\5\u00f0y\2\u0dd3\u0dd2\3\2\2\2\u0dd4\u0dd7\3\2\2\2\u0dd5\u0dd3"+
		"\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0dd5\3\2\2\2\u0dd8"+
		"\u0dda\5\u00f2z\2\u0dd9\u0ddb\5\u00fc\177\2\u0dda\u0dd9\3\2\2\2\u0dda"+
		"\u0ddb\3\2\2\2\u0ddb\u0ddd\3\2\2\2\u0ddc\u0dde\5\u00fe\u0080\2\u0ddd\u0ddc"+
		"\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0de0\3\2\2\2\u0ddf\u0de1\5\u0100\u0081"+
		"\2\u0de0\u0ddf\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de3\3\2\2\2\u0de2\u0de4"+
		"\5\u0102\u0082\2\u0de3\u0de2\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4\u0de6\3"+
		"\2\2\2\u0de5\u0de7\5\u00d4k\2\u0de6\u0de5\3\2\2\2\u0de6\u0de7\3\2\2\2"+
		"\u0de7\u0de9\3\2\2\2\u0de8\u0dea\5\u0106\u0084\2\u0de9\u0de8\3\2\2\2\u0de9"+
		"\u0dea\3\2\2\2\u0dea\u0dec\3\2\2\2\u0deb\u0ded\5\u00f6|\2\u0dec\u0deb"+
		"\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded\u0def\3\2\2\2\u0dee\u0db4\3\2\2\2\u0dee"+
		"\u0dd1\3\2\2\2\u0def\u00e9\3\2\2\2\u0df0\u0df4\7\u0093\2\2\u0df1\u0df3"+
		"\5\u00f0y\2\u0df2\u0df1\3\2\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2"+
		"\2\u0df4\u0df5\3\2\2\2\u0df5\u0df7\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0df9"+
		"\5\u00f2z\2\u0df8\u0dfa\5\u00fc\177\2\u0df9\u0df8\3\2\2\2\u0df9\u0dfa"+
		"\3\2\2\2\u0dfa\u0dfc\3\2\2\2\u0dfb\u0dfd\5\u00fe\u0080\2\u0dfc\u0dfb\3"+
		"\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u0dff\3\2\2\2\u0dfe\u0e00\5\u0100\u0081"+
		"\2\u0dff\u0dfe\3\2\2\2\u0dff\u0e00\3\2\2\2\u0e00\u0e02\3\2\2\2\u0e01\u0e03"+
		"\5\u0102\u0082\2\u0e02\u0e01\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e05\3"+
		"\2\2\2\u0e04\u0e06\5\u00d4k\2\u0e05\u0e04\3\2\2\2\u0e05\u0e06\3\2\2\2"+
		"\u0e06\u0e08\3\2\2\2\u0e07\u0e09\5\u0106\u0084\2\u0e08\u0e07\3\2\2\2\u0e08"+
		"\u0e09\3\2\2\2\u0e09\u00eb\3\2\2\2\u0e0a\u0e0c\7\u00ac\2\2\u0e0b\u0e0d"+
		"\t+\2\2\u0e0c\u0e0b\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e"+
		"\u0e0f\5\u00e6t\2\u0e0f\u00ed\3\2\2\2\u0e10\u0e12\7\u00ac\2\2\u0e11\u0e13"+
		"\t+\2\2\u0e12\u0e11\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u0e16\3\2\2\2\u0e14"+
		"\u0e17\5\u00eav\2\u0e15\u0e17\5\u00e6t\2\u0e16\u0e14\3\2\2\2\u0e16\u0e15"+
		"\3\2\2\2\u0e17\u00ef\3\2\2\2\u0e18\u0e21\t\63\2\2\u0e19\u0e21\7J\2\2\u0e1a"+
		"\u0e21\7\u00a3\2\2\u0e1b\u0e21\7\u009f\2\2\u0e1c\u0e21\7\u009d\2\2\u0e1d"+
		"\u0e21\7\u0251\2\2\u0e1e\u0e21\t\64\2\2\u0e1f\u0e21\7\u009e\2\2\u0e20"+
		"\u0e18\3\2\2\2\u0e20\u0e19\3\2\2\2\u0e20\u0e1a\3\2\2\2\u0e20\u0e1b\3\2"+
		"\2\2\u0e20\u0e1c\3\2\2\2\u0e20\u0e1d\3\2\2\2\u0e20\u0e1e\3\2\2\2\u0e20"+
		"\u0e1f\3\2\2\2\u0e21\u00f1\3\2\2\2\u0e22\u0e25\7\u0431\2\2\u0e23\u0e25"+
		"\5\u00f4{\2\u0e24\u0e22\3\2\2\2\u0e24\u0e23\3\2\2\2\u0e25\u0e2a\3\2\2"+
		"\2\u0e26\u0e27\7\u0443\2\2\u0e27\u0e29\5\u00f4{\2\u0e28\u0e26\3\2\2\2"+
		"\u0e29\u0e2c\3\2\2\2\u0e2a\u0e28\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u00f3"+
		"\3\2\2\2\u0e2c\u0e2a\3\2\2\2\u0e2d\u0e2e\5\u01fe\u0100\2\u0e2e\u0e2f\7"+
		"\u0440\2\2\u0e2f\u0e30\7\u0431\2\2\u0e30\u0e4b\3\2\2\2\u0e31\u0e36\5\u0202"+
		"\u0102\2\u0e32\u0e34\7\16\2\2\u0e33\u0e32\3\2\2\2\u0e33\u0e34\3\2\2\2"+
		"\u0e34\u0e35\3\2\2\2\u0e35\u0e37\5\u0218\u010d\2\u0e36\u0e33\3\2\2\2\u0e36"+
		"\u0e37\3\2\2\2\u0e37\u0e4b\3\2\2\2\u0e38\u0e3d\5\u0252\u012a\2\u0e39\u0e3b"+
		"\7\16\2\2\u0e3a\u0e39\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0e3c\3\2\2\2"+
		"\u0e3c\u0e3e\5\u0218\u010d\2\u0e3d\u0e3a\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e"+
		"\u0e4b\3\2\2\2\u0e3f\u0e40\7\u045c\2\2\u0e40\u0e42\7\u0428\2\2\u0e41\u0e3f"+
		"\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e48\5\u027a\u013e"+
		"\2\u0e44\u0e46\7\16\2\2\u0e45\u0e44\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46"+
		"\u0e47\3\2\2\2\u0e47\u0e49\5\u0218\u010d\2\u0e48\u0e45\3\2\2\2\u0e48\u0e49"+
		"\3\2\2\2\u0e49\u0e4b\3\2\2\2\u0e4a\u0e2d\3\2\2\2\u0e4a\u0e31\3\2\2\2\u0e4a"+
		"\u0e38\3\2\2\2\u0e4a\u0e41\3\2\2\2\u0e4b\u00f5\3\2\2\2\u0e4c\u0e4d\7U"+
		"\2\2\u0e4d\u0e52\5\u00c0a\2\u0e4e\u0e4f\7\u0443\2\2\u0e4f\u0e51\5\u00c0"+
		"a\2\u0e50\u0e4e\3\2\2\2\u0e51\u0e54\3\2\2\2\u0e52\u0e50\3\2\2\2\u0e52"+
		"\u0e53\3\2\2\2\u0e53\u0e71\3\2\2\2\u0e54\u0e52\3\2\2\2\u0e55\u0e56\7U"+
		"\2\2\u0e56\u0e57\7\u0183\2\2\u0e57\u0e71\7\u0450\2\2\u0e58\u0e59\7U\2"+
		"\2\u0e59\u0e5a\7{\2\2\u0e5a\u0e5e\7\u0450\2\2\u0e5b\u0e5c\7\32\2\2\u0e5c"+
		"\u0e5d\7\u0094\2\2\u0e5d\u0e5f\5\u020a\u0106\2\u0e5e\u0e5b\3\2\2\2\u0e5e"+
		"\u0e5f\3\2\2\2\u0e5f\u0e66\3\2\2\2\u0e60\u0e62\t(\2\2\u0e61\u0e63\5\u00f8"+
		"}\2\u0e62\u0e61\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e62\3\2\2\2\u0e64"+
		"\u0e65\3\2\2\2\u0e65\u0e67\3\2\2\2\u0e66\u0e60\3\2\2\2\u0e66\u0e67\3\2"+
		"\2\2\u0e67\u0e6e\3\2\2\2\u0e68\u0e6a\7b\2\2\u0e69\u0e6b\5\u00fa~\2\u0e6a"+
		"\u0e69\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e6a\3\2\2\2\u0e6c\u0e6d\3\2"+
		"\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e\u0e68\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f"+
		"\u0e71\3\2\2\2\u0e70\u0e4c\3\2\2\2\u0e70\u0e55\3\2\2\2\u0e70\u0e58\3\2"+
		"\2\2\u0e71\u00f7\3\2\2\2\u0e72\u0e73\7\u00a5\2\2\u0e73\u0e74\7\24\2\2"+
		"\u0e74\u0e7f\7\u0450\2\2\u0e75\u0e77\7u\2\2\u0e76\u0e75\3\2\2\2\u0e76"+
		"\u0e77\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0e79\78\2\2\u0e79\u0e7a\7\24"+
		"\2\2\u0e7a\u0e7f\7\u0450\2\2\u0e7b\u0e7c\79\2\2\u0e7c\u0e7d\7\24\2\2\u0e7d"+
		"\u0e7f\7\u0450\2\2\u0e7e\u0e72\3\2\2\2\u0e7e\u0e76\3\2\2\2\u0e7e\u0e7b"+
		"\3\2\2\2\u0e7f\u00f9\3\2\2\2\u0e80\u0e81\7\u00a2\2\2\u0e81\u0e82\7\24"+
		"\2\2\u0e82\u0e87\7\u0450\2\2\u0e83\u0e84\7\u00a5\2\2\u0e84\u0e85\7\24"+
		"\2\2\u0e85\u0e87\7\u0450\2\2\u0e86\u0e80\3\2\2\2\u0e86\u0e83\3\2\2\2\u0e87"+
		"\u00fb\3\2\2\2\u0e88\u0e89\7C\2\2\u0e89\u0e8b\5\u00d8m\2\u0e8a\u0e88\3"+
		"\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e8e\3\2\2\2\u0e8c\u0e8d\7\u00b6\2\2"+
		"\u0e8d\u0e8f\5\u027a\u013e\2\u0e8e\u0e8c\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f"+
		"\u00fd\3\2\2\2\u0e90\u0e91\7H\2\2\u0e91\u0e92\7\24\2\2\u0e92\u0e97\5\u0104"+
		"\u0083\2\u0e93\u0e94\7\u0443\2\2\u0e94\u0e96\5\u0104\u0083\2\u0e95\u0e93"+
		"\3\2\2\2\u0e96\u0e99\3\2\2\2\u0e97\u0e95\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98"+
		"\u0e9c\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e9a\u0e9b\7\u00b8\2\2\u0e9b\u0e9d"+
		"\7\u0238\2\2\u0e9c\u0e9a\3\2\2\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u00ff\3\2\2"+
		"\2\u0e9e\u0e9f\7I\2\2\u0e9f\u0ea0\5\u027a\u013e\2\u0ea0\u0101\3\2\2\2"+
		"\u0ea1\u0ea2\7\u0284\2\2\u0ea2\u0ea3\5\u0264\u0133\2\u0ea3\u0ea4\7\16"+
		"\2\2\u0ea4\u0ea5\7\u0441\2\2\u0ea5\u0ea6\5\u0262\u0132\2\u0ea6\u0eb0\7"+
		"\u0442\2\2\u0ea7\u0ea8\7\u0443\2\2\u0ea8\u0ea9\5\u0264\u0133\2\u0ea9\u0eaa"+
		"\7\16\2\2\u0eaa\u0eab\7\u0441\2\2\u0eab\u0eac\5\u0262\u0132\2\u0eac\u0ead"+
		"\7\u0442\2\2\u0ead\u0eaf\3\2\2\2\u0eae\u0ea7\3\2\2\2\u0eaf\u0eb2\3\2\2"+
		"\2\u0eb0\u0eae\3\2\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1\u0103\3\2\2\2\u0eb2\u0eb0"+
		"\3\2\2\2\u0eb3\u0eb5\5\u027a\u013e\2\u0eb4\u0eb6\t/\2\2\u0eb5\u0eb4\3"+
		"\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0105\3\2\2\2\u0eb7\u0ec2\7`\2\2\u0eb8"+
		"\u0eb9\5\u0108\u0085\2\u0eb9\u0eba\7\u0443\2\2\u0eba\u0ebc\3\2\2\2\u0ebb"+
		"\u0eb8\3\2\2\2\u0ebb\u0ebc\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd\u0ec3\5\u0108"+
		"\u0085\2\u0ebe\u0ebf\5\u0108\u0085\2\u0ebf\u0ec0\7\u01fc\2\2\u0ec0\u0ec1"+
		"\5\u0108\u0085\2\u0ec1\u0ec3\3\2\2\2\u0ec2\u0ebb\3\2\2\2\u0ec2\u0ebe\3"+
		"\2\2\2\u0ec3\u0107\3\2\2\2\u0ec4\u0ec8\5\u021e\u0110\2\u0ec5\u0ec8\5\u0208"+
		"\u0105\2\u0ec6\u0ec8\5\u021a\u010e\2\u0ec7\u0ec4\3\2\2\2\u0ec7\u0ec5\3"+
		"\2\2\2\u0ec7\u0ec6\3\2\2\2\u0ec8\u0109\3\2\2\2\u0ec9\u0eca\7\u0255\2\2"+
		"\u0eca\u0ed3\7\u026d\2\2\u0ecb\u0ed0\5\u0120\u0091\2\u0ecc\u0ecd\7\u0443"+
		"\2\2\u0ecd\u0ecf\5\u0120\u0091\2\u0ece\u0ecc\3\2\2\2\u0ecf\u0ed2\3\2\2"+
		"\2\u0ed0\u0ece\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed4\3\2\2\2\u0ed2\u0ed0"+
		"\3\2\2\2\u0ed3\u0ecb\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u010b\3\2\2\2\u0ed5"+
		"\u0ed7\7\u014d\2\2\u0ed6\u0ed8\7\u0286\2\2\u0ed7\u0ed6\3\2\2\2\u0ed7\u0ed8"+
		"\3\2\2\2\u0ed8\u010d\3\2\2\2\u0ed9\u0edb\7\u0165\2\2\u0eda\u0edc\7\u0286"+
		"\2\2\u0edb\u0eda\3\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0ee2\3\2\2\2\u0edd"+
		"\u0edf\7\f\2\2\u0ede\u0ee0\7\u01f7\2\2\u0edf\u0ede\3\2\2\2\u0edf\u0ee0"+
		"\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1\u0ee3\7\u0156\2\2\u0ee2\u0edd\3\2\2"+
		"\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee8\3\2\2\2\u0ee4\u0ee6\7\u01f7\2\2\u0ee5"+
		"\u0ee4\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u0ee9\7\u0085"+
		"\2\2\u0ee8\u0ee5\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u010f\3\2\2\2\u0eea"+
		"\u0eec\7\u0237\2\2\u0eeb\u0eed\7\u0286\2\2\u0eec\u0eeb\3\2\2\2\u0eec\u0eed"+
		"\3\2\2\2\u0eed\u0ef3\3\2\2\2\u0eee\u0ef0\7\f\2\2\u0eef\u0ef1\7\u01f7\2"+
		"\2\u0ef0\u0eef\3\2\2\2\u0ef0\u0ef1\3\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u0ef4"+
		"\7\u0156\2\2\u0ef3\u0eee\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0ef9\3\2\2"+
		"\2\u0ef5\u0ef7\7\u01f7\2\2\u0ef6\u0ef5\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7"+
		"\u0ef8\3\2\2\2\u0ef8\u0efa\7\u0085\2\2\u0ef9\u0ef6\3\2\2\2\u0ef9\u0efa"+
		"\3\2\2\2\u0efa\u0111\3\2\2\2\u0efb\u0efc\7\u023d\2\2\u0efc\u0efd\5\u0218"+
		"\u010d\2\u0efd\u0113\3\2\2\2\u0efe\u0f00\7\u0237\2\2\u0eff\u0f01\7\u0286"+
		"\2\2\u0f00\u0eff\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02"+
		"\u0f04\7\u00a7\2\2\u0f03\u0f05\7\u023d\2\2\u0f04\u0f03\3\2\2\2\u0f04\u0f05"+
		"\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0f07\5\u0218\u010d\2\u0f07\u0115\3"+
		"\2\2\2\u0f08\u0f09\7\u0085\2\2\u0f09\u0f0a\7\u023d\2\2\u0f0a\u0f0b\5\u0218"+
		"\u010d\2\u0f0b\u0117\3\2\2\2\u0f0c\u0f0d\7d\2\2\u0f0d\u0f0e\7\u0298\2"+
		"\2\u0f0e\u0f13\5\u0122\u0092\2\u0f0f\u0f10\7\u0443\2\2\u0f10\u0f12\5\u0122"+
		"\u0092\2\u0f11\u0f0f\3\2\2\2\u0f12\u0f15\3\2\2\2\u0f13\u0f11\3\2\2\2\u0f13"+
		"\u0f14\3\2\2\2\u0f14\u0119\3\2\2\2\u0f15\u0f13\3\2\2\2\u0f16\u0f17\7\u00ae"+
		"\2\2\u0f17\u0f18\7\u0298\2\2\u0f18\u011b\3\2\2\2\u0f19\u0f1a\7\u0094\2"+
		"\2\u0f1a\u0f1b\7\u0149\2\2\u0f1b\u0f1c\7\u0438\2\2\u0f1c\u0f1d\t\30\2"+
		"\2\u0f1d\u011d\3\2\2\2\u0f1e\u0f20\7\u0094\2\2\u0f1f\u0f21\t\65\2\2\u0f20"+
		"\u0f1f\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21\u0f22\3\2\2\2\u0f22\u0f23\7\u026d"+
		"\2\2\u0f23\u0f28\5\u0126\u0094\2\u0f24\u0f25\7\u0443\2\2\u0f25\u0f27\5"+
		"\u0126\u0094\2\u0f26\u0f24\3\2\2\2\u0f27\u0f2a\3\2\2\2\u0f28\u0f26\3\2"+
		"\2\2\u0f28\u0f29\3\2\2\2\u0f29\u011f\3\2\2\2\u0f2a\u0f28\3\2\2\2\u0f2b"+
		"\u0f2c\7\u00b8\2\2\u0f2c\u0f2d\7\u016d\2\2\u0f2d\u0f33\7\u0248\2\2\u0f2e"+
		"\u0f2f\7\u0081\2\2\u0f2f\u0f33\7\u00b9\2\2\u0f30\u0f31\7\u0081\2\2\u0f31"+
		"\u0f33\7\u0202\2\2\u0f32\u0f2b\3\2\2\2\u0f32\u0f2e\3\2\2\2\u0f32\u0f30"+
		"\3\2\2\2\u0f33\u0121\3\2\2\2\u0f34\u0f39\5\u0200\u0101\2\u0f35\u0f37\7"+
		"\16\2\2\u0f36\u0f35\3\2\2\2\u0f36\u0f37\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38"+
		"\u0f3a\5\u0218\u010d\2\u0f39\u0f36\3\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0f3b"+
		"\3\2\2\2\u0f3b\u0f3c\5\u0124\u0093\2\u0f3c\u0123\3\2\2\2\u0f3d\u0f3f\7"+
		"\u0081\2\2\u0f3e\u0f40\7\u01c8\2\2\u0f3f\u0f3e\3\2\2\2\u0f3f\u0f40\3\2"+
		"\2\2\u0f40\u0f46\3\2\2\2\u0f41\u0f43\7f\2\2\u0f42\u0f41\3\2\2\2\u0f42"+
		"\u0f43\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44\u0f46\7\u00b9\2\2\u0f45\u0f3d"+
		"\3\2\2\2\u0f45\u0f42\3\2\2\2\u0f46\u0125\3\2\2\2\u0f47\u0f48\7\u01be\2"+
		"\2\u0f48\u0f49\7\u01c6\2\2\u0f49\u0f4f\5\u0128\u0095\2\u0f4a\u0f4b\7\u0081"+
		"\2\2\u0f4b\u0f4f\7\u00b9\2\2\u0f4c\u0f4d\7\u0081\2\2\u0f4d\u0f4f\7\u0202"+
		"\2\2\u0f4e\u0f47\3\2\2\2\u0f4e\u0f4a\3\2\2\2\u0f4e\u0f4c\3\2\2\2\u0f4f"+
		"\u0127\3\2\2\2\u0f50\u0f51\7\u02f7\2\2\u0f51\u0f58\7\u0081\2\2\u0f52\u0f53"+
		"\7\u0081\2\2\u0f53\u0f58\7\u02f8\2\2\u0f54\u0f55\7\u0081\2\2\u0f55\u0f58"+
		"\7\u02f9\2\2\u0f56\u0f58\7\u02fa\2\2\u0f57\u0f50\3\2\2\2\u0f57\u0f52\3"+
		"\2\2\2\u0f57\u0f54\3\2\2\2\u0f57\u0f56\3\2\2\2\u0f58\u0129\3\2\2\2\u0f59"+
		"\u0f5a\7\31\2\2\u0f5a\u0f5b\7\u01cb\2\2\u0f5b\u0f5c\7\u00a7\2\2\u0f5c"+
		"\u0f61\5\u013c\u009f\2\u0f5d\u0f5e\7\u0443\2\2\u0f5e\u0f60\5\u013c\u009f"+
		"\2\u0f5f\u0f5d\3\2\2\2\u0f60\u0f63\3\2\2\2\u0f61\u0f5f\3\2\2\2\u0f61\u0f62"+
		"\3\2\2\2\u0f62\u0f65\3\2\2\2\u0f63\u0f61\3\2\2\2\u0f64\u0f66\5\u0144\u00a3"+
		"\2\u0f65\u0f64\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66\u012b\3\2\2\2\u0f67\u0f68"+
		"\7\31\2\2\u0f68\u0f69\7\u0230\2\2\u0f69\u0f6a\7\u019d\2\2\u0f6a\u0f6f"+
		"\5\u0146\u00a4\2\u0f6b\u0f6c\7\u0443\2\2\u0f6c\u0f6e\5\u0146\u00a4\2\u0f6d"+
		"\u0f6b\3\2\2\2\u0f6e\u0f71\3\2\2\2\u0f6f\u0f6d\3\2\2\2\u0f6f\u0f70\3\2"+
		"\2\2\u0f70\u012d\3\2\2\2\u0f71\u0f6f\3\2\2\2\u0f72\u0f73\7\177\2\2\u0f73"+
		"\u0f74\t\66\2\2\u0f74\u0f79\7\u01ca\2\2\u0f75\u0f76\7\u00a7\2\2\u0f76"+
		"\u0f7a\7\u0450\2\2\u0f77\u0f78\7\20\2\2\u0f78\u0f7a\7\u0450\2\2\u0f79"+
		"\u0f75\3\2\2\2\u0f79\u0f77\3\2\2\2\u0f7a\u012f\3\2\2\2\u0f7b\u0f7c\7\u0231"+
		"\2\2\u0f7c\u0f7d\7\u01cb\2\2\u0f7d\u0131\3\2\2\2\u0f7e\u0f7f\7\u0231\2"+
		"\2\u0f7f\u0f81\7\u0246\2\2\u0f80\u0f82\7\b\2\2\u0f81\u0f80\3\2\2\2\u0f81"+
		"\u0f82\3\2\2\2\u0f82\u0f84\3\2\2\2\u0f83\u0f85\5\u0144\u00a3\2\u0f84\u0f83"+
		"\3\2\2\2\u0f84\u0f85\3\2\2\2\u0f85\u0133\3\2\2\2\u0f86\u0f87\7\u0255\2"+
		"\2\u0f87\u0f90\7\u0246\2\2\u0f88\u0f8d\5\u014a\u00a6\2\u0f89\u0f8a\7\u0443"+
		"\2\2\u0f8a\u0f8c\5\u014a\u00a6\2\u0f8b\u0f89\3\2\2\2\u0f8c\u0f8f\3\2\2"+
		"\2\u0f8d\u0f8b\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f\u0f8d"+
		"\3\2\2\2\u0f90\u0f88\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91\u0f94\3\2\2\2\u0f92"+
		"\u0f93\7\u0277\2\2\u0f93\u0f95\5\u014c\u00a7\2\u0f94\u0f92\3\2\2\2\u0f94"+
		"\u0f95\3\2\2\2\u0f95\u0f99\3\2\2\2\u0f96\u0f98\5\u014e\u00a8\2\u0f97\u0f96"+
		"\3\2\2\2\u0f98\u0f9b\3\2\2\2\u0f99\u0f97\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a"+
		"\u0f9d\3\2\2\2\u0f9b\u0f99\3\2\2\2\u0f9c\u0f9e\5\u0144\u00a3\2\u0f9d\u0f9c"+
		"\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0135\3\2\2\2\u0f9f\u0fa0\7\u025b\2"+
		"\2\u0fa0\u0fa9\7\u0246\2\2\u0fa1\u0fa6\5\u014a\u00a6\2\u0fa2\u0fa3\7\u0443"+
		"\2\2\u0fa3\u0fa5\5\u014a\u00a6\2\u0fa4\u0fa2\3\2\2\2\u0fa5\u0fa8\3\2\2"+
		"\2\u0fa6\u0fa4\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7\u0faa\3\2\2\2\u0fa8\u0fa6"+
		"\3\2\2\2\u0fa9\u0fa1\3\2\2\2\u0fa9\u0faa\3\2\2\2\u0faa\u0137\3\2\2\2\u0fab"+
		"\u0fac\7\u0255\2\2\u0fac\u0fad\7\u01a9\2\2\u0fad\u0139\3\2\2\2\u0fae\u0faf"+
		"\7\u025b\2\2\u0faf\u0fb0\7\u01a9\2\2\u0fb0\u013b\3\2\2\2\u0fb1\u0fb2\5"+
		"\u013e\u00a0\2\u0fb2\u0fb3\7\u0438\2\2\u0fb3\u0fb4\7\u0450\2\2\u0fb4\u0fcf"+
		"\3\2\2\2\u0fb5\u0fb6\5\u0140\u00a1\2\u0fb6\u0fb7\7\u0438\2\2\u0fb7\u0fb8"+
		"\5\u021e\u0110\2\u0fb8\u0fcf\3\2\2\2\u0fb9\u0fba\5\u0142\u00a2\2\u0fba"+
		"\u0fbb\7\u0438\2\2\u0fbb\u0fbc\t\30\2\2\u0fbc\u0fcf\3\2\2\2\u0fbd\u0fbe"+
		"\7\u01cf\2\2\u0fbe\u0fbf\7\u0438\2\2\u0fbf\u0fcf\7\u0453\2\2\u0fc0\u0fc1"+
		"\7\u01b0\2\2\u0fc1\u0fc2\7\u0438\2\2\u0fc2\u0fcb\7\u0441\2\2\u0fc3\u0fc8"+
		"\5\u0218\u010d\2\u0fc4\u0fc5\7\u0443\2\2\u0fc5\u0fc7\5\u0218\u010d\2\u0fc6"+
		"\u0fc4\3\2\2\2\u0fc7\u0fca\3\2\2\2\u0fc8\u0fc6\3\2\2\2\u0fc8\u0fc9\3\2"+
		"\2\2\u0fc9\u0fcc\3\2\2\2\u0fca\u0fc8\3\2\2\2\u0fcb\u0fc3\3\2\2\2\u0fcb"+
		"\u0fcc\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fcf\7\u0442\2\2\u0fce\u0fb1"+
		"\3\2\2\2\u0fce\u0fb5\3\2\2\2\u0fce\u0fb9\3\2\2\2\u0fce\u0fbd\3\2\2\2\u0fce"+
		"\u0fc0\3\2\2\2\u0fcf\u013d\3\2\2\2\u0fd0\u0fd1\t\67\2\2\u0fd1\u013f\3"+
		"\2\2\2\u0fd2\u0fd3\t8\2\2\u0fd3\u0141\3\2\2\2\u0fd4\u0fd5\t9\2\2\u0fd5"+
		"\u0143\3\2\2\2\u0fd6\u0fd7\7@\2\2\u0fd7\u0fd8\7\u0158\2\2\u0fd8\u0fd9"+
		"\7\u0450\2\2\u0fd9\u0145\3\2\2\2\u0fda\u0fdb\7\u0229\2\2\u0fdb\u0fdc\7"+
		"\u0438\2\2\u0fdc\u0fdd\7\u0441\2\2\u0fdd\u0fde\5\u0238\u011d\2\u0fde\u0fdf"+
		"\7\u0442\2\2\u0fdf\u100c\3\2\2\2\u0fe0\u0fe1\7\u022b\2\2\u0fe1\u0fe2\7"+
		"\u0438\2\2\u0fe2\u0fe3\7\u0441\2\2\u0fe3\u0fe4\5\u0238\u011d\2\u0fe4\u0fe5"+
		"\7\u0442\2\2\u0fe5\u100c\3\2\2\2\u0fe6\u0fe7\7\u022a\2\2\u0fe7\u0fe8\7"+
		"\u0438\2\2\u0fe8\u0fe9\7\u0441\2\2\u0fe9\u0fea\5\u023a\u011e\2\u0fea\u0feb"+
		"\7\u0442\2\2\u0feb\u100c\3\2\2\2\u0fec\u0fed\7\u022c";
	private static final String _serializedATNSegment2 =
		"\2\2\u0fed\u0fee\7\u0438\2\2\u0fee\u0fef\7\u0441\2\2\u0fef\u0ff0\5\u023a"+
		"\u011e\2\u0ff0\u0ff1\7\u0442\2\2\u0ff1\u100c\3\2\2\2\u0ff2\u0ff3\7\u022e"+
		"\2\2\u0ff3\u0ff4\7\u0438\2\2\u0ff4\u0ff5\7\u0441\2\2\u0ff5\u0ff6\5\u0244"+
		"\u0123\2\u0ff6\u0ff7\7\u0442\2\2\u0ff7\u100c\3\2\2\2\u0ff8\u0ff9\7\u022f"+
		"\2\2\u0ff9\u0ffa\7\u0438\2\2\u0ffa\u0ffb\7\u0441\2\2\u0ffb\u0ffc\5\u0244"+
		"\u0123\2\u0ffc\u0ffd\7\u0442\2\2\u0ffd\u100c\3\2\2\2\u0ffe\u0fff\7\u022d"+
		"\2\2\u0fff\u1000\7\u0438\2\2\u1000\u1001\7\u0441\2\2\u1001\u1006\5\u0148"+
		"\u00a5\2\u1002\u1003\7\u0443\2\2\u1003\u1005\5\u0148\u00a5\2\u1004\u1002"+
		"\3\2\2\2\u1005\u1008\3\2\2\2\u1006\u1004\3\2\2\2\u1006\u1007\3\2\2\2\u1007"+
		"\u1009\3\2\2\2\u1008\u1006\3\2\2\2\u1009\u100a\7\u0442\2\2\u100a\u100c"+
		"\3\2\2\2\u100b\u0fda\3\2\2\2\u100b\u0fe0\3\2\2\2\u100b\u0fe6\3\2\2\2\u100b"+
		"\u0fec\3\2\2\2\u100b\u0ff2\3\2\2\2\u100b\u0ff8\3\2\2\2\u100b\u0ffe\3\2"+
		"\2\2\u100c\u0147\3\2\2\2\u100d\u100e\7\u0441\2\2\u100e\u100f\5\u0200\u0101"+
		"\2\u100f\u1010\7\u0443\2\2\u1010\u1011\5\u0200\u0101\2\u1011\u1012\7\u0442"+
		"\2\2\u1012\u0149\3\2\2\2\u1013\u1014\t:\2\2\u1014\u014b\3\2\2\2\u1015"+
		"\u1016\t;\2\2\u1016\u1017\7\u0438\2\2\u1017\u1028\5\u0150\u00a9\2\u1018"+
		"\u1019\7\u01d1\2\2\u1019\u101a\7\u0438\2\2\u101a\u101b\7\u0450\2\2\u101b"+
		"\u101c\7\u0443\2\2\u101c\u101d\7\u01d2\2\2\u101d\u101e\7\u0438\2\2\u101e"+
		"\u1028\5\u021e\u0110\2\u101f\u1020\7\u0223\2\2\u1020\u1021\7\u0438\2\2"+
		"\u1021\u1022\7\u0450\2\2\u1022\u1023\7\u0443\2\2\u1023\u1024\7\u0224\2"+
		"\2\u1024\u1025\7\u0438\2\2\u1025\u1028\5\u021e\u0110\2\u1026\u1028\7\u024f"+
		"\2\2\u1027\u1015\3\2\2\2\u1027\u1018\3\2\2\2\u1027\u101f\3\2\2\2\u1027"+
		"\u1026\3\2\2\2\u1028\u014d\3\2\2\2\u1029\u102a\7\u0279\2\2\u102a\u102b"+
		"\7\u0438\2\2\u102b\u1036\7\u0450\2\2\u102c\u102d\7\u020d\2\2\u102d\u102e"+
		"\7\u0438\2\2\u102e\u1036\7\u0450\2\2\u102f\u1030\7\u017a\2\2\u1030\u1031"+
		"\7\u0438\2\2\u1031\u1036\7\u0450\2\2\u1032\u1033\7\u0210\2\2\u1033\u1034"+
		"\7\u0438\2\2\u1034\u1036\7\u0450\2\2\u1035\u1029\3\2\2\2\u1035\u102c\3"+
		"\2\2\2\u1035\u102f\3\2\2\2\u1035\u1032\3\2\2\2\u1036\u014f\3\2\2\2\u1037"+
		"\u103c\5\u0210\u0109\2\u1038\u1039\7\u0443\2\2\u1039\u103b\5\u0210\u0109"+
		"\2\u103a\u1038\3\2\2\2\u103b\u103e\3\2\2\2\u103c\u103a\3\2\2\2\u103c\u103d"+
		"\3\2\2\2\u103d\u1041\3\2\2\2\u103e\u103c\3\2\2\2\u103f\u1041\7\u0450\2"+
		"\2\u1040\u1037\3\2\2\2\u1040\u103f\3\2\2\2\u1041\u0151\3\2\2\2\u1042\u1043"+
		"\7\u0289\2\2\u1043\u1044\t<\2\2\u1044\u1046\5\u0212\u010a\2\u1045\u1047"+
		"\t=\2\2\u1046\u1045\3\2\2\2\u1046\u1047\3\2\2\2\u1047\u0153\3\2\2\2\u1048"+
		"\u1049\7\u0289\2\2\u1049\u104a\7\u0188\2\2\u104a\u1050\5\u0212\u010a\2"+
		"\u104b\u104e\7\u0263\2\2\u104c\u104d\7@\2\2\u104d\u104f\7\u01eb\2\2\u104e"+
		"\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u1051\3\2\2\2\u1050\u104b\3\2"+
		"\2\2\u1050\u1051\3\2\2\2\u1051\u0155\3\2\2\2\u1052\u1053\7\u0289\2\2\u1053"+
		"\u1054\7\u0215\2\2\u1054\u1055\5\u0212\u010a\2\u1055\u0157\3\2\2\2\u1056"+
		"\u1057\7\u0289\2\2\u1057\u1058\7\u0165\2\2\u1058\u105b\5\u0212\u010a\2"+
		"\u1059\u105a\7\u0200\2\2\u105a\u105c\7\u020e\2\2\u105b\u1059\3\2\2\2\u105b"+
		"\u105c\3\2\2\2\u105c\u0159\3\2\2\2\u105d\u105e\7\u0289\2\2\u105e\u105f"+
		"\7\u0237\2\2\u105f\u1060\5\u0212\u010a\2\u1060\u015b\3\2\2\2\u1061\u1062"+
		"\7\u0289\2\2\u1062\u1065\7\u021f\2\2\u1063\u1064\7!\2\2\u1064\u1066\5"+
		"\u0212\u010a\2\u1065\u1063\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u015d\3\2"+
		"\2\2\u1067\u1068\7\u0215\2\2\u1068\u1069\5\u0218\u010d\2\u1069\u106c\7"+
		"C\2\2\u106a\u106d\7\u0450\2\2\u106b\u106d\7\u045c\2\2\u106c\u106a\3\2"+
		"\2\2\u106c\u106b\3\2\2\2\u106d\u015f\3\2\2\2\u106e\u106f\7\u029a\2\2\u106f"+
		"\u1072\5\u0218\u010d\2\u1070\u1071\7\u00b3\2\2\u1071\u1073\5\u0246\u0124"+
		"\2\u1072\u1070\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u0161\3\2\2\2\u1074\u1075"+
		"\t>\2\2\u1075\u1076\7\u0215\2\2\u1076\u1077\5\u0218\u010d\2\u1077\u0163"+
		"\3\2\2\2\u1078\u107b\5\u0166\u00b4\2\u1079\u107b\5\6\4\2\u107a\u1078\3"+
		"\2\2\2\u107a\u1079\3\2\2\2\u107b\u0165\3\2\2\2\u107c\u107d\5\u0218\u010d"+
		"\2\u107d\u107e\7\u044c\2\2\u107e\u1080\3\2\2\2\u107f\u107c\3\2\2\2\u107f"+
		"\u1080\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u10a8\7\u014d\2\2\u1082\u1083"+
		"\5\u017a\u00be\2\u1083\u1084\7\u0444\2\2\u1084\u1086\3\2\2\2\u1085\u1082"+
		"\3\2\2\2\u1086\u1089\3\2\2\2\u1087\u1085\3\2\2\2\u1087\u1088\3\2\2\2\u1088"+
		"\u108f\3\2\2\2\u1089\u1087\3\2\2\2\u108a\u108b\5\u017c\u00bf\2\u108b\u108c"+
		"\7\u0444\2\2\u108c\u108e\3\2\2\2\u108d\u108a\3\2\2\2\u108e\u1091\3\2\2"+
		"\2\u108f\u108d\3\2\2\2\u108f\u1090\3\2\2\2\u1090\u1097\3\2\2\2\u1091\u108f"+
		"\3\2\2\2\u1092\u1093\5\u017e\u00c0\2\u1093\u1094\7\u0444\2\2\u1094\u1096"+
		"\3\2\2\2\u1095\u1092\3\2\2\2\u1096\u1099\3\2\2\2\u1097\u1095\3\2\2\2\u1097"+
		"\u1098\3\2\2\2\u1098\u109f\3\2\2\2\u1099\u1097\3\2\2\2\u109a\u109b\5\u0180"+
		"\u00c1\2\u109b\u109c\7\u0444\2\2\u109c\u109e\3\2\2\2\u109d\u109a\3\2\2"+
		"\2\u109e\u10a1\3\2\2\2\u109f\u109d\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a5"+
		"\3\2\2\2\u10a1\u109f\3\2\2\2\u10a2\u10a4\5\u0184\u00c3\2\u10a3\u10a2\3"+
		"\2\2\2\u10a4\u10a7\3\2\2\2\u10a5\u10a3\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6"+
		"\u10a9\3\2\2\2\u10a7\u10a5\3\2\2\2\u10a8\u1087\3\2\2\2\u10a8\u10a9\3\2"+
		"\2\2\u10a9\u10aa\3\2\2\2\u10aa\u10ac\7\u0188\2\2\u10ab\u10ad\5\u0218\u010d"+
		"\2\u10ac\u10ab\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u0167\3\2\2\2\u10ae\u10b1"+
		"\7\27\2\2\u10af\u10b2\5\u0218\u010d\2\u10b0\u10b2\5\u027a\u013e\2\u10b1"+
		"\u10af\3\2\2\2\u10b1\u10b0\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u10b4\3\2"+
		"\2\2\u10b3\u10b5\5\u0186\u00c4\2\u10b4\u10b3\3\2\2\2\u10b5\u10b6\3\2\2"+
		"\2\u10b6\u10b4\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7\u10be\3\2\2\2\u10b8\u10ba"+
		"\7\65\2\2\u10b9\u10bb\5\u0184\u00c3\2\u10ba\u10b9\3\2\2\2\u10bb\u10bc"+
		"\3\2\2\2\u10bc\u10ba\3\2\2\2\u10bc\u10bd\3\2\2\2\u10bd\u10bf\3\2\2\2\u10be"+
		"\u10b8\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c1\7\u0188"+
		"\2\2\u10c1\u10c2\7\27\2\2\u10c2\u0169\3\2\2\2\u10c3\u10c4\7L\2\2\u10c4"+
		"\u10c5\5\u027a\u013e\2\u10c5\u10c7\7\u00a6\2\2\u10c6\u10c8\5\u0184\u00c3"+
		"\2\u10c7\u10c6\3\2\2\2\u10c8\u10c9\3\2\2\2\u10c9\u10c7\3\2\2\2\u10c9\u10ca"+
		"\3\2\2\2\u10ca\u10ce\3\2\2\2\u10cb\u10cd\5\u0188\u00c5\2\u10cc\u10cb\3"+
		"\2\2\2\u10cd\u10d0\3\2\2\2\u10ce\u10cc\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf"+
		"\u10d7\3\2\2\2\u10d0\u10ce\3\2\2\2\u10d1\u10d3\7\65\2\2\u10d2\u10d4\5"+
		"\u0184\u00c3\2\u10d3\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d3\3\2"+
		"\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d8\3\2\2\2\u10d7\u10d1\3\2\2\2\u10d7"+
		"\u10d8\3\2\2\2\u10d8\u10d9\3\2\2\2\u10d9\u10da\7\u0188\2\2\u10da\u10db"+
		"\7L\2\2\u10db\u016b\3\2\2\2\u10dc\u10dd\7W\2\2\u10dd\u10de\5\u0218\u010d"+
		"\2\u10de\u016d\3\2\2\2\u10df\u10e0\7]\2\2\u10e0\u10e1\5\u0218\u010d\2"+
		"\u10e1\u016f\3\2\2\2\u10e2\u10e3\5\u0218\u010d\2\u10e3\u10e4\7\u044c\2"+
		"\2\u10e4\u10e6\3\2\2\2\u10e5\u10e2\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6\u10e7"+
		"\3\2\2\2\u10e7\u10e9\7e\2\2\u10e8\u10ea\5\u0184\u00c3\2\u10e9\u10e8\3"+
		"\2\2\2\u10ea\u10eb\3\2\2\2\u10eb\u10e9\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec"+
		"\u10ed\3\2\2\2\u10ed\u10ee\7\u0188\2\2\u10ee\u10f0\7e\2\2\u10ef\u10f1"+
		"\5\u0218\u010d\2\u10f0\u10ef\3\2\2\2\u10f0\u10f1\3\2\2\2\u10f1\u0171\3"+
		"\2\2\2\u10f2\u10f3\5\u0218\u010d\2\u10f3\u10f4\7\u044c\2\2\u10f4\u10f6"+
		"\3\2\2\2\u10f5\u10f2\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6\u10f7\3\2\2\2\u10f7"+
		"\u10f9\7\u0087\2\2\u10f8\u10fa\5\u0184\u00c3\2\u10f9\u10f8\3\2\2\2\u10fa"+
		"\u10fb\3\2\2\2\u10fb\u10f9\3\2\2\2\u10fb\u10fc\3\2\2\2\u10fc\u10fd\3\2"+
		"\2\2\u10fd\u10fe\7\u0277\2\2\u10fe\u10ff\5\u027a\u013e\2\u10ff\u1100\7"+
		"\u0188\2\2\u1100\u1102\7\u0087\2\2\u1101\u1103\5\u0218\u010d\2\u1102\u1101"+
		"\3\2\2\2\u1102\u1103\3\2\2\2\u1103\u0173\3\2\2\2\u1104\u1105\7\u008d\2"+
		"\2\u1105\u1106\5\u027a\u013e\2\u1106\u0175\3\2\2\2\u1107\u1108\5\u0218"+
		"\u010d\2\u1108\u1109\7\u044c\2\2\u1109\u110b\3\2\2\2\u110a\u1107\3\2\2"+
		"\2\u110a\u110b\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u110d\7\u00b7\2\2\u110d"+
		"\u110e\5\u027a\u013e\2\u110e\u1110\7\u0182\2\2\u110f\u1111\5\u0184\u00c3"+
		"\2\u1110\u110f\3\2\2\2\u1111\u1112\3\2\2\2\u1112\u1110\3\2\2\2\u1112\u1113"+
		"\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1115\7\u0188\2\2\u1115\u1117\7\u00b7"+
		"\2\2\u1116\u1118\5\u0218\u010d\2\u1117\u1116\3\2\2\2\u1117\u1118\3\2\2"+
		"\2\u1118\u0177\3\2\2\2\u1119\u111a\7\u015e\2\2\u111a\u1129\5\u0218\u010d"+
		"\2\u111b\u1120\7?\2\2\u111c\u111e\7\u01f6\2\2\u111d\u111c\3\2\2\2\u111d"+
		"\u111e\3\2\2\2\u111e\u111f\3\2\2\2\u111f\u1121\7C\2\2\u1120\u111d\3\2"+
		"\2\2\u1120\u1121\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1123\5\u0218\u010d"+
		"\2\u1123\u1124\7U\2\2\u1124\u1125\5\u0238\u011d\2\u1125\u1129\3\2\2\2"+
		"\u1126\u1127\7\u0203\2\2\u1127\u1129\5\u0218\u010d\2\u1128\u1119\3\2\2"+
		"\2\u1128\u111b\3\2\2\2\u1128\u1126\3\2\2\2\u1129\u0179\3\2\2\2\u112a\u112b"+
		"\7)\2\2\u112b\u112c\5\u0238\u011d\2\u112c\u112f\5\u022c\u0117\2\u112d"+
		"\u112e\7*\2\2\u112e\u1130\5\u027a\u013e\2\u112f\u112d\3\2\2\2\u112f\u1130"+
		"\3\2\2\2\u1130\u017b\3\2\2\2\u1131\u1132\7)\2\2\u1132\u1133\5\u0218\u010d"+
		"\2\u1133\u1134\7\36\2\2\u1134\u113b\7@\2\2\u1135\u113c\5\u021e\u0110\2"+
		"\u1136\u1138\7\u009b\2\2\u1137\u1139\7\u027d\2\2\u1138\u1137\3\2\2\2\u1138"+
		"\u1139\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u113c\7\u0450\2\2\u113b\u1135"+
		"\3\2\2\2\u113b\u1136\3\2\2\2\u113c\u017d\3\2\2\2\u113d\u113e\7)\2\2\u113e"+
		"\u113f\5\u0218\u010d\2\u113f\u1140\7&\2\2\u1140\u1141\7@\2\2\u1141\u1142"+
		"\5\u00b8]\2\u1142\u017f\3\2\2\2\u1143\u1144\7)\2\2\u1144\u1145\t?\2\2"+
		"\u1145\u1146\7\u01aa\2\2\u1146\u1147\7@\2\2\u1147\u114c\5\u0182\u00c2"+
		"\2\u1148\u1149\7\u0443\2\2\u1149\u114b\5\u0182\u00c2\2\u114a\u1148\3\2"+
		"\2\2\u114b\u114e\3\2\2\2\u114c\u114a\3\2\2\2\u114c\u114d\3\2\2\2\u114d"+
		"\u114f\3\2\2\2\u114e\u114c\3\2\2\2\u114f\u1150\5\u0164\u00b3\2\u1150\u0181"+
		"\3\2\2\2\u1151\u115d\5\u021e\u0110\2\u1152\u1154\7\u009b\2\2\u1153\u1155"+
		"\7\u027d\2\2\u1154\u1153\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1156\3\2\2"+
		"\2\u1156\u115d\7\u0450\2\2\u1157\u115d\5\u0218\u010d\2\u1158\u115d\7\u009c"+
		"\2\2\u1159\u115a\7m\2\2\u115a\u115d\7\u01a3\2\2\u115b\u115d\7\u009a\2"+
		"\2\u115c\u1151\3\2\2\2\u115c\u1152\3\2\2\2\u115c\u1157\3\2\2\2\u115c\u1158"+
		"\3\2\2\2\u115c\u1159\3\2\2\2\u115c\u115b\3\2\2\2\u115d\u0183\3\2\2\2\u115e"+
		"\u1161\5\24\13\2\u115f\u1161\5\6\4\2\u1160\u115e\3\2\2\2\u1160\u115f\3"+
		"\2\2\2\u1161\u1162\3\2\2\2\u1162\u1163\7\u0444\2\2\u1163\u0185\3\2\2\2"+
		"\u1164\u1167\7\u00b5\2\2\u1165\u1168\5\u022a\u0116\2\u1166\u1168\5\u027a"+
		"\u013e\2\u1167\u1165\3\2\2\2\u1167\u1166\3\2\2\2\u1168\u1169\3\2\2\2\u1169"+
		"\u116b\7\u00a6\2\2\u116a\u116c\5\u0184\u00c3\2\u116b\u116a\3\2\2\2\u116c"+
		"\u116d\3\2\2\2\u116d\u116b\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u0187\3\2"+
		"\2\2\u116f\u1170\7\66\2\2\u1170\u1171\5\u027a\u013e\2\u1171\u1173\7\u00a6"+
		"\2\2\u1172\u1174\5\u0184\u00c3\2\u1173\u1172\3\2\2\2\u1174\u1175\3\2\2"+
		"\2\u1175\u1173\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u0189\3\2\2\2\u1177\u1178"+
		"\7\t\2\2\u1178\u1179\7\u0279\2\2\u1179\u117e\5\u019e\u00d0\2\u117a\u117b"+
		"\7\u0443\2\2\u117b\u117d\5\u019e\u00d0\2\u117c\u117a\3\2\2\2\u117d\u1180"+
		"\3\2\2\2\u117e\u117c\3\2\2\2\u117e\u117f\3\2\2\2\u117f\u11ae\3\2\2\2\u1180"+
		"\u117e\3\2\2\2\u1181\u1182\7\t\2\2\u1182\u1184\7\u0279\2\2\u1183\u1185"+
		"\5\u024e\u0128\2\u1184\u1183\3\2\2\2\u1184\u1185\3\2\2\2\u1185\u1186\3"+
		"\2\2\2\u1186\u118b\5\u01a0\u00d1\2\u1187\u1188\7\u0443\2\2\u1188\u118a"+
		"\5\u01a0\u00d1\2\u1189\u1187\3\2\2\2\u118a\u118d\3\2\2\2\u118b\u1189\3"+
		"\2\2\2\u118b\u118c\3\2\2\2\u118c\u119c\3\2\2\2\u118d\u118b\3\2\2\2\u118e"+
		"\u119a\7\u0089\2\2\u118f\u119b\7\u01f9\2\2\u1190\u1197\5\u01a2\u00d2\2"+
		"\u1191\u1193\7\f\2\2\u1192\u1191\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u1194"+
		"\3\2\2\2\u1194\u1196\5\u01a2\u00d2\2\u1195\u1192\3\2\2\2\u1196\u1199\3"+
		"\2\2\2\u1197\u1195\3\2\2\2\u1197\u1198\3\2\2\2\u1198\u119b\3\2\2\2\u1199"+
		"\u1197\3\2\2\2\u119a\u118f\3\2\2\2\u119a\u1190\3\2\2\2\u119b\u119d\3\2"+
		"\2\2\u119c\u118e\3\2\2\2\u119c\u119d\3\2\2\2\u119d\u11a4\3\2\2\2\u119e"+
		"\u11a0\7\u00b8\2\2\u119f\u11a1\5\u01a4\u00d3\2\u11a0\u119f\3\2\2\2\u11a1"+
		"\u11a2\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a5\3\2"+
		"\2\2\u11a4\u119e\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5\u11aa\3\2\2\2\u11a6"+
		"\u11a9\5\u01a6\u00d4\2\u11a7\u11a9\5\u01a8\u00d5\2\u11a8\u11a6\3\2\2\2"+
		"\u11a8\u11a7\3\2\2\2\u11a9\u11ac\3\2\2\2\u11aa\u11a8\3\2\2\2\u11aa\u11ab"+
		"\3\2\2\2\u11ab\u11ae\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ad\u1177\3\2\2\2\u11ad"+
		"\u1181\3\2\2\2\u11ae\u018b\3\2\2\2\u11af\u11b0\7\"\2\2\u11b0\u11b1\7\u0279"+
		"\2\2\u11b1\u11b6\5\u01a0\u00d1\2\u11b2\u11b3\7\u0443\2\2\u11b3\u11b5\5"+
		"\u01a0\u00d1\2\u11b4\u11b2\3\2\2\2\u11b5\u11b8\3\2\2\2\u11b6\u11b4\3\2"+
		"\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11e6\3\2\2\2\u11b8\u11b6\3\2\2\2\u11b9"+
		"\u11ba\7\"\2\2\u11ba\u11bc\7\u0279\2\2\u11bb\u11bd\5\u0250\u0129\2\u11bc"+
		"\u11bb\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u11c3\5\u01a0"+
		"\u00d1\2\u11bf\u11c0\7\u0443\2\2\u11c0\u11c2\5\u01a0\u00d1\2\u11c1\u11bf"+
		"\3\2\2\2\u11c2\u11c5\3\2\2\2\u11c3\u11c1\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4"+
		"\u11d4\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c6\u11d2\7\u0089\2\2\u11c7\u11d3"+
		"\7\u01f9\2\2\u11c8\u11cf\5\u01a2\u00d2\2\u11c9\u11cb\7\f\2\2\u11ca\u11c9"+
		"\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb\u11cc\3\2\2\2\u11cc\u11ce\5\u01a2\u00d2"+
		"\2\u11cd\u11ca\3\2\2\2\u11ce\u11d1\3\2\2\2\u11cf\u11cd\3\2\2\2\u11cf\u11d0"+
		"\3\2\2\2\u11d0\u11d3\3\2\2\2\u11d1\u11cf\3\2\2\2\u11d2\u11c7\3\2\2\2\u11d2"+
		"\u11c8\3\2\2\2\u11d3\u11d5\3\2\2\2\u11d4\u11c6\3\2\2\2\u11d4\u11d5\3\2"+
		"\2\2\u11d5\u11dc\3\2\2\2\u11d6\u11d8\7\u00b8\2\2\u11d7\u11d9\5\u01a4\u00d3"+
		"\2\u11d8\u11d7\3\2\2\2\u11d9\u11da\3\2\2\2\u11da\u11d8\3\2\2\2\u11da\u11db"+
		"\3\2\2\2\u11db\u11dd\3\2\2\2\u11dc\u11d6\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd"+
		"\u11e2\3\2\2\2\u11de\u11e1\5\u01a6\u00d4\2\u11df\u11e1\5\u01a8\u00d5\2"+
		"\u11e0\u11de\3\2\2\2\u11e0\u11df\3\2\2\2\u11e1\u11e4\3\2\2\2\u11e2\u11e0"+
		"\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11e6\3\2\2\2\u11e4\u11e2\3\2\2\2\u11e5"+
		"\u11af\3\2\2\2\u11e5\u11b9\3\2\2\2\u11e6\u018d\3\2\2\2\u11e7\u11e8\7\63"+
		"\2\2\u11e8\u11ea\7\u0279\2\2\u11e9\u11eb\5\u024e\u0128\2\u11ea\u11e9\3"+
		"\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u11f1\5\u0206\u0104"+
		"\2\u11ed\u11ee\7\u0443\2\2\u11ee\u11f0\5\u0206\u0104\2\u11ef\u11ed\3\2"+
		"\2\2\u11f0\u11f3\3\2\2\2\u11f1\u11ef\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2"+
		"\u018f\3\2\2\2\u11f3\u11f1\3\2\2\2\u11f4\u11f5\7G\2\2\u11f5\u11fa\5\u01aa"+
		"\u00d6\2\u11f6\u11f7\7\u0443\2\2\u11f7\u11f9\5\u01aa\u00d6\2\u11f8\u11f6"+
		"\3\2\2\2\u11f9\u11fc\3\2\2\2\u11fa\u11f8\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb"+
		"\u11fd\3\2\2\2\u11fc\u11fa\3\2\2\2\u11fd\u11ff\7q\2\2\u11fe\u1200\t@\2"+
		"\2\u11ff\u11fe\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u1201\3\2\2\2\u1201\u1202"+
		"\5\u01ae\u00d8\2\u1202\u1203\7\u00a7\2\2\u1203\u1208\5\u01a0\u00d1\2\u1204"+
		"\u1205\7\u0443\2\2\u1205\u1207\5\u01a0\u00d1\2\u1206\u1204\3\2\2\2\u1207"+
		"\u120a\3\2\2\2\u1208\u1206\3\2\2\2\u1208\u1209\3\2\2\2\u1209\u1219\3\2"+
		"\2\2\u120a\u1208\3\2\2\2\u120b\u1217\7\u0089\2\2\u120c\u1218\7\u01f9\2"+
		"\2\u120d\u1214\5\u01a2\u00d2\2\u120e\u1210\7\f\2\2\u120f\u120e\3\2\2\2"+
		"\u120f\u1210\3\2\2\2\u1210\u1211\3\2\2\2\u1211\u1213\5\u01a2\u00d2\2\u1212"+
		"\u120f\3\2\2\2\u1213\u1216\3\2\2\2\u1214\u1212\3\2\2\2\u1214\u1215\3\2"+
		"\2\2\u1215\u1218\3\2\2\2\u1216\u1214\3\2\2\2\u1217\u120c\3\2\2\2\u1217"+
		"\u120d\3\2\2\2\u1218\u121a\3\2\2\2\u1219\u120b\3\2\2\2\u1219\u121a\3\2"+
		"\2\2\u121a\u1224\3\2\2\2\u121b\u1221\7\u00b8\2\2\u121c\u121d\7G\2\2\u121d"+
		"\u1220\7s\2\2\u121e\u1220\5\u01a4\u00d3\2\u121f\u121c\3\2\2\2\u121f\u121e"+
		"\3\2\2\2\u1220\u1223\3\2\2\2\u1221\u121f\3\2\2\2\u1221\u1222\3\2\2\2\u1222"+
		"\u1225\3\2\2\2\u1223\u1221\3\2\2\2\u1224\u121b\3\2\2\2\u1224\u1225\3\2"+
		"\2\2\u1225\u122c\3\2\2\2\u1226\u1227\7\16\2\2\u1227\u1228\5\u0206\u0104"+
		"\2\u1228\u1229\7\u00b8\2\2\u1229\u122a\7\u0236\2\2\u122a\u122b\5\u0192"+
		"\u00ca\2\u122b\u122d\3\2\2\2\u122c\u1226\3\2\2\2\u122c\u122d\3\2\2\2\u122d"+
		"\u1252\3\2\2\2\u122e\u1231\7G\2\2\u122f\u1232\5\u0206\u0104\2\u1230\u1232"+
		"\5\u0218\u010d\2\u1231\u122f\3\2\2\2\u1231\u1230\3\2\2\2\u1232\u123a\3"+
		"\2\2\2\u1233\u1236\7\u0443\2\2\u1234\u1237\5\u0206\u0104\2\u1235\u1237"+
		"\5\u0218\u010d\2\u1236\u1234\3\2\2\2\u1236\u1235\3\2\2\2\u1237\u1239\3"+
		"\2\2\2\u1238\u1233\3\2\2\2\u1239\u123c\3\2\2\2\u123a\u1238\3\2\2\2\u123a"+
		"\u123b\3\2\2\2\u123b\u123d\3\2\2\2\u123c\u123a\3\2\2\2\u123d\u1240\7\u00a7"+
		"\2\2\u123e\u1241\5\u0206\u0104\2\u123f\u1241\5\u0218\u010d\2\u1240\u123e"+
		"\3\2\2\2\u1240\u123f\3\2\2\2\u1241\u1249\3\2\2\2\u1242\u1245\7\u0443\2"+
		"\2\u1243\u1246\5\u0206\u0104\2\u1244\u1246\5\u0218\u010d\2\u1245\u1243"+
		"\3\2\2\2\u1245\u1244\3\2\2\2\u1246\u1248\3\2\2\2\u1247\u1242\3\2\2\2\u1248"+
		"\u124b\3\2\2\2\u1249\u1247\3\2\2\2\u1249\u124a\3\2\2\2\u124a\u124f\3\2"+
		"\2\2\u124b\u1249\3\2\2\2\u124c\u124d\7\u00b8\2\2\u124d\u124e\7\u02af\2"+
		"\2\u124e\u1250\7s\2\2\u124f\u124c\3\2\2\2\u124f\u1250\3\2\2\2\u1250\u1252"+
		"\3\2\2\2\u1251\u11f4\3\2\2\2\u1251\u122e\3\2\2\2\u1252\u0191\3\2\2\2\u1253"+
		"\u126a\7*\2\2\u1254\u126a\7\u01f9\2\2\u1255\u125f\7\b\2\2\u1256\u1257"+
		"\7:\2\2\u1257\u125c\5\u0206\u0104\2\u1258\u1259\7\u0443\2\2\u1259\u125b"+
		"\5\u0206\u0104\2\u125a\u1258\3\2\2\2\u125b\u125e\3\2\2\2\u125c\u125a\3"+
		"\2\2\2\u125c\u125d\3\2\2\2\u125d\u1260\3\2\2\2\u125e\u125c\3\2\2\2\u125f"+
		"\u1256\3\2\2\2\u125f\u1260\3\2\2\2\u1260\u126a\3\2\2\2\u1261\u1266\5\u0206"+
		"\u0104\2\u1262\u1263\7\u0443\2\2\u1263\u1265\5\u0206\u0104\2\u1264\u1262"+
		"\3\2\2\2\u1265\u1268\3\2\2\2\u1266\u1264\3\2\2\2\u1266\u1267\3\2\2\2\u1267"+
		"\u126a\3\2\2\2\u1268\u1266\3\2\2\2\u1269\u1253\3\2\2\2\u1269\u1254\3\2"+
		"\2\2\u1269\u1255\3\2\2\2\u1269\u1261\3\2\2\2\u126a\u0193\3\2\2\2\u126b"+
		"\u126c\7G\2\2\u126c\u126d\7\u021b\2\2\u126d\u126e\7q\2\2\u126e\u126f\5"+
		"\u0206\u0104\2\u126f\u1270\7\u00a7\2\2\u1270\u1275\5\u0206\u0104\2\u1271"+
		"\u1272\7\u0443\2\2\u1272\u1274\5\u0206\u0104\2\u1273\u1271\3\2\2\2\u1274"+
		"\u1277\3\2\2\2\u1275\u1273\3\2\2\2\u1275\u1276\3\2\2\2\u1276\u127b\3\2"+
		"\2\2\u1277\u1275\3\2\2\2\u1278\u1279\7\u00b8\2\2\u1279\u127a\7G\2\2\u127a"+
		"\u127c\7s\2\2\u127b\u1278\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u0195\3\2"+
		"\2\2\u127d\u127e\7\u0086\2\2\u127e\u127f\7\u0279\2\2\u127f\u1284\5\u01b0"+
		"\u00d9\2\u1280\u1281\7\u0443\2\2\u1281\u1283\5\u01b0\u00d9\2\u1282\u1280"+
		"\3\2\2\2\u1283\u1286\3\2\2\2\u1284\u1282\3\2\2\2\u1284\u1285\3\2\2\2\u1285"+
		"\u0197\3\2\2\2\u1286\u1284\3\2\2\2\u1287\u1288\7\u008e\2\2\u1288\u128d"+
		"\5\u01aa\u00d6\2\u1289\u128a\7\u0443\2\2\u128a\u128c\5\u01aa\u00d6\2\u128b"+
		"\u1289\3\2\2\2\u128c\u128f\3\2\2\2\u128d\u128b\3\2\2\2\u128d\u128e\3\2"+
		"\2\2\u128e\u1290\3\2\2\2\u128f\u128d\3\2\2\2\u1290\u1292\7q\2\2\u1291"+
		"\u1293\t@\2\2\u1292\u1291\3\2\2\2\u1292\u1293\3\2\2\2\u1293\u1294\3\2"+
		"\2\2\u1294\u1295\5\u01ae\u00d8\2\u1295\u1296\7C\2\2\u1296\u129b\5\u0206"+
		"\u0104\2\u1297\u1298\7\u0443\2\2\u1298\u129a\5\u0206\u0104\2\u1299\u1297"+
		"\3\2\2\2\u129a\u129d\3\2\2\2\u129b\u1299\3\2\2\2\u129b\u129c\3\2\2\2\u129c"+
		"\u12c8\3\2\2\2\u129d\u129b\3\2\2\2\u129e\u129f\7\u008e\2\2\u129f\u12a1"+
		"\7\b\2\2\u12a0\u12a2\7\u02a0\2\2\u12a1\u12a0\3\2\2\2\u12a1\u12a2\3\2\2"+
		"\2\u12a2\u12a3\3\2\2\2\u12a3\u12a4\7\u0443\2\2\u12a4\u12a5\7G\2\2\u12a5"+
		"\u12a6\7s\2\2\u12a6\u12a7\7C\2\2\u12a7\u12ac\5\u0206\u0104\2\u12a8\u12a9"+
		"\7\u0443\2\2\u12a9\u12ab\5\u0206\u0104\2\u12aa\u12a8\3\2\2\2\u12ab\u12ae"+
		"\3\2\2\2\u12ac\u12aa\3\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u12c8\3\2\2\2\u12ae"+
		"\u12ac\3\2\2\2\u12af\u12b0\7\u008e\2\2\u12b0\u12b5\5\u0218\u010d\2\u12b1"+
		"\u12b2\7\u0443\2\2\u12b2\u12b4\5\u0218\u010d\2\u12b3\u12b1\3\2\2\2\u12b4"+
		"\u12b7\3\2\2\2\u12b5\u12b3\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u12b8\3\2"+
		"\2\2\u12b7\u12b5\3\2\2\2\u12b8\u12bb\7C\2\2\u12b9\u12bc\5\u0206\u0104"+
		"\2\u12ba\u12bc\5\u0218\u010d\2\u12bb\u12b9\3\2\2\2\u12bb\u12ba\3\2\2\2"+
		"\u12bc\u12c4\3\2\2\2\u12bd\u12c0\7\u0443\2\2\u12be\u12c1\5\u0206\u0104"+
		"\2\u12bf\u12c1\5\u0218\u010d\2\u12c0\u12be\3\2\2\2\u12c0\u12bf\3\2\2\2"+
		"\u12c1\u12c3\3\2\2\2\u12c2\u12bd\3\2\2\2\u12c3\u12c6\3\2\2\2\u12c4\u12c2"+
		"\3\2\2\2\u12c4\u12c5\3\2\2\2\u12c5\u12c8\3\2\2\2\u12c6\u12c4\3\2\2\2\u12c7"+
		"\u1287\3\2\2\2\u12c7\u129e\3\2\2\2\u12c7\u12af\3\2\2\2\u12c8\u0199\3\2"+
		"\2\2\u12c9\u12ca\7\u008e\2\2\u12ca\u12cb\7\u021b\2\2\u12cb\u12cc\7q\2"+
		"\2\u12cc\u12cd\5\u0206\u0104\2\u12cd\u12ce\7C\2\2\u12ce\u12d3\5\u0206"+
		"\u0104\2\u12cf\u12d0\7\u0443\2\2\u12d0\u12d2\5\u0206\u0104\2\u12d1\u12cf"+
		"\3\2\2\2\u12d2\u12d5\3\2\2\2\u12d3\u12d1\3\2\2\2\u12d3\u12d4\3\2\2\2\u12d4"+
		"\u019b\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d6\u12d7\7\u0094\2\2\u12d7\u12da"+
		"\7\u020d\2\2\u12d8\u12d9\7@\2\2\u12d9\u12db\5\u0206\u0104\2\u12da\u12d8"+
		"\3\2\2\2\u12da\u12db\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12df\7\u0438\2"+
		"\2\u12dd\u12e0\5\u0274\u013b\2\u12de\u12e0\7\u0450\2\2\u12df\u12dd\3\2"+
		"\2\2\u12df\u12de\3\2\2\2\u12e0\u019d\3\2\2\2\u12e1\u12e2\5\u0206\u0104"+
		"\2\u12e2\u12e3\5\u01a6\u00d4\2\u12e3\u019f\3\2\2\2\u12e4\u12e5\5\u0206"+
		"\u0104\2\u12e5\u12e6\7\u01af\2\2\u12e6\u12e7\7\24\2\2\u12e7\u12e8\7\u020d"+
		"\2\2\u12e8\u12e9\7\u0450\2\2\u12e9\u1301\3\2\2\2\u12ea\u12eb\5\u0206\u0104"+
		"\2\u12eb\u12ee\7\u01af\2\2\u12ec\u12ed\7\u00b8\2\2\u12ed\u12ef\5\u0216"+
		"\u010c\2\u12ee\u12ec\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef\u12f0\3\2\2\2\u12f0"+
		"\u12f1\7\24\2\2\u12f1\u12f5\7\u0450\2\2\u12f2\u12f3\7\u008c\2\2\u12f3"+
		"\u12f4\7$\2\2\u12f4\u12f6\7\u020d\2\2\u12f5\u12f2\3\2\2\2\u12f5\u12f6"+
		"\3\2\2\2\u12f6\u1301\3\2\2\2\u12f7\u12f8\5\u0206\u0104\2\u12f8\u12f9\7"+
		"\u01af\2\2\u12f9\u12fa\7\u00b8\2\2\u12fa\u12fd\5\u0216\u010c\2\u12fb\u12fc"+
		"\7\16\2\2\u12fc\u12fe\7\u0450\2\2\u12fd\u12fb\3\2\2\2\u12fd\u12fe\3\2"+
		"\2\2\u12fe\u1301\3\2\2\2\u12ff\u1301\5\u0206\u0104\2\u1300\u12e4\3\2\2"+
		"\2\u1300\u12ea\3\2\2\2\u1300\u12f7\3\2\2\2\u1300\u12ff\3\2\2\2\u1301\u01a1"+
		"\3\2\2\2\u1302\u130b\7\u00a0\2\2\u1303\u130b\7\u0288\2\2\u1304\u1305\7"+
		"\u015b\2\2\u1305\u130b\7\u0450\2\2\u1306\u1307\7\u01bf\2\2\u1307\u130b"+
		"\7\u0450\2\2\u1308\u1309\7\u0260\2\2\u1309\u130b\7\u0450\2\2\u130a\u1302"+
		"\3\2\2\2\u130a\u1303\3\2\2\2\u130a\u1304\3\2\2\2\u130a\u1306\3\2\2\2\u130a"+
		"\u1308\3\2\2\2\u130b\u01a3\3\2\2\2\u130c\u130d\7\u01e1\2\2\u130d\u1315"+
		"\5\u021e\u0110\2\u130e\u130f\7\u01e4\2\2\u130f\u1315\5\u021e\u0110\2\u1310"+
		"\u1311\7\u01e0\2\2\u1311\u1315\5\u021e\u0110\2\u1312\u1313\7\u01e5\2\2"+
		"\u1313\u1315\5\u021e\u0110\2\u1314\u130c\3\2\2\2\u1314\u130e\3\2\2\2\u1314"+
		"\u1310\3\2\2\2\u1314\u1312\3\2\2\2\u1315\u01a5\3\2\2\2\u1316\u1317\7\u020d"+
		"\2\2\u1317\u131e\7\u0195\2\2\u1318\u131f\7*\2\2\u1319\u131f\7\u01f5\2"+
		"\2\u131a\u131b\7T\2\2\u131b\u131c\5\u021e\u0110\2\u131c\u131d\7\u0292"+
		"\2\2\u131d\u131f\3\2\2\2\u131e\u1318\3\2\2\2\u131e\u1319\3\2\2\2\u131e"+
		"\u131a\3\2\2\2\u131e\u131f\3\2\2\2\u131f\u01a7\3\2\2\2\u1320\u1321\7\u0141"+
		"\2\2\u1321\u1322\tA\2\2\u1322\u01a9\3\2\2\2\u1323\u1328\5\u01ac\u00d7"+
		"\2\u1324\u1325\7\u0441\2\2\u1325\u1326\5\u0238\u011d\2\u1326\u1327\7\u0442"+
		"\2\2\u1327\u1329\3\2\2\2\u1328\u1324\3\2\2\2\u1328\u1329\3\2\2\2\u1329"+
		"\u01ab\3\2\2\2\u132a\u132c\7\b\2\2\u132b\u132d\7\u02a0\2\2\u132c\u132b"+
		"\3\2\2\2\u132c\u132d\3\2\2\2\u132d\u137a\3\2\2\2\u132e\u1330\7\t\2\2\u132f"+
		"\u1331\7\u0299\2\2\u1330\u132f\3\2\2\2\u1330\u1331\3\2\2\2\u1331\u137a"+
		"\3\2\2\2\u1332\u133a\7\"\2\2\u1333\u1334\7\u0269\2\2\u1334\u133b\7\u0298"+
		"\2\2\u1335\u133b\7\u0299\2\2\u1336\u133b\7\u027f\2\2\u1337\u133b\7\u0279"+
		"\2\2\u1338\u133b\7\u0267\2\2\u1339\u133b\7\u0236\2\2\u133a\u1333\3\2\2"+
		"\2\u133a\u1335\3\2\2\2\u133a\u1336\3\2\2\2\u133a\u1337\3\2\2\2\u133a\u1338"+
		"\3\2\2\2\u133a\u1339\3\2\2\2\u133a\u133b\3\2\2\2\u133b\u137a\3\2\2\2\u133c"+
		"\u137a\7,\2\2\u133d\u133f\7\63\2\2\u133e\u1340\7\u0236\2\2\u133f\u133e"+
		"\3\2\2\2\u133f\u1340\3\2\2\2\u1340\u137a\3\2\2\2\u1341\u137a\7\u0190\2"+
		"\2\u1342\u137a\7\u029a\2\2\u1343\u137a\7\u029b\2\2\u1344\u1345\7G\2\2"+
		"\u1345\u137a\7s\2\2\u1346\u137a\7O\2\2\u1347\u137a\7S\2\2\u1348\u1349"+
		"\7d\2\2\u1349\u137a\7\u0298\2\2\u134a\u137a\7\u029c\2\2\u134b\u137a\7"+
		"\u021b\2\2\u134c\u137a\7\u0083\2\2\u134d\u137a\7\u029d\2\2\u134e\u134f"+
		"\7\u0230\2\2\u134f\u137a\tB\2\2\u1350\u137a\7\u0093\2\2\u1351\u1352\7"+
		"\u0096\2\2\u1352\u137a\tC\2\2\u1353\u137a\7\u029e\2\2\u1354\u137a\7\u029f"+
		"\2\2\u1355\u137a\7\u00a9\2\2\u1356\u137a\7\u00b0\2\2\u1357\u137a\7\u00b1"+
		"\2\2\u1358\u137a\7\u02a1\2\2\u1359\u137a\7\u02a2\2\2\u135a\u137a\7\u02a3"+
		"\2\2\u135b\u137a\7\u02a4\2\2\u135c\u137a\7\u02a5\2\2\u135d\u137a\7\u02a6"+
		"\2\2\u135e\u137a\7\u02a7\2\2\u135f\u137a\7\u02a8\2\2\u1360\u137a\7\u02a9"+
		"\2\2\u1361\u137a\7\u02aa\2\2\u1362\u137a\7\u02ab\2\2\u1363\u137a\7\u02ac"+
		"\2\2\u1364\u137a\7\u02ad\2\2\u1365\u137a\7\u02ae\2\2\u1366\u137a\7\u02b0"+
		"\2\2\u1367\u137a\7\u02b1\2\2\u1368\u137a\7\u02b2\2\2\u1369\u137a\7\u02b3"+
		"\2\2\u136a\u137a\7\u02b4\2\2\u136b\u137a\7\u02b5\2\2\u136c\u137a\7\u02b6"+
		"\2\2\u136d\u137a\7\u02b7\2\2\u136e\u137a\7\u02b8\2\2\u136f\u137a\7\u02b9"+
		"\2\2\u1370\u137a\7\u02ba\2\2\u1371\u137a\7\u02bb\2\2\u1372\u137a\7\u02bc"+
		"\2\2\u1373\u137a\7\u02bd\2\2\u1374\u137a\7\u040a\2\2\u1375\u137a\7\u02be"+
		"\2\2\u1376\u137a\7\u02bf\2\2\u1377\u137a\7\u02c0\2\2\u1378\u137a\7\u02c1"+
		"\2\2\u1379\u132a\3\2\2\2\u1379\u132e\3\2\2\2\u1379\u1332\3\2\2\2\u1379"+
		"\u133c\3\2\2\2\u1379\u133d\3\2\2\2\u1379\u1341\3\2\2\2\u1379\u1342\3\2"+
		"\2\2\u1379\u1343\3\2\2\2\u1379\u1344\3\2\2\2\u1379\u1346\3\2\2\2\u1379"+
		"\u1347\3\2\2\2\u1379\u1348\3\2\2\2\u1379\u134a\3\2\2\2\u1379\u134b\3\2"+
		"\2\2\u1379\u134c\3\2\2\2\u1379\u134d\3\2\2\2\u1379\u134e\3\2\2\2\u1379"+
		"\u1350\3\2\2\2\u1379\u1351\3\2\2\2\u1379\u1353\3\2\2\2\u1379\u1354\3\2"+
		"\2\2\u1379\u1355\3\2\2\2\u1379\u1356\3\2\2\2\u1379\u1357\3\2\2\2\u1379"+
		"\u1358\3\2\2\2\u1379\u1359\3\2\2\2\u1379\u135a\3\2\2\2\u1379\u135b\3\2"+
		"\2\2\u1379\u135c\3\2\2\2\u1379\u135d\3\2\2\2\u1379\u135e\3\2\2\2\u1379"+
		"\u135f\3\2\2\2\u1379\u1360\3\2\2\2\u1379\u1361\3\2\2\2\u1379\u1362\3\2"+
		"\2\2\u1379\u1363\3\2\2\2\u1379\u1364\3\2\2\2\u1379\u1365\3\2\2\2\u1379"+
		"\u1366\3\2\2\2\u1379\u1367\3\2\2\2\u1379\u1368\3\2\2\2\u1379\u1369\3\2"+
		"\2\2\u1379\u136a\3\2\2\2\u1379\u136b\3\2\2\2\u1379\u136c\3\2\2\2\u1379"+
		"\u136d\3\2\2\2\u1379\u136e\3\2\2\2\u1379\u136f\3\2\2\2\u1379\u1370\3\2"+
		"\2\2\u1379\u1371\3\2\2\2\u1379\u1372\3\2\2\2\u1379\u1373\3\2\2\2\u1379"+
		"\u1374\3\2\2\2\u1379\u1375\3\2\2\2\u1379\u1376\3\2\2\2\u1379\u1377\3\2"+
		"\2\2\u1379\u1378\3\2\2\2\u137a\u01ad\3\2\2\2\u137b\u138c\7\u0431\2\2\u137c"+
		"\u137d\7\u0431\2\2\u137d\u137e\7\u0440\2\2\u137e\u138c\7\u0431\2\2\u137f"+
		"\u1380\5\u0218\u010d\2\u1380\u1381\7\u0440\2\2\u1381\u1382\7\u0431\2\2"+
		"\u1382\u138c\3\2\2\2\u1383\u1384\5\u0218\u010d\2\u1384\u1385\7\u0440\2"+
		"\2\u1385\u1386\5\u0218\u010d\2\u1386\u138c\3\2\2\2\u1387\u1388\5\u0218"+
		"\u010d\2\u1388\u1389\5\u021c\u010f\2\u1389\u138c\3\2\2\2\u138a\u138c\5"+
		"\u0218\u010d\2\u138b\u137b\3\2\2\2\u138b\u137c\3\2\2\2\u138b\u137f\3\2"+
		"\2\2\u138b\u1383\3\2\2\2\u138b\u1387\3\2\2\2\u138b\u138a\3\2\2\2\u138c"+
		"\u01af\3\2\2\2\u138d\u138e\5\u0206\u0104\2\u138e\u138f\7\u00a7\2\2\u138f"+
		"\u1390\5\u0206\u0104\2\u1390\u01b1\3\2\2\2\u1391\u1393\7\13\2\2\u1392"+
		"\u1394\tD\2\2\u1393\u1392\3\2\2\2\u1393\u1394\3\2\2\2\u1394\u1395\3\2"+
		"\2\2\u1395\u1396\7\u00a4\2\2\u1396\u13a8\5\u023a\u011e\2\u1397\u1398\7"+
		"\u00b0\2\2\u1398\u1399\7K\2\2\u1399\u139a\7q\2\2\u139a\u139f\5\u0202\u0102"+
		"\2\u139b\u139c\7\u0443\2\2\u139c\u139e\5\u0202\u0102\2\u139d\u139b\3\2"+
		"\2\2\u139e\u13a1\3\2\2\2\u139f\u139d\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0"+
		"\u13a6\3\2\2\2\u13a1\u139f\3\2\2\2\u13a2\u13a3\7\u00b8\2\2\u13a3\u13a4"+
		"\5\u021e\u0110\2\u13a4\u13a5\7\23\2\2\u13a5\u13a7\3\2\2\2\u13a6\u13a2"+
		"\3\2\2\2\u13a6\u13a7\3\2\2\2\u13a7\u13a9\3\2\2\2\u13a8\u1397\3\2\2\2\u13a8"+
		"\u13a9\3\2\2\2\u13a9\u13b5\3\2\2\2\u13aa\u13ab\7\63\2\2\u13ab\u13ac\7"+
		"K\2\2\u13ac\u13ad\7q\2\2\u13ad\u13b2\5\u0202\u0102\2\u13ae\u13af\7\u0443"+
		"\2\2\u13af\u13b1\5\u0202\u0102\2\u13b0\u13ae\3\2\2\2\u13b1\u13b4\3\2\2"+
		"\2\u13b2\u13b0\3\2\2\2\u13b2\u13b3\3\2\2\2\u13b3\u13b6\3\2\2\2\u13b4\u13b2"+
		"\3\2\2\2\u13b5\u13aa\3\2\2\2\u13b5\u13b6\3\2\2\2\u13b6\u01b3\3\2\2\2\u13b7"+
		"\u13b8\7\33\2\2\u13b8\u13b9\7\u00a4\2\2\u13b9\u13bd\5\u023a\u011e\2\u13ba"+
		"\u13bc\5\u01bc\u00df\2\u13bb\u13ba\3\2\2\2\u13bc\u13bf\3\2\2\2\u13bd\u13bb"+
		"\3\2\2\2\u13bd\u13be\3\2\2\2\u13be\u01b5\3\2\2\2\u13bf\u13bd\3\2\2\2\u13c0"+
		"\u13c1\7\u0159\2\2\u13c1\u13c2\7\u00a4\2\2\u13c2\u13c4\5\u023a\u011e\2"+
		"\u13c3\u13c5\tE\2\2\u13c4\u13c3\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5\u01b7"+
		"\3\2\2\2\u13c6\u13c8\7r\2\2\u13c7\u13c9\tD\2\2\u13c8\u13c7\3\2\2\2\u13c8"+
		"\u13c9\3\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u13cb\tF\2\2\u13cb\u13cc\5\u023a"+
		"\u011e\2\u13cc\u01b9\3\2\2\2\u13cd\u13cf\7\u0228\2\2\u13ce\u13d0\tD\2"+
		"\2\u13cf\u13ce\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u13d1\3\2\2\2\u13d1\u13d2"+
		"\7\u00a4\2\2\u13d2\u13d4\5\u023a\u011e\2\u13d3\u13d5\7\u021d\2\2\u13d4"+
		"\u13d3\3\2\2\2\u13d4\u13d5\3\2\2\2\u13d5\u13d7\3\2\2\2\u13d6\u13d8\7\u0197"+
		"\2\2\u13d7\u13d6\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u13da\3\2\2\2\u13d9"+
		"\u13db\7\u027a\2\2\u13da\u13d9\3\2\2\2\u13da\u13db\3\2\2\2\u13db\u01bb"+
		"\3\2\2\2\u13dc\u13dd\7@\2\2\u13dd\u13e4\7\u0278\2\2\u13de\u13e4\7\u021d"+
		"\2\2\u13df\u13e4\7\u0199\2\2\u13e0\u13e4\7\u01e6\2\2\u13e1\u13e4\7\u0197"+
		"\2\2\u13e2\u13e4\7\u0157\2\2\u13e3\u13dc\3\2\2\2\u13e3\u13de\3\2\2\2\u13e3"+
		"\u13df\3\2\2\2\u13e3\u13e0\3\2\2\2\u13e3\u13e1\3\2\2\2\u13e3\u13e2\3\2"+
		"\2\2\u13e4\u01bd\3\2\2\2\u13e5\u13e7\7\"\2\2\u13e6\u13e8\7\u0144\2\2\u13e7"+
		"\u13e6\3\2\2\2\u13e7\u13e8\3\2\2\2\u13e8\u13e9\3\2\2\2\u13e9\u13ea\7\u01a5"+
		"\2\2\u13ea\u13eb\5\u0218\u010d\2\u13eb\u13ec\7\u0235\2\2\u13ec\u13ed\t"+
		"G\2\2\u13ed\u13ee\7\u024b\2\2\u13ee\u13ef\7\u0450\2\2\u13ef\u01bf\3\2"+
		"\2\2\u13f0\u13f1\7\u01b6\2\2\u13f1\u13f2\7\u020f\2\2\u13f2\u13f3\5\u0218"+
		"\u010d\2\u13f3\u13f4\7\u024b\2\2\u13f4\u13f5\7\u0450\2\2\u13f5\u01c1\3"+
		"\2\2\2\u13f6\u13f7\7\u0275\2\2\u13f7\u13f8\7\u020f\2\2\u13f8\u13f9\5\u0218"+
		"\u010d\2\u13f9\u01c3\3\2\2\2\u13fa\u13fb\7\u0094\2\2\u13fb\u13fc\5\u01c8"+
		"\u00e5\2\u13fc\u13fd\tH\2\2\u13fd\u1405\5\u027a\u013e\2\u13fe\u13ff\7"+
		"\u0443\2\2\u13ff\u1400\5\u01c8\u00e5\2\u1400\u1401\tH\2\2\u1401\u1402"+
		"\5\u027a\u013e\2\u1402\u1404\3\2\2\2\u1403\u13fe\3\2\2\2\u1404\u1407\3"+
		"\2\2\2\u1405\u1403\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u142a\3\2\2\2\u1407"+
		"\u1405\3\2\2\2\u1408\u1409\7\u0094\2\2\u1409\u140c\5\64\33\2\u140a\u140d"+
		"\5\u020a\u0106\2\u140b\u140d\7*\2\2\u140c\u140a\3\2\2\2\u140c\u140b\3"+
		"\2\2\2\u140d\u142a\3\2\2\2\u140e\u140f\7\u0094\2\2\u140f\u1416\7\u01f3"+
		"\2\2\u1410\u1413\5\u020a\u0106\2\u1411\u1412\7\34\2\2\u1412\u1414\5\u020c"+
		"\u0107\2\u1413\u1411\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1417\3\2\2\2\u1415"+
		"\u1417\7*\2\2\u1416\u1410\3\2\2\2\u1416\u1415\3\2\2\2\u1417\u142a\3\2"+
		"\2\2\u1418\u142a\5\u019c\u00cf\2\u1419\u142a\5\u011e\u0090\2\u141a\u142a"+
		"\5\u011c\u008f\2\u141b\u141c\7\u0094\2\2\u141c\u141d\5\u01fe\u0100\2\u141d"+
		"\u141e\tH\2\2\u141e\u1426\5\u027a\u013e\2\u141f\u1420\7\u0443\2\2\u1420"+
		"\u1421\5\u01fe\u0100\2\u1421\u1422\tH\2\2\u1422\u1423\5\u027a\u013e\2"+
		"\u1423\u1425\3\2\2\2\u1424\u141f\3\2\2\2\u1425\u1428\3\2\2\2\u1426\u1424"+
		"\3\2\2\2\u1426\u1427\3\2\2\2\u1427\u142a\3\2\2\2\u1428\u1426\3\2\2\2\u1429"+
		"\u13fa\3\2\2\2\u1429\u1408\3\2\2\2\u1429\u140e\3\2\2\2\u1429\u1418\3\2"+
		"\2\2\u1429\u1419\3\2\2\2\u1429\u141a\3\2\2\2\u1429\u141b\3\2\2\2\u142a"+
		"\u01c5\3\2\2\2\u142b\u142c\7\u0096\2\2\u142c\u142d\t\66\2\2\u142d\u14c5"+
		"\7\u01ca\2\2\u142e\u142f\7\u0096\2\2\u142f\u1430\tI\2\2\u1430\u1433\7"+
		"\u0191\2\2\u1431\u1432\7N\2\2\u1432\u1434\7\u0450\2\2\u1433\u1431\3\2"+
		"\2\2\u1433\u1434\3\2\2\2\u1434\u1437\3\2\2\2\u1435\u1436\7C\2\2\u1436"+
		"\u1438\5\u021e\u0110\2\u1437\u1435\3\2\2\2\u1437\u1438\3\2\2\2\u1438\u1440"+
		"\3\2\2\2\u1439\u143d\7`\2\2\u143a\u143b\5\u021e\u0110\2\u143b\u143c\7"+
		"\u0443\2\2\u143c\u143e\3\2\2\2\u143d\u143a\3\2\2\2\u143d\u143e\3\2\2\2"+
		"\u143e\u143f\3\2\2\2\u143f\u1441\5\u021e\u0110\2\u1440\u1439\3\2\2\2\u1440"+
		"\u1441\3\2\2\2\u1441\u14c5\3\2\2\2\u1442\u1443\7\u0096\2\2\u1443\u1445"+
		"\5\u01ca\u00e6\2\u1444\u1446\5\u01cc\u00e7\2\u1445\u1444\3\2\2\2\u1445"+
		"\u1446\3\2\2\2\u1446\u14c5\3\2\2\2\u1447\u1449\7\u0096\2\2\u1448\u144a"+
		"\7\u01a4\2\2\u1449\u1448\3\2\2\2\u1449\u144a\3\2\2\2\u144a\u144b\3\2\2"+
		"\2\u144b\u144c\t(\2\2\u144c\u144d\tJ\2\2\u144d\u1450\5\u0200\u0101\2\u144e"+
		"\u144f\tJ\2\2\u144f\u1451\5\u0218\u010d\2\u1450\u144e\3\2\2\2\u1450\u1451"+
		"\3\2\2\2\u1451\u1453\3\2\2\2\u1452\u1454\5\u01cc\u00e7\2\u1453\u1452\3"+
		"\2\2\2\u1453\u1454\3\2\2\2\u1454\u14c5\3\2\2\2\u1455\u1456\7\u0096\2\2"+
		"\u1456\u1457\7\"\2\2\u1457\u1459\t\2\2\2\u1458\u145a\5\u0250\u0129\2\u1459"+
		"\u1458\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145b\3\2\2\2\u145b\u14c5\5\u0218"+
		"\u010d\2\u145c\u145d\7\u0096\2\2\u145d\u145e\7\"\2\2\u145e\u145f\tK\2"+
		"\2\u145f\u14c5\5\u01fe\u0100\2\u1460\u1461\7\u0096\2\2\u1461\u1462\7\""+
		"\2\2\u1462\u1463\7\u0279\2\2\u1463\u14c5\5\u0206\u0104\2\u1464\u1465\7"+
		"\u0096\2\2\u1465\u1466\7\u018a\2\2\u1466\u1467\5\u020e\u0108\2\u1467\u1468"+
		"\tL\2\2\u1468\u14c5\3\2\2\2\u1469\u146a\7\u0096\2\2\u146a\u14c5\5\u01ce"+
		"\u00e8\2\u146b\u146c\7\u0096\2\2\u146c\u1474\tM\2\2\u146d\u1471\7`\2\2"+
		"\u146e\u146f\5\u021e\u0110\2\u146f\u1470\7\u0443\2\2\u1470\u1472\3\2\2"+
		"\2\u1471\u146e\3\2\2\2\u1471\u1472\3\2\2\2\u1472\u1473\3\2\2\2\u1473\u1475"+
		"\5\u021e\u0110\2\u1474\u146d\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u14c5\3"+
		"\2\2\2\u1476\u1477\7\u0096\2\2\u1477\u1478\7\u0117\2\2\u1478\u1479\7\u0441"+
		"\2\2\u1479\u147a\7\u0431\2\2\u147a\u147b\7\u0442\2\2\u147b\u14c5\tM\2"+
		"\2\u147c\u147d\7\u0096\2\2\u147d\u1480\5\u01d0\u00e9\2\u147e\u147f\tJ"+
		"\2\2\u147f\u1481\5\u0218\u010d\2\u1480\u147e\3\2\2\2\u1480\u1481\3\2\2"+
		"\2\u1481\u1483\3\2\2\2\u1482\u1484\5\u01cc\u00e7\2\u1483\u1482\3\2\2\2"+
		"\u1483\u1484\3\2\2\2\u1484\u14c5\3\2\2\2\u1485\u1486\7\u0096\2\2\u1486"+
		"\u1487\tN\2\2\u1487\u1488\7\u0160\2\2\u1488\u14c5\5\u01fe\u0100\2\u1489"+
		"\u148a\7\u0096\2\2\u148a\u148d\7\u01a8\2\2\u148b\u148c\7@\2\2\u148c\u148e"+
		"\5\u0206\u0104\2\u148d\u148b\3\2\2\2\u148d\u148e\3\2\2\2\u148e\u14c5\3"+
		"\2\2\2\u148f\u1490\7\u0096\2\2\u1490\u1491\tO\2\2\u1491\u1492\tJ\2\2\u1492"+
		"\u1495\5\u0200\u0101\2\u1493\u1494\tJ\2\2\u1494\u1496\5\u0218\u010d\2"+
		"\u1495\u1493\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u1499\3\2\2\2\u1497\u1498"+
		"\7\u00b6\2\2\u1498\u149a\5\u027a\u013e\2\u1499\u1497\3\2\2\2\u1499\u149a"+
		"\3\2\2\2\u149a\u14c5\3\2\2\2\u149b\u149c\7\u0096\2\2\u149c\u149d\7\u0203"+
		"\2\2\u149d\u14a0\7\u0298\2\2\u149e\u149f\tJ\2\2\u149f\u14a1\5\u0218\u010d"+
		"\2\u14a0\u149e\3\2\2\2\u14a0\u14a1\3\2\2\2\u14a1\u14a3\3\2\2\2\u14a2\u14a4"+
		"\5\u01cc\u00e7\2\u14a3\u14a2\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14c5\3"+
		"\2\2\2\u14a5\u14a6\7\u0096\2\2\u14a6\u14a7\7\u0219\2\2\u14a7\u14ac\5\u01d2"+
		"\u00ea\2\u14a8\u14a9\7\u0443\2\2\u14a9\u14ab\5\u01d2\u00ea\2\u14aa\u14a8"+
		"\3\2\2\2\u14ab\u14ae\3\2\2\2\u14ac\u14aa\3\2\2\2\u14ac\u14ad\3\2\2\2\u14ad"+
		"\u14b2\3\2\2\2\u14ae\u14ac\3\2\2\2\u14af\u14b0\7@\2\2\u14b0\u14b1\7\u021c"+
		"\2\2\u14b1\u14b3\5\u021e\u0110\2\u14b2\u14af\3\2\2\2\u14b2\u14b3\3\2\2"+
		"\2\u14b3\u14b4\3\2\2\2\u14b4\u14b8\7`\2\2\u14b5\u14b6\5\u021e\u0110\2"+
		"\u14b6\u14b7\7\u0443\2\2\u14b7\u14b9\3\2\2\2\u14b8\u14b5\3\2\2\2\u14b8"+
		"\u14b9\3\2\2\2\u14b9\u14ba\3\2\2\2\u14ba\u14bb\5\u021e\u0110\2\u14bb\u14c5"+
		"\3\2\2\2\u14bc\u14bd\7\u0096\2\2\u14bd\u14be\7\u0246\2\2\u14be\u14c2\7"+
		"\u025a\2\2\u14bf\u14c0\7@\2\2\u14c0\u14c1\7\u0158\2\2\u14c1\u14c3\7\u0450"+
		"\2\2\u14c2\u14bf\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c5\3\2\2\2\u14c4"+
		"\u142b\3\2\2\2\u14c4\u142e\3\2\2\2\u14c4\u1442\3\2\2\2\u14c4\u1447\3\2"+
		"\2\2\u14c4\u1455\3\2\2\2\u14c4\u145c\3\2\2\2\u14c4\u1460\3\2\2\2\u14c4"+
		"\u1464\3\2\2\2\u14c4\u1469\3\2\2\2\u14c4\u146b\3\2\2\2\u14c4\u1476\3\2"+
		"\2\2\u14c4\u147c\3\2\2\2\u14c4\u1485\3\2\2\2\u14c4\u1489\3\2\2\2\u14c4"+
		"\u148f\3\2\2\2\u14c4\u149b\3\2\2\2\u14c4\u14a5\3\2\2\2\u14c4\u14bc\3\2"+
		"\2\2\u14c5\u01c7\3\2\2\2\u14c6\u14d1\7\u045c\2\2\u14c7\u14d1\7\u045d\2"+
		"\2\u14c8\u14c9\7\u0445\2\2\u14c9\u14cb\7\u0445\2\2\u14ca\u14c8\3\2\2\2"+
		"\u14ca\u14cb\3\2\2\2\u14cb\u14cc\3\2\2\2\u14cc\u14ce\tP\2\2\u14cd\u14ca"+
		"\3\2\2\2\u14cd\u14ce\3\2\2\2\u14ce\u14cf\3\2\2\2\u14cf\u14d1\5\u0218\u010d"+
		"\2\u14d0\u14c6\3\2\2\2\u14d0\u14c7\3\2\2\2\u14d0\u14cd\3\2\2\2\u14d1\u01c9"+
		"\3\2\2\2\u14d2\u14d3\7\32\2\2\u14d3\u14e0\7\u0094\2\2\u14d4\u14e0\7\u0324"+
		"\2\2\u14d5\u14e0\7(\2\2\u14d6\u14e0\7\u0092\2\2\u14d7\u14d8\7\u01a5\2"+
		"\2\u14d8\u14e0\7\u025a\2\2\u14d9\u14da\7~\2\2\u14da\u14e0\7\u025a\2\2"+
		"\u14db\u14dd\t\65\2\2\u14dc\u14db\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd\u14de"+
		"\3\2\2\2\u14de\u14e0\tQ\2\2\u14df\u14d2\3\2\2\2\u14df\u14d4\3\2\2\2\u14df"+
		"\u14d5\3\2\2\2\u14df\u14d6\3\2\2\2\u14df\u14d7\3\2\2\2\u14df\u14d9\3\2"+
		"\2\2\u14df\u14dc\3\2\2\2\u14e0\u01cb\3\2\2\2\u14e1\u14e2\7_\2\2\u14e2"+
		"\u14e6\7\u0450\2\2\u14e3\u14e4\7\u00b6\2\2\u14e4\u14e6\5\u027a\u013e\2"+
		"\u14e5\u14e1\3\2\2\2\u14e5\u14e3\3\2\2\2\u14e6\u01cd\3\2\2\2\u14e7\u14e9"+
		"\7\u025c\2\2\u14e8\u14e7\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u14ea\3\2\2"+
		"\2\u14ea\u14f9\7\u018b\2\2\u14eb\u14ec\7\u01cb\2\2\u14ec\u14f9\7\u025a"+
		"\2\2\u14ed\u14f9\7\u0211\2\2\u14ee\u14f9\7\u02a0\2\2\u14ef\u14f1\7\u01a4"+
		"\2\2\u14f0\u14ef\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14f2\3\2\2\2\u14f2"+
		"\u14f9\7\u0218\2\2\u14f3\u14f9\7\u021a\2\2\u14f4\u14f5\7\u0246\2\2\u14f5"+
		"\u14f9\7\u01ae\2\2\u14f6\u14f9\7\u0148\2\2\u14f7\u14f9\7\u0173\2\2\u14f8"+
		"\u14e8\3\2\2\2\u14f8\u14eb\3\2\2\2\u14f8\u14ed\3\2\2\2\u14f8\u14ee\3\2"+
		"\2\2\u14f8\u14f0\3\2\2\2\u14f8\u14f3\3\2\2\2\u14f8\u14f4\3\2\2\2\u14f8"+
		"\u14f6\3\2\2\2\u14f8\u14f7\3\2\2\2\u14f9\u01cf\3\2\2\2\u14fa\u1503\7\u0191"+
		"\2\2\u14fb\u14fc\7\u00a4\2\2\u14fc\u1503\7\u025a\2\2\u14fd\u14ff\7\u01a4"+
		"\2\2\u14fe\u14fd\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u1500\3\2\2\2\u1500"+
		"\u1503\7\u0298\2\2\u1501\u1503\7\u026f\2\2\u1502\u14fa\3\2\2\2\u1502\u14fb"+
		"\3\2\2\2\u1502\u14fe\3\2\2\2\u1502\u1501\3\2\2\2\u1503\u01d1\3\2\2\2\u1504"+
		"\u1511\7\b\2\2\u1505\u1506\7\u0150\2\2\u1506\u1511\7\u01bb\2\2\u1507\u1508"+
		"\7\u0172\2\2\u1508\u1511\7\u0265\2\2\u1509\u1511\7\u0175\2\2\u150a\u1511"+
		"\7\u01bd\2\2\u150b\u1511\7\u02f0\2\2\u150c\u150d\7\u0208\2\2\u150d\u1511"+
		"\7\u019a\2\2\u150e\u1511\7\u024d\2\2\u150f\u1511\7\u0264\2\2\u1510\u1504"+
		"\3\2\2\2\u1510\u1505\3\2\2\2\u1510\u1507\3\2\2\2\u1510\u1509\3\2\2\2\u1510"+
		"\u150a\3\2\2\2\u1510\u150b\3\2\2\2\u1510\u150c\3\2\2\2\u1510\u150e\3\2"+
		"\2\2\u1510\u150f\3\2\2\2\u1511\u01d3\3\2\2\2\u1512\u1513\7\u014e\2\2\u1513"+
		"\u1514\7\u0450\2\2\u1514\u01d5\3\2\2\2\u1515\u1516\7\u0154\2\2\u1516\u1517"+
		"\7O\2\2\u1517\u151c\5\u01e2\u00f2\2\u1518\u1519\7\u0443\2\2\u1519\u151b"+
		"\5\u01e2\u00f2\2\u151a\u1518\3\2\2\2\u151b\u151e\3\2\2\2\u151c\u151a\3"+
		"\2\2\2\u151c\u151d\3\2\2\2\u151d\u1526\3\2\2\2\u151e\u151c\3\2\2\2\u151f"+
		"\u1520\7|\2\2\u1520\u1523\7\u0441\2\2\u1521\u1524\5\u0238\u011d\2\u1522"+
		"\u1524\7\b\2\2\u1523\u1521\3\2\2\2\u1523\u1522\3\2\2\2\u1524\u1525\3\2"+
		"\2\2\u1525\u1527\7\u0442\2\2\u1526\u151f\3\2\2\2\u1526\u1527\3\2\2\2\u1527"+
		"\u1528\3\2\2\2\u1528\u1529\7N\2\2\u1529\u152a\5\u0218\u010d\2\u152a\u01d7"+
		"\3\2\2\2\u152b\u152d\7\u01a0\2\2\u152c\u152e\tD\2\2\u152d\u152c\3\2\2"+
		"\2\u152d\u152e\3\2\2\2\u152e\u152f\3\2\2\2\u152f\u1534\5\u01e4\u00f3\2"+
		"\u1530\u1531\7\u0443\2\2\u1531\u1533\5\u01e4\u00f3\2\u1532\u1530\3\2\2"+
		"\2\u1533\u1536\3\2\2\2\u1534\u1532\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u01d9"+
		"\3\2\2\2\u1536\u1534\3\2\2\2\u1537\u1539\7[\2\2\u1538\u153a\tR\2\2\u1539"+
		"\u1538\3\2\2\2\u1539\u153a\3\2\2\2\u153a\u153c\3\2\2\2\u153b\u153d\5\u021e"+
		"\u0110\2\u153c\u153b\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u153c\3\2\2\2\u153e"+
		"\u153f\3\2\2\2\u153f\u01db\3\2\2\2\u1540\u1541\7c\2\2\u1541\u1542\7O\2"+
		"\2\u1542\u1543\7U\2\2\u1543\u1544\7\u0154\2\2\u1544\u1549\5\u01e8\u00f5"+
		"\2\u1545\u1546\7\u0443\2\2\u1546\u1548\5\u01e8\u00f5\2\u1547\u1545\3\2"+
		"\2\2\u1548\u154b\3\2\2\2\u1549\u1547\3\2\2\2\u1549\u154a\3\2\2\2\u154a"+
		"\u01dd\3\2\2\2\u154b\u1549\3\2\2\2\u154c\u154d\7\u0231\2\2\u154d\u154e"+
		"\7\u021c\2\2\u154e\u154f\7\u0154\2\2\u154f\u01df\3\2\2\2\u1550\u1551\7"+
		"\u029e\2\2\u1551\u01e1\3\2\2\2\u1552\u155a\5\u0200\u0101\2\u1553\u1555"+
		"\t\24\2\2\u1554\u1553\3\2\2\2\u1554\u1555\3\2\2\2\u1555\u1556\3\2\2\2"+
		"\u1556\u1557\7\u0441\2\2\u1557\u1558\5\u0238\u011d\2\u1558\u1559\7\u0442"+
		"\2\2\u1559\u155b\3\2\2\2\u155a\u1554\3\2\2\2\u155a\u155b\3\2\2\2\u155b"+
		"\u01e3\3\2\2\2\u155c\u156f\7\u017d\2\2\u155d\u156f\7\u01ae\2\2\u155e\u1560"+
		"\tS\2\2\u155f\u155e\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1561\3\2\2\2\u1561"+
		"\u156f\7\u01ca\2\2\u1562\u156f\7\u0204\2\2\u1563\u156f\7\u02a0\2\2\u1564"+
		"\u1565\7\u021c\2\2\u1565\u156f\7\u0154\2\2\u1566\u156f\7\u025a\2\2\u1567"+
		"\u156f\7\u027b\2\2\u1568\u156c\7\u0298\2\2\u1569\u156a\7\u00b8\2\2\u156a"+
		"\u156b\7\u0081\2\2\u156b\u156d\7d\2\2\u156c\u1569\3\2\2\2\u156c\u156d"+
		"\3\2\2\2\u156d\u156f\3\2\2\2\u156e\u155c\3\2\2\2\u156e\u155d\3\2\2\2\u156e"+
		"\u155f\3\2\2\2\u156e\u1562\3\2\2\2\u156e\u1563\3\2\2\2\u156e\u1564\3\2"+
		"\2\2\u156e\u1566\3\2\2\2\u156e\u1567\3\2\2\2\u156e\u1568\3\2\2\2\u156f"+
		"\u157d\3\2\2\2\u1570\u1571\7\u0222\2\2\u1571\u1573\7\u01ca\2\2\u1572\u1574"+
		"\5\u0144\u00a3\2\u1573\u1572\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u157d\3"+
		"\2\2\2\u1575\u1577\tF\2\2\u1576\u1578\5\u023a\u011e\2\u1577\u1576\3\2"+
		"\2\2\u1577\u1578\3\2\2\2\u1578\u157a\3\2\2\2\u1579\u157b\5\u01e6\u00f4"+
		"\2\u157a\u1579\3\2\2\2\u157a\u157b\3\2\2\2\u157b\u157d\3\2\2\2\u157c\u156e"+
		"\3\2\2\2\u157c\u1570\3\2\2\2\u157c\u1575\3\2\2\2\u157d\u01e5\3\2\2\2\u157e"+
		"\u157f\7\u00b8\2\2\u157f\u1580\7\u0081\2\2\u1580\u1584\7d\2\2\u1581\u1582"+
		"\7@\2\2\u1582\u1584\7\u0196\2\2\u1583\u157e\3\2\2\2\u1583\u1581\3\2\2"+
		"\2\u1584\u01e7\3\2\2\2\u1585\u158d\5\u0200\u0101\2\u1586\u1587\7|\2\2"+
		"\u1587\u158a\7\u0441\2\2\u1588\u158b\5\u0238\u011d\2\u1589\u158b\7\b\2"+
		"\2\u158a\u1588\3\2\2\2\u158a\u1589\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u158e"+
		"\7\u0442\2\2\u158d\u1586\3\2\2\2\u158d\u158e\3\2\2\2\u158e\u1596\3\2\2"+
		"\2\u158f\u1591\t\24\2\2\u1590\u158f\3\2\2\2\u1590\u1591\3\2\2\2\u1591"+
		"\u1592\3\2\2\2\u1592\u1593\7\u0441\2\2\u1593\u1594\5\u0238\u011d\2\u1594"+
		"\u1595\7\u0442\2\2\u1595\u1597\3\2\2\2\u1596\u1590\3\2\2\2\u1596\u1597"+
		"\3\2\2\2\u1597\u159a\3\2\2\2\u1598\u1599\7M\2\2\u1599\u159b\7\u01c4\2"+
		"\2\u159a\u1598\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u01e9\3\2\2\2\u159c\u159d"+
		"\tT\2\2\u159d\u15a0\5\u0200\u0101\2\u159e\u15a1\5\u0218\u010d\2\u159f"+
		"\u15a1\7\u0450\2\2\u15a0\u159e\3\2\2\2\u15a0\u159f\3\2\2\2\u15a0\u15a1"+
		"\3\2\2\2\u15a1\u01eb\3\2\2\2\u15a2\u15a6\tT\2\2\u15a3\u15a4\tU\2\2\u15a4"+
		"\u15a5\7\u0438\2\2\u15a5\u15a7\tV\2\2\u15a6\u15a3\3\2\2\2\u15a6\u15a7"+
		"\3\2\2\2\u15a7\u15a8\3\2\2\2\u15a8\u15a9\5\u01fc\u00ff\2\u15a9\u01ed\3"+
		"\2\2\2\u15aa\u15ab\7\u01ac\2\2\u15ab\u15ac\7\u0450\2\2\u15ac\u01ef\3\2"+
		"\2\2\u15ad\u15ae\7\u00b2\2\2\u15ae\u15af\5\u0218\u010d\2\u15af\u01f1\3"+
		"\2\2\2\u15b0\u15b8\7\u0097\2\2\u15b1\u15b3\7\u009b\2\2\u15b2\u15b4\7\u027d"+
		"\2\2\u15b3\u15b2\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5"+
		"\u15b9\5\u0222\u0112\2\u15b6\u15b9\7\u0458\2\2\u15b7\u15b9\7\u0459\2\2"+
		"\u15b8\u15b1\3\2\2\2\u15b8\u15b6\3\2\2\2\u15b8\u15b7\3\2\2\2\u15b9\u15c3"+
		"\3\2\2\2\u15ba\u15bb\7\u0094\2\2\u15bb\u15c0\5\u01f6\u00fc\2\u15bc\u15bd"+
		"\7\u0443\2\2\u15bd\u15bf\5\u01f6\u00fc\2\u15be\u15bc\3\2\2\2\u15bf\u15c2"+
		"\3\2\2\2\u15c0\u15be\3\2\2\2\u15c0\u15c1\3\2\2\2\u15c1\u15c4\3\2\2\2\u15c2"+
		"\u15c0\3\2\2\2\u15c3\u15ba\3\2\2\2\u15c3\u15c4\3\2\2\2\u15c4\u01f3\3\2"+
		"\2\2\u15c5\u15cd\7\u008a\2\2\u15c6\u15c8\7\u009b\2\2\u15c7\u15c9\7\u027d"+
		"\2\2\u15c8\u15c7\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15ca\3\2\2\2\u15ca"+
		"\u15ce\5\u0222\u0112\2\u15cb\u15ce\7\u0458\2\2\u15cc\u15ce\7\u0459\2\2"+
		"\u15cd\u15c6\3\2\2\2\u15cd\u15cb\3\2\2\2\u15cd\u15cc\3\2\2\2\u15cd\u15ce"+
		"\3\2\2\2\u15ce\u15d8\3\2\2\2\u15cf\u15d0\7\u0094\2\2\u15d0\u15d5\5\u01f6"+
		"\u00fc\2\u15d1\u15d2\7\u0443\2\2\u15d2\u15d4\5\u01f6\u00fc\2\u15d3\u15d1"+
		"\3\2\2\2\u15d4\u15d7\3\2\2\2\u15d5\u15d3\3\2\2\2\u15d5\u15d6\3\2\2\2\u15d6"+
		"\u15d9\3\2\2\2\u15d7\u15d5\3\2\2\2\u15d8\u15cf\3\2\2\2\u15d8\u15d9\3\2"+
		"\2\2\u15d9\u01f5\3\2\2\2\u15da\u15db\tW\2\2\u15db\u15e0\7\u0438\2\2\u15dc"+
		"\u15e1\5\u0222\u0112\2\u15dd\u15e1\7\u0451\2\2\u15de\u15e1\5\u0208\u0105"+
		"\2\u15df\u15e1\5\u021a\u010e\2\u15e0\u15dc\3\2\2\2\u15e0\u15dd\3\2\2\2"+
		"\u15e0\u15de\3\2\2\2\u15e0\u15df\3\2\2\2\u15e1\u01f7\3\2\2\2\u15e2\u15e4"+
		"\7F\2\2\u15e3\u15e5\tX\2\2\u15e4\u15e3\3\2\2\2\u15e4\u15e5\3\2\2\2\u15e5"+
		"\u15e6\3\2\2\2\u15e6\u1606\7\60\2\2\u15e7\u15e8\5\u01c8\u00e5\2\u15e8"+
		"\u15e9\7\u0438\2\2\u15e9\u15f1\tY\2\2\u15ea\u15eb\7\u0443\2\2\u15eb\u15ec"+
		"\5\u01c8\u00e5\2\u15ec\u15ed\7\u0438\2\2\u15ed\u15ee\tY\2\2\u15ee\u15f0"+
		"\3\2\2\2\u15ef\u15ea\3\2\2\2\u15f0\u15f3\3\2\2\2\u15f1\u15ef\3\2\2\2\u15f1"+
		"\u15f2\3\2\2\2\u15f2\u1607\3\2\2\2\u15f3\u15f1\3\2\2\2\u15f4\u15f7\7\36"+
		"\2\2\u15f5\u15f8\5\u021e\u0110\2\u15f6\u15f8\5\u01c8\u00e5\2\u15f7\u15f5"+
		"\3\2\2\2\u15f7\u15f6\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u15fa\5\u01c8\u00e5"+
		"\2\u15fa\u15fb\7\u0438\2\2\u15fb\u1603\5\u01fa\u00fe\2\u15fc\u15fd\7\u0443"+
		"\2\2\u15fd\u15fe\5\u01c8\u00e5\2\u15fe\u15ff\7\u0438\2\2\u15ff\u1600\5"+
		"\u01fa\u00fe\2\u1600\u1602\3\2\2\2\u1601\u15fc\3\2\2\2\u1602\u1605\3\2"+
		"\2\2\u1603\u1601\3\2\2\2\u1603\u1604\3\2\2\2\u1604\u1607\3\2\2\2\u1605"+
		"\u1603\3\2\2\2\u1606\u15e7\3\2\2\2\u1606\u15f4\3\2\2\2\u1607\u01f9\3\2"+
		"\2\2\u1608\u1609\tZ\2\2\u1609\u01fb\3\2\2\2\u160a\u1610\5\u00b8]\2\u160b"+
		"\u1610\5\u00aaV\2\u160c\u1610\5\u00b0Y\2\u160d\u1610\5\u00b6\\\2\u160e"+
		"\u1610\5\u00ba^\2\u160f\u160a\3\2\2\2\u160f\u160b\3\2\2\2\u160f\u160c"+
		"\3\2\2\2\u160f\u160d\3\2\2\2\u160f\u160e\3\2\2\2\u1610\u1615\3\2\2\2\u1611"+
		"\u1612\7@\2\2\u1612\u1613\7\u016c\2\2\u1613\u1615\5\u0218\u010d\2\u1614"+
		"\u160f\3\2\2\2\u1614\u1611\3\2\2\2\u1615\u01fd\3\2\2\2\u1616\u161a\5\u0218"+
		"\u010d\2\u1617\u161b\7\u0457\2\2\u1618\u1619\7\u0440\2\2\u1619\u161b\5"+
		"\u0218\u010d\2\u161a\u1617\3\2\2\2\u161a\u1618\3\2\2\2\u161a\u161b\3\2"+
		"\2\2\u161b\u01ff\3\2\2\2\u161c\u161d\5\u01fe\u0100\2\u161d\u0201\3\2\2"+
		"\2\u161e\u1623\5\u0218\u010d\2\u161f\u1621\5\u021c\u010f\2\u1620\u1622"+
		"\5\u021c\u010f\2\u1621\u1620\3\2\2\2\u1621\u1622\3\2\2\2\u1622\u1624\3"+
		"\2\2\2\u1623\u161f\3\2\2\2\u1623\u1624\3\2\2\2\u1624\u162b\3\2\2\2\u1625"+
		"\u1626\13\2\2\2\u1626\u1628\5\u021c\u010f\2\u1627\u1629\5\u021c\u010f"+
		"\2\u1628\u1627\3\2\2\2\u1628\u1629\3\2\2\2\u1629\u162b\3\2\2\2\u162a\u161e"+
		"\3\2\2\2\u162a\u1625\3\2\2\2\u162b\u0203\3\2\2\2\u162c\u162f\5\u0218\u010d"+
		"\2\u162d\u162f\7\u0450\2\2\u162e\u162c\3\2\2\2\u162e\u162d\3\2\2\2\u162f"+
		"\u1634\3\2\2\2\u1630\u1631\7\u0441\2\2\u1631\u1632\5\u021e\u0110\2\u1632"+
		"\u1633\7\u0442\2\2\u1633\u1635\3\2\2\2\u1634\u1630\3\2\2\2\u1634\u1635"+
		"\3\2\2\2\u1635\u1638\3\2\2\2\u1636\u1638\5\u027a\u013e\2\u1637\u162e\3"+
		"\2\2\2\u1637\u1636\3\2\2\2\u1638\u163a\3\2\2\2\u1639\u163b\t/\2\2\u163a"+
		"\u1639\3\2\2\2\u163a\u163b\3\2\2\2\u163b\u0205\3\2\2\2\u163c\u163d\t["+
		"\2\2\u163d\u0207\3\2\2\2\u163e\u163f\t\\\2\2\u163f\u0209\3\2\2\2\u1640"+
		"\u1645\7\u00da\2\2\u1641\u1645\5\u028c\u0147\2\u1642\u1645\7\u0450\2\2"+
		"\u1643\u1645\7\u044d\2\2\u1644\u1640\3\2\2\2\u1644\u1641\3\2\2\2\u1644"+
		"\u1642\3\2\2\2\u1644\u1643\3\2\2\2\u1645\u020b\3\2\2\2\u1646\u1649\5\u0218"+
		"\u010d\2\u1647\u1649\7\u0450\2\2\u1648\u1646\3\2\2\2\u1648\u1647\3\2\2"+
		"\2\u1649\u020d\3\2\2\2\u164a\u164b\t]\2\2\u164b\u020f\3\2\2\2\u164c\u164d"+
		"\5\u021e\u0110\2\u164d\u164e\7\u0435\2\2\u164e\u164f\5\u021e\u0110\2\u164f"+
		"\u1650\7\u0435\2\2\u1650\u1651\5\u021e\u0110\2\u1651\u1652\7\u0435\2\2"+
		"\u1652\u1653\5\u021e\u0110\2\u1653\u1654\7\u0435\2\2\u1654\u165a\5\u021e"+
		"\u0110\2\u1655\u1656\7\u044c\2\2\u1656\u1657\5\u021e\u0110\2\u1657\u1658"+
		"\7\u0435\2\2\u1658\u1659\5\u021e\u0110\2\u1659\u165b\3\2\2\2\u165a\u1655"+
		"\3\2\2\2\u165b\u165c\3\2\2\2\u165c\u165a\3\2\2\2\u165c\u165d\3\2\2\2\u165d"+
		"\u0211\3\2\2\2\u165e\u1665\5\u0214\u010b\2\u165f\u1660\7\u0443\2\2\u1660"+
		"\u1663\5\u0214\u010b\2\u1661\u1662\7\u0443\2\2\u1662\u1664\5\u021e\u0110"+
		"\2\u1663\u1661\3\2\2\2\u1663\u1664\3\2\2\2\u1664\u1666\3\2\2\2\u1665\u165f"+
		"\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u0213\3\2\2\2\u1667\u166f\7\u0450\2"+
		"\2\u1668\u166f\7\u0455\2\2\u1669\u166b\7\u0452\2\2\u166a\u1669\3\2\2\2"+
		"\u166b\u166c\3\2\2\2\u166c\u166a\3\2\2\2\u166c\u166d\3\2\2\2\u166d\u166f"+
		"\3\2\2\2\u166e\u1667\3\2\2\2\u166e\u1668\3\2\2\2\u166e\u166a\3\2\2\2\u166f"+
		"\u0215\3\2\2\2\u1670\u1673\5\u0218\u010d\2\u1671\u1673\7\u0450\2\2\u1672"+
		"\u1670\3\2\2\2\u1672\u1671\3\2\2\2\u1673\u0217\3\2\2\2\u1674\u1678\5\u021a"+
		"\u010e\2\u1675\u1678\7\u0459\2\2\u1676\u1678\7\u044d\2\2\u1677\u1674\3"+
		"\2\2\2\u1677\u1675\3\2\2\2\u1677\u1676\3\2\2\2\u1678\u0219\3\2\2\2\u1679"+
		"\u1683\7\u0458\2\2\u167a\u1683\5\u028c\u0147\2\u167b\u1683\5\u028e\u0148"+
		"\2\u167c\u1683\5\u020e\u0108\2\u167d\u1683\5\u0290\u0149\2\u167e\u1683"+
		"\5\u0292\u014a\2\u167f\u1683\5\u0294\u014b\2\u1680\u1683\5\u0296\u014c"+
		"\2\u1681\u1683\5\u0298\u014d\2\u1682\u1679\3\2\2\2\u1682\u167a\3\2\2\2"+
		"\u1682\u167b\3\2\2\2\u1682\u167c\3\2\2\2\u1682\u167d\3\2\2\2\u1682\u167e"+
		"\3\2\2\2\u1682\u167f\3\2\2\2\u1682\u1680\3\2\2\2\u1682\u1681\3\2\2\2\u1683"+
		"\u021b\3\2\2\2\u1684\u1688\7\u0457\2\2\u1685\u1686\7\u0440\2\2\u1686\u1688"+
		"\5\u0218\u010d\2\u1687\u1684\3\2\2\2\u1687\u1685\3\2\2\2\u1688\u021d\3"+
		"\2\2\2\u1689\u168a\t^\2\2\u168a\u021f\3\2\2\2\u168b\u168e\7\u044e\2\2"+
		"\u168c\u168e\5\u021e\u0110\2\u168d\u168b\3\2\2\2\u168d\u168c\3\2\2\2\u168e"+
		"\u0221\3\2\2\2\u168f\u1691\7\u0456\2\2\u1690\u168f\3\2\2\2\u1690\u1691"+
		"\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u1695\7\u0450\2\2\u1693\u1695\7\u044f"+
		"\2\2\u1694\u1690\3\2\2\2\u1694\u1693\3\2\2\2\u1695\u1697\3\2\2\2\u1696"+
		"\u1698\7\u0450\2\2\u1697\u1696\3\2\2\2\u1698\u1699\3\2\2\2\u1699\u1697"+
		"\3\2\2\2\u1699\u169a\3\2\2\2\u169a\u16a7\3\2\2\2\u169b\u169d\7\u0456\2"+
		"\2\u169c\u169b\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u169e\3\2\2\2\u169e\u16a1"+
		"\7\u0450\2\2\u169f\u16a1\7\u044f\2\2\u16a0\u169c\3\2\2\2\u16a0\u169f\3"+
		"\2\2\2\u16a1\u16a4\3\2\2\2\u16a2\u16a3\7\34\2\2\u16a3\u16a5\5\u020c\u0107"+
		"\2\u16a4\u16a2\3\2\2\2\u16a4\u16a5\3\2\2\2\u16a5\u16a7\3\2\2\2\u16a6\u1694"+
		"\3\2\2\2\u16a6\u16a0\3\2\2\2\u16a7\u0223\3\2\2\2\u16a8\u16a9\t_\2\2\u16a9"+
		"\u0225\3\2\2\2\u16aa\u16ac\7\u0456\2\2\u16ab\u16aa\3\2\2\2\u16ab\u16ac"+
		"\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad\u16ae\7\u0452\2\2\u16ae\u0227\3\2\2"+
		"\2\u16af\u16b1\7m\2\2\u16b0\u16af\3\2\2\2\u16b0\u16b1\3\2\2\2\u16b1\u16b2"+
		"\3\2\2\2\u16b2\u16b3\t`\2\2\u16b3\u0229\3\2\2\2\u16b4\u16c1\5\u0222\u0112"+
		"\2\u16b5\u16c1\5\u021e\u0110\2\u16b6\u16b7\7\u0435\2\2\u16b7\u16c1\5\u021e"+
		"\u0110\2\u16b8\u16c1\5\u0226\u0114\2\u16b9\u16c1\5\u0224\u0113\2\u16ba"+
		"\u16c1\7\u0453\2\2\u16bb\u16c1\7\u0455\2\2\u16bc\u16be\7m\2\2\u16bd\u16bc"+
		"\3\2\2\2\u16bd\u16be\3\2\2\2\u16be\u16bf\3\2\2\2\u16bf\u16c1\t`\2\2\u16c0"+
		"\u16b4\3\2\2\2\u16c0\u16b5\3\2\2\2\u16c0\u16b6\3\2\2\2\u16c0\u16b8\3\2"+
		"\2\2\u16c0\u16b9\3\2\2\2\u16c0\u16ba\3\2\2\2\u16c0\u16bb\3\2\2\2\u16c0"+
		"\u16bd\3\2\2\2\u16c1\u022b\3\2\2\2\u16c2\u16c4\ta\2\2\u16c3\u16c5\7\u00e6"+
		"\2\2\u16c4\u16c3\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u16c7\3\2\2\2\u16c6"+
		"\u16c8\5\u0232\u011a\2\u16c7\u16c6\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u16ca"+
		"\3\2\2\2\u16c9\u16cb\7\u00da\2\2\u16ca\u16c9\3\2\2\2\u16ca\u16cb\3\2\2"+
		"\2\u16cb\u16cf\3\2\2\2\u16cc\u16cd\5\64\33\2\u16cd\u16ce\5\u020a\u0106"+
		"\2\u16ce\u16d0\3\2\2\2\u16cf\u16cc\3\2\2\2\u16cf\u16d0\3\2\2\2\u16d0\u16d4"+
		"\3\2\2\2\u16d1\u16d2\7\34\2\2\u16d2\u16d5\5\u020c\u0107\2\u16d3\u16d5"+
		"\7\u00da\2\2\u16d4\u16d1\3\2\2\2\u16d4\u16d3\3\2\2\2\u16d4\u16d5\3\2\2"+
		"\2\u16d5\u173d\3\2\2\2\u16d6\u16d7\7\u00d9\2\2\u16d7\u16d9\tb\2\2\u16d8"+
		"\u16da\5\u0232\u011a\2\u16d9\u16d8\3\2\2\2\u16d9\u16da\3\2\2\2\u16da\u16dc"+
		"\3\2\2\2\u16db\u16dd\7\u00da\2\2\u16dc\u16db\3\2\2\2\u16dc\u16dd\3\2\2"+
		"\2\u16dd\u173d\3\2\2\2\u16de\u16df\7\u01f4\2\2\u16df\u16e1\7\u00d7\2\2"+
		"\u16e0\u16e2\5\u0232\u011a\2\u16e1\u16e0\3\2\2\2\u16e1\u16e2\3\2\2\2\u16e2"+
		"\u16e4\3\2\2\2\u16e3\u16e5\7\u00da\2\2\u16e4\u16e3\3\2\2\2\u16e4\u16e5"+
		"\3\2\2\2\u16e5\u173d\3\2\2\2\u16e6\u16e7\7\u00d9\2\2\u16e7\u16e8\tc\2"+
		"\2\u16e8\u16ea\7\u00e6\2\2\u16e9\u16eb\5\u0232\u011a\2\u16ea\u16e9\3\2"+
		"\2\2\u16ea\u16eb\3\2\2\2\u16eb\u16ed\3\2\2\2\u16ec\u16ee\7\u00da\2\2\u16ed"+
		"\u16ec\3\2\2\2\u16ed\u16ee\3\2\2\2\u16ee\u173d\3\2\2\2\u16ef\u16f1\td"+
		"\2\2\u16f0\u16f2\5\u0232\u011a\2\u16f1\u16f0\3\2\2\2\u16f1\u16f2\3\2\2"+
		"\2\u16f2\u16f6\3\2\2\2\u16f3\u16f5\te\2\2\u16f4\u16f3\3\2\2\2\u16f5\u16f8"+
		"\3\2\2\2\u16f6\u16f4\3\2\2\2\u16f6\u16f7\3\2\2\2\u16f7\u173d\3\2\2\2\u16f8"+
		"\u16f6\3\2\2\2\u16f9\u16fb\7\u00c8\2\2\u16fa\u16fc\5\u0234\u011b\2\u16fb"+
		"\u16fa\3\2\2\2\u16fb\u16fc\3\2\2\2\u16fc\u1700\3\2\2\2\u16fd\u16ff\te"+
		"\2\2\u16fe\u16fd\3\2\2\2\u16ff\u1702\3\2\2\2\u1700\u16fe\3\2\2\2\u1700"+
		"\u1701\3\2\2\2\u1701\u173d\3\2\2\2\u1702\u1700\3\2\2\2\u1703\u1705\7\u00c9"+
		"\2\2\u1704\u1706\7\u00ca\2\2\u1705\u1704\3\2\2\2\u1705\u1706\3\2\2\2\u1706"+
		"\u1708\3\2\2\2\u1707\u1709\5\u0234\u011b\2\u1708\u1707\3\2\2\2\u1708\u1709"+
		"\3\2\2\2\u1709\u170d\3\2\2\2\u170a\u170c\te\2\2\u170b\u170a\3\2\2\2\u170c"+
		"\u170f\3\2\2\2\u170d\u170b\3\2\2\2\u170d\u170e\3\2\2\2\u170e\u173d\3\2"+
		"\2\2\u170f\u170d\3\2\2\2\u1710\u1712\tf\2\2\u1711\u1713\5\u0236\u011c"+
		"\2\u1712\u1711\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1717\3\2\2\2\u1714\u1716"+
		"\te\2\2\u1715\u1714\3\2\2\2\u1716\u1719\3\2\2\2\u1717\u1715\3\2\2\2\u1717"+
		"\u1718\3\2\2\2\u1718\u173d\3\2\2\2\u1719\u1717\3\2\2\2\u171a\u173d\tg"+
		"\2\2\u171b\u171d\th\2\2\u171c\u171e\5\u0232\u011a\2\u171d\u171c\3\2\2"+
		"\2\u171d\u171e\3\2\2\2\u171e\u173d\3\2\2\2\u171f\u1720\ti\2\2\u1720\u1722"+
		"\5\u022e\u0118\2\u1721\u1723\7\u00da\2\2\u1722\u1721\3\2\2\2\u1722\u1723"+
		"\3\2\2\2\u1723\u1727\3\2\2\2\u1724\u1725\5\64\33\2\u1725\u1726\5\u020a"+
		"\u0106\2\u1726\u1728\3\2\2\2\u1727\u1724\3\2\2\2\u1727\u1728\3\2\2\2\u1728"+
		"\u173d\3\2\2\2\u1729\u173d\tj\2\2\u172a\u172c\7\u00df\2\2\u172b\u172d"+
		"\7\u00d7\2\2\u172c\u172b\3\2\2\2\u172c\u172d\3\2\2\2\u172d\u172f\3\2\2"+
		"\2\u172e\u1730\7\u00da\2\2\u172f\u172e\3\2\2\2\u172f\u1730\3\2\2\2\u1730"+
		"\u1734\3\2\2\2\u1731\u1732\5\64\33\2\u1732\u1733\5\u020a\u0106\2\u1733"+
		"\u1735\3\2\2\2\u1734\u1731\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1738\3\2"+
		"\2\2\u1736\u1737\7\34\2\2\u1737\u1739\5\u020c\u0107\2\u1738\u1736\3\2"+
		"\2\2\u1738\u1739\3\2\2\2\u1739\u173d\3\2\2\2\u173a\u173b\7\u00df\2\2\u173b"+
		"\u173d\7\u00db\2\2\u173c\u16c2\3\2\2\2\u173c\u16d6\3\2\2\2\u173c\u16de"+
		"\3\2\2\2\u173c\u16e6\3\2\2\2\u173c\u16ef\3\2\2\2\u173c\u16f9\3\2\2\2\u173c"+
		"\u1703\3\2\2\2\u173c\u1710\3\2\2\2\u173c\u171a\3\2\2\2\u173c\u171b\3\2"+
		"\2\2\u173c\u171f\3\2\2\2\u173c\u1729\3\2\2\2\u173c\u172a\3\2\2\2\u173c"+
		"\u173a\3\2\2\2\u173d\u022d\3\2\2\2\u173e\u173f\7\u0441\2\2\u173f\u1744"+
		"\7\u0450\2\2\u1740\u1741\7\u0443\2\2\u1741\u1743\7\u0450\2\2\u1742\u1740"+
		"\3\2\2\2\u1743\u1746\3\2\2\2\u1744\u1742\3\2\2\2\u1744\u1745\3\2\2\2\u1745"+
		"\u1747\3\2\2\2\u1746\u1744\3\2\2\2\u1747\u1748\7\u0442\2\2\u1748\u022f"+
		"\3\2\2\2\u1749\u174b\tk\2\2\u174a\u174c\5\u0232\u011a\2\u174b\u174a\3"+
		"\2\2\2\u174b\u174c\3\2\2\2\u174c\u1760\3\2\2\2\u174d\u174f\7\u00d6\2\2"+
		"\u174e\u1750\5\u0232\u011a\2\u174f\u174e\3\2\2\2\u174f\u1750\3\2\2\2\u1750"+
		"\u1754\3\2\2\2\u1751\u1752\5\64\33\2\u1752\u1753\5\u020a\u0106\2\u1753"+
		"\u1755\3\2\2\2\u1754\u1751\3\2\2\2\u1754\u1755\3\2\2\2\u1755\u1760\3\2"+
		"\2\2\u1756\u1760\tl\2\2\u1757\u1759\7\u00ce\2\2\u1758\u175a\5\u0236\u011c"+
		"\2\u1759\u1758\3\2\2\2\u1759\u175a\3\2\2\2\u175a\u1760\3\2\2\2\u175b\u175d"+
		"\tm\2\2\u175c\u175e\7\u00c6\2\2\u175d\u175c\3\2\2\2\u175d\u175e\3\2\2"+
		"\2\u175e\u1760\3\2\2\2\u175f\u1749\3\2\2\2\u175f\u174d\3\2\2\2\u175f\u1756"+
		"\3\2\2\2\u175f\u1757\3\2\2\2\u175f\u175b\3\2\2\2\u1760\u1762\3\2\2\2\u1761"+
		"\u1763\7\r\2\2\u1762\u1761\3\2\2\2\u1762\u1763\3\2\2\2\u1763\u0231\3\2"+
		"\2\2\u1764\u1765\7\u0441\2\2\u1765\u1766\5\u021e\u0110\2\u1766\u1767\7"+
		"\u0442\2\2\u1767\u0233\3\2\2\2\u1768\u1769\7\u0441\2\2\u1769\u176a\5\u021e"+
		"\u0110\2\u176a\u176b\7\u0443\2\2\u176b\u176c\5\u021e\u0110\2\u176c\u176d"+
		"\7\u0442\2\2\u176d\u0235\3\2\2\2\u176e\u176f\7\u0441\2\2\u176f\u1772\5"+
		"\u021e\u0110\2\u1770\u1771\7\u0443\2\2\u1771\u1773\5\u021e\u0110\2\u1772"+
		"\u1770\3\2\2\2\u1772\u1773\3\2\2\2\u1773\u1774\3\2\2\2\u1774\u1775\7\u0442"+
		"\2\2\u1775\u0237\3\2\2\2\u1776\u177b\5\u0218\u010d\2\u1777\u1778\7\u0443"+
		"\2\2\u1778\u177a\5\u0218\u010d\2\u1779\u1777\3\2\2\2\u177a\u177d\3\2\2"+
		"\2\u177b\u1779\3\2\2\2\u177b\u177c\3\2\2\2\u177c\u0239\3\2\2\2\u177d\u177b"+
		"\3\2\2\2\u177e\u1783\5\u0200\u0101\2\u177f\u1780\7\u0443\2\2\u1780\u1782"+
		"\5\u0200\u0101\2\u1781\u177f\3\2\2\2\u1782\u1785\3\2\2\2\u1783\u1781\3"+
		"\2\2\2\u1783\u1784\3\2\2\2\u1784\u023b\3\2\2\2\u1785\u1783\3\2\2\2\u1786"+
		"\u1787\7\u0441\2\2\u1787\u178c\5\u0204\u0103\2\u1788\u1789\7\u0443\2\2"+
		"\u1789\u178b\5\u0204\u0103\2\u178a\u1788\3\2\2\2\u178b\u178e\3\2\2\2\u178c"+
		"\u178a\3\2\2\2\u178c\u178d\3\2\2\2\u178d\u178f\3\2\2\2\u178e\u178c\3\2"+
		"\2\2\u178f\u1790\7\u0442\2\2\u1790\u023d\3\2\2\2\u1791\u1796\5\u027a\u013e"+
		"\2\u1792\u1793\7\u0443\2\2\u1793\u1795\5\u027a\u013e\2\u1794\u1792\3\2"+
		"\2\2\u1795\u1798\3\2\2\2\u1796\u1794\3\2\2\2\u1796\u1797\3\2\2\2\u1797"+
		"\u023f\3\2\2\2\u1798\u1796\3\2\2\2\u1799\u179e\5\u024c\u0127\2\u179a\u179b"+
		"\7\u0443\2\2\u179b\u179d\5\u024c\u0127\2\u179c\u179a\3\2\2\2\u179d\u17a0"+
		"\3\2\2\2\u179e\u179c\3\2\2\2\u179e\u179f\3\2\2\2\u179f\u0241\3\2\2\2\u17a0"+
		"\u179e\3\2\2\2\u17a1\u17a6\5\u022a\u0116\2\u17a2\u17a3\7\u0443\2\2\u17a3"+
		"\u17a5\5\u022a\u0116\2\u17a4\u17a2\3\2\2\2\u17a5\u17a8\3\2\2\2\u17a6\u17a4"+
		"\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u0243\3\2\2\2\u17a8\u17a6\3\2\2\2\u17a9"+
		"\u17ae\7\u0450\2\2\u17aa\u17ab\7\u0443\2\2\u17ab\u17ad\7\u0450\2\2\u17ac"+
		"\u17aa\3\2\2\2\u17ad\u17b0\3\2\2\2\u17ae\u17ac\3\2\2\2\u17ae\u17af\3\2"+
		"\2\2\u17af\u0245\3\2\2\2\u17b0\u17ae\3\2\2\2\u17b1\u17b6\7\u045c\2\2\u17b2"+
		"\u17b3\7\u0443\2\2\u17b3\u17b5\7\u045c\2\2\u17b4\u17b2\3\2\2\2\u17b5\u17b8"+
		"\3\2\2\2\u17b6\u17b4\3\2\2\2\u17b6\u17b7\3\2\2\2\u17b7\u0247\3\2\2\2\u17b8"+
		"\u17b6\3\2\2\2\u17b9\u17c4\7o\2\2\u17ba\u17bc\5\u0280\u0141\2\u17bb\u17ba"+
		"\3\2\2\2\u17bb\u17bc\3\2\2\2\u17bc\u17bd\3\2\2\2\u17bd\u17c4\5\u022a\u0116"+
		"\2\u17be\u17c4\5\u024a\u0126\2\u17bf\u17c0\7\u0441\2\2\u17c0\u17c1\5\u027a"+
		"\u013e\2\u17c1\u17c2\7\u0442\2\2\u17c2\u17c4\3\2\2\2\u17c3\u17b9\3\2\2"+
		"\2\u17c3\u17bb\3\2\2\2\u17c3\u17be\3\2\2\2\u17c3\u17bf\3\2\2\2\u17c4\u17c8"+
		"\3\2\2\2\u17c5\u17c6\7q\2\2\u17c6\u17c7\7\u00b0\2\2\u17c7\u17c9\5\u024a"+
		"\u0126\2\u17c8\u17c5\3\2\2\2\u17c8\u17c9\3\2\2\2\u17c9\u0249\3\2\2\2\u17ca"+
		"\u17d0\tn\2\2\u17cb\u17cd\7\u0441\2\2\u17cc\u17ce\5\u021e\u0110\2\u17cd"+
		"\u17cc\3\2\2\2\u17cd\u17ce\3\2\2\2\u17ce\u17cf\3\2\2\2\u17cf\u17d1\7\u0442"+
		"\2\2\u17d0\u17cb\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u17d9\3\2\2\2\u17d2"+
		"\u17d3\7\u0138\2\2\u17d3\u17d5\7\u0441\2\2\u17d4\u17d6\5\u021e\u0110\2"+
		"\u17d5\u17d4\3\2\2\2\u17d5\u17d6\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7\u17d9"+
		"\7\u0442\2\2\u17d8\u17ca\3\2\2\2\u17d8\u17d2\3\2\2\2\u17d9\u024b\3\2\2"+
		"\2\u17da\u17dd\5\u027a\u013e\2\u17db\u17dd\7*\2\2\u17dc\u17da\3\2\2\2"+
		"\u17dc\u17db\3\2\2\2\u17dd\u024d\3\2\2\2\u17de\u17df\7L\2\2\u17df\u17e0"+
		"\7;\2\2\u17e0\u024f\3\2\2\2\u17e1\u17e2\7L\2\2\u17e2\u17e3\7m\2\2\u17e3"+
		"\u17e4\7;\2\2\u17e4\u0251\3\2\2\2\u17e5\u17f8\5\u0254\u012b\2\u17e6\u17f8"+
		"\5\u025c\u012f\2\u17e7\u17f8\5\u025e\u0130\2\u17e8\u17e9\5\u0272\u013a"+
		"\2\u17e9\u17eb\7\u0441\2\2\u17ea\u17ec\5\u0276\u013c\2\u17eb\u17ea\3\2"+
		"\2\2\u17eb\u17ec\3\2\2\2\u17ec\u17ed\3\2\2\2\u17ed\u17ee\7\u0442\2\2\u17ee"+
		"\u17f8\3\2\2\2\u17ef\u17f0\5\u01fe\u0100\2\u17f0\u17f2\7\u0441\2\2\u17f1"+
		"\u17f3\5\u0276\u013c\2\u17f2\u17f1\3\2\2\2\u17f2\u17f3\3\2\2\2\u17f3\u17f4"+
		"\3\2\2\2\u17f4\u17f5\7\u0442\2\2\u17f5\u17f8\3\2\2\2\u17f6\u17f8\5\u0274"+
		"\u013b\2\u17f7\u17e5\3\2\2\2\u17f7\u17e6\3\2\2\2\u17f7\u17e7\3\2\2\2\u17f7"+
		"\u17e8\3\2\2\2\u17f7\u17ef\3\2\2\2\u17f7\u17f6\3\2\2\2\u17f8\u0253\3\2"+
		"\2\2\u17f9\u17fc\to\2\2\u17fa\u17fb\7\u0441\2\2\u17fb\u17fd\7\u0442\2"+
		"\2\u17fc\u17fa\3\2\2\2\u17fc\u17fd\3\2\2\2\u17fd\u18ba\3\2\2\2\u17fe\u17ff"+
		"\7!\2\2\u17ff\u1800\7\u0441\2\2\u1800\u1801\5\u027a\u013e\2\u1801\u1802"+
		"\7\u0443\2\2\u1802\u1803\5\u0230\u0119\2\u1803\u1804\7\u0442\2\2\u1804"+
		"\u18ba\3\2\2\2\u1805\u1806\7!\2\2\u1806\u1807\7\u0441\2\2\u1807\u1808"+
		"\5\u027a\u013e\2\u1808\u1809\7\u00b3\2\2\u1809\u180a\5\u020a\u0106\2\u180a"+
		"\u180b\7\u0442\2\2\u180b\u18ba\3\2\2\2\u180c\u180d\7\30\2\2\u180d\u180e"+
		"\7\u0441\2\2\u180e\u180f\5\u027a\u013e\2\u180f\u1810\7\16\2\2\u1810\u1811"+
		"\5\u0230\u0119\2\u1811\u1812\7\u0442\2\2\u1812\u18ba\3\2\2\2\u1813\u1814"+
		"\7\u00b4\2\2\u1814\u1815\7\u0441\2\2\u1815\u1816\5\u0202\u0102\2\u1816"+
		"\u1817\7\u0442\2\2\u1817\u18ba\3\2\2\2\u1818\u1819\7\27\2\2\u1819\u181b"+
		"\5\u027a\u013e\2\u181a\u181c\5\u0256\u012c\2\u181b\u181a\3\2\2\2\u181c"+
		"\u181d\3\2\2\2\u181d\u181b\3\2\2\2\u181d\u181e\3\2\2\2\u181e\u1821\3\2"+
		"\2\2\u181f\u1820\7\65\2\2\u1820\u1822\5\u0278\u013d\2\u1821\u181f\3\2"+
		"\2\2\u1821\u1822\3\2\2\2\u1822\u1823\3\2\2\2\u1823\u1824\7\u0188\2\2\u1824"+
		"\u18ba\3\2\2\2\u1825\u1827\7\27\2\2\u1826\u1828\5\u0256\u012c\2\u1827"+
		"\u1826\3\2\2\2\u1828\u1829\3\2\2\2\u1829\u1827\3\2\2\2\u1829\u182a\3\2"+
		"\2\2\u182a\u182d\3\2\2\2\u182b\u182c\7\65\2\2\u182c\u182e\5\u0278\u013d"+
		"\2\u182d\u182b\3\2\2\2\u182d\u182e\3\2\2\2\u182e\u182f\3\2\2\2\u182f\u1830"+
		"\7\u0188\2\2\u1830\u18ba\3\2\2\2\u1831\u1832\7\u00d6\2\2\u1832\u1833\7"+
		"\u0441\2\2\u1833\u1836\5\u0276\u013c\2\u1834\u1835\7\u00b3\2\2\u1835\u1837"+
		"\5\u020a\u0106\2\u1836\u1834\3\2\2\2\u1836\u1837\3\2\2\2\u1837\u1838\3"+
		"\2\2\2\u1838\u1839\7\u0442\2\2\u1839\u18ba\3\2\2\2\u183a\u183b\7\u0139"+
		"\2\2\u183b\u183e\7\u0441\2\2\u183c\u183f\5\u0222\u0112\2\u183d\u183f\5"+
		"\u027a\u013e\2\u183e\u183c\3\2\2\2\u183e\u183d\3\2\2\2\u183f\u1840\3\2"+
		"\2\2\u1840\u1843\7N\2\2\u1841\u1844\5\u0222\u0112\2\u1842\u1844\5\u027a"+
		"\u013e\2\u1843\u1841\3\2\2\2\u1843\u1842\3\2\2\2\u1844\u1845\3\2\2\2\u1845"+
		"\u1846\7\u0442\2\2\u1846\u18ba\3\2\2\2\u1847\u1848\tp\2\2\u1848\u184b"+
		"\7\u0441\2\2\u1849\u184c\5\u0222\u0112\2\u184a\u184c\5\u027a\u013e\2\u184b"+
		"\u1849\3\2\2\2\u184b\u184a\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u1850\7C"+
		"\2\2\u184e\u1851\5\u021e\u0110\2\u184f\u1851\5\u027a\u013e\2\u1850\u184e"+
		"\3\2\2\2\u1850\u184f\3\2\2\2\u1851\u1857\3\2\2\2\u1852\u1855\7@\2\2\u1853"+
		"\u1856\5\u021e\u0110\2\u1854\u1856\5\u027a\u013e\2\u1855\u1853\3\2\2\2"+
		"\u1855\u1854\3\2\2\2\u1856\u1858\3\2\2\2\u1857\u1852\3\2\2\2\u1857\u1858"+
		"\3\2\2\2\u1858\u1859\3\2\2\2\u1859\u185a\7\u0442\2\2\u185a\u18ba\3\2\2"+
		"\2\u185b\u185c\7\u013d\2\2\u185c\u185d\7\u0441\2\2\u185d\u1860\tq\2\2"+
		"\u185e\u1861\5\u0222\u0112\2\u185f\u1861\5\u027a\u013e\2\u1860\u185e\3"+
		"\2\2\2\u1860\u185f\3\2\2\2\u1860\u1861\3\2\2\2\u1861\u1862\3\2\2\2\u1862"+
		"\u1865\7C\2\2\u1863\u1866\5\u0222\u0112\2\u1864\u1866\5\u027a\u013e\2"+
		"\u1865\u1863\3\2\2\2\u1865\u1864\3\2\2\2\u1866\u1867\3\2\2\2\u1867\u1868"+
		"\7\u0442\2\2\u1868\u18ba\3\2\2\2\u1869\u186a\7\u013d\2\2\u186a\u186d\7"+
		"\u0441\2\2\u186b\u186e\5\u0222\u0112\2\u186c\u186e\5\u027a\u013e\2\u186d"+
		"\u186b\3\2\2\2\u186d\u186c\3\2\2\2\u186e\u186f\3\2\2\2\u186f\u1872\7C"+
		"\2\2\u1870\u1873\5\u0222\u0112\2\u1871\u1873\5\u027a\u013e\2\u1872\u1870"+
		"\3\2\2\2\u1872\u1871\3\2\2\2\u1873\u1874\3\2\2\2\u1874\u1875\7\u0442\2"+
		"\2\u1875\u18ba\3\2\2\2\u1876\u1877\7\u0423\2\2\u1877\u187a\7\u0441\2\2"+
		"\u1878\u187b\5\u0222\u0112\2\u1879\u187b\5\u027a\u013e\2\u187a\u1878\3"+
		"\2\2\2\u187a\u1879\3\2\2\2\u187b\u1882\3\2\2\2\u187c\u187d\7\16\2\2\u187d"+
		"\u187e\tr\2\2\u187e\u187f\7\u0441\2\2\u187f\u1880\5\u021e\u0110\2\u1880"+
		"\u1881\7\u0442\2\2\u1881\u1883\3\2\2\2\u1882\u187c\3\2\2\2\u1882\u1883"+
		"\3\2\2\2\u1883\u1885\3\2\2\2\u1884\u1886\5\u0258\u012d\2\u1885\u1884\3"+
		"\2\2\2\u1885\u1886\3\2\2\2\u1886\u1887\3\2\2\2\u1887\u1888\7\u0442\2\2"+
		"\u1888\u18ba\3\2\2\2\u1889\u188a\7\u0136\2\2\u188a\u188b\7\u0441\2\2\u188b"+
		"\u188c\5> \2\u188c\u188f\7C\2\2\u188d\u1890\5\u0222\u0112\2\u188e\u1890"+
		"\5\u027a\u013e\2\u188f\u188d\3\2\2\2\u188f\u188e\3\2\2\2\u1890\u1891\3"+
		"\2\2\2\u1891\u1892\7\u0442\2\2\u1892\u18ba\3\2\2\2\u1893\u1894\7\u035b"+
		"\2\2\u1894\u1895\7\u0441\2\2\u1895\u1896\ts\2\2\u1896\u1897\7\u0443\2"+
		"\2\u1897\u1898\5\u0222\u0112\2\u1898\u1899\7\u0442\2\2\u1899\u18ba\3\2"+
		"\2\2\u189a\u189b\7\u00fc\2\2\u189b\u189c\7\u0441\2\2\u189c\u189d\5\u027a"+
		"\u013e\2\u189d\u189e\7\u0443\2\2\u189e\u18a1\5\u027a\u013e\2\u189f\u18a0"+
		"\7\u0234\2\2\u18a0\u18a2\5\u0230\u0119\2\u18a1\u189f\3\2\2\2\u18a1\u18a2"+
		"\3\2\2\2\u18a2\u18ab\3\2\2\2\u18a3\u18a8\7o\2\2\u18a4\u18a8\7\u018c\2"+
		"\2\u18a5\u18a6\7*\2\2\u18a6\u18a8\5\u0248\u0125\2\u18a7\u18a3\3\2\2\2"+
		"\u18a7\u18a4\3\2\2\2\u18a7\u18a5\3\2\2\2\u18a8\u18a9\3\2\2\2\u18a9\u18aa"+
		"\7q\2\2\u18aa\u18ac\7\67\2\2\u18ab\u18a7\3\2\2\2\u18ab\u18ac\3\2\2\2\u18ac"+
		"\u18b5\3\2\2\2\u18ad\u18b2\7o\2\2\u18ae\u18b2\7\u018c\2\2\u18af\u18b0"+
		"\7*\2\2\u18b0\u18b2\5\u0248\u0125\2\u18b1\u18ad\3\2\2\2\u18b1\u18ae\3"+
		"\2\2\2\u18b1\u18af\3\2\2\2\u18b2\u18b3\3\2\2\2\u18b3\u18b4\7q\2\2\u18b4"+
		"\u18b6\7\u018c\2\2\u18b5\u18b1\3\2\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18b7"+
		"\3\2\2\2\u18b7\u18b8\7\u0442\2\2\u18b8\u18ba\3\2\2\2\u18b9\u17f9\3\2\2"+
		"\2\u18b9\u17fe\3\2\2\2\u18b9\u1805\3\2\2\2\u18b9\u180c\3\2\2\2\u18b9\u1813"+
		"\3\2\2\2\u18b9\u1818\3\2\2\2\u18b9\u1825\3\2\2\2\u18b9\u1831\3\2\2\2\u18b9"+
		"\u183a\3\2\2\2\u18b9\u1847\3\2\2\2\u18b9\u185b\3\2\2\2\u18b9\u1869\3\2"+
		"\2\2\u18b9\u1876\3\2\2\2\u18b9\u1889\3\2\2\2\u18b9\u1893\3\2\2\2\u18b9"+
		"\u189a\3\2\2\2\u18ba\u0255\3\2\2\2\u18bb\u18bc\7\u00b5\2\2\u18bc\u18bd"+
		"\5\u0278\u013d\2\u18bd\u18be\7\u00a6\2\2\u18be\u18bf\5\u0278\u013d\2\u18bf"+
		"\u0257\3\2\2\2\u18c0\u18c1\7\u01c6\2\2\u18c1\u18c6\5\u025a\u012e\2\u18c2"+
		"\u18c3\7\u0443\2\2\u18c3\u18c5\5\u025a\u012e\2\u18c4\u18c2\3\2\2\2\u18c5"+
		"\u18c8\3\2\2\2\u18c6\u18c4\3\2\2\2\u18c6\u18c7\3\2\2\2\u18c7\u18cf\3\2"+
		"\2\2\u18c8\u18c6\3\2\2\2\u18c9\u18ca\7\u01c6\2\2\u18ca\u18cb\5\u021e\u0110"+
		"\2\u18cb\u18cc\7\u0435\2\2\u18cc\u18cd\5\u021e\u0110\2\u18cd\u18cf\3\2"+
		"\2\2\u18ce\u18c0\3\2\2\2\u18ce\u18c9\3\2\2\2\u18cf\u0259\3\2\2\2\u18d0"+
		"\u18d2\5\u021e\u0110\2\u18d1\u18d3\tt\2\2\u18d2\u18d1\3\2\2\2\u18d2\u18d3"+
		"\3\2\2\2\u18d3\u025b\3\2\2\2\u18d4\u18d5\tu\2\2\u18d5\u18d7\7\u0441\2"+
		"\2\u18d6\u18d8\t+\2\2\u18d7\u18d6\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18d9"+
		"\3\2\2\2\u18d9\u18da\5\u0278\u013d\2\u18da\u18dc\7\u0442\2\2\u18db\u18dd"+
		"\5\u0260\u0131\2\u18dc\u18db\3\2\2\2\u18dc\u18dd\3\2\2\2\u18dd\u1910\3"+
		"\2\2\2\u18de\u18df\7\u0117\2\2\u18df\u18e7\7\u0441\2\2\u18e0\u18e8\7\u0431"+
		"\2\2\u18e1\u18e3\7\b\2\2\u18e2\u18e1\3\2\2\2\u18e2\u18e3\3\2\2\2\u18e3"+
		"\u18e4\3\2\2\2\u18e4\u18e8\5\u0278\u013d\2\u18e5\u18e6\7\61\2\2\u18e6"+
		"\u18e8\5\u0276\u013c\2\u18e7\u18e0\3\2\2\2\u18e7\u18e2\3\2\2\2\u18e7\u18e5"+
		"\3\2\2\2\u18e8\u18e9\3\2\2\2\u18e9\u18eb\7\u0442\2\2\u18ea\u18ec\5\u0260"+
		"\u0131\2\u18eb\u18ea\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u1910\3\2\2\2\u18ed"+
		"\u18ee\tv\2\2\u18ee\u18f0\7\u0441\2\2\u18ef\u18f1\7\b\2\2\u18f0\u18ef"+
		"\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2\u18f3\5\u0278\u013d"+
		"\2\u18f3\u18f5\7\u0442\2\2\u18f4\u18f6\5\u0260\u0131\2\u18f5\u18f4\3\2"+
		"\2\2\u18f5\u18f6\3\2\2\2\u18f6\u1910\3\2\2\2\u18f7\u18f8\7\u011b\2\2\u18f8"+
		"\u18fa\7\u0441\2\2\u18f9\u18fb\7\61\2\2\u18fa\u18f9\3\2\2\2\u18fa\u18fb"+
		"\3\2\2\2\u18fb\u18fc\3\2\2\2\u18fc\u1907\5\u0276\u013c\2\u18fd\u18fe\7"+
		"w\2\2\u18fe\u18ff\7\24\2\2\u18ff\u1904\5\u00d6l\2\u1900\u1901\7\u0443"+
		"\2\2\u1901\u1903\5\u00d6l\2\u1902\u1900\3\2\2\2\u1903\u1906\3\2\2\2\u1904"+
		"\u1902\3\2\2\2\u1904\u1905\3\2\2\2\u1905\u1908\3\2\2\2\u1906\u1904\3\2"+
		"\2\2\u1907\u18fd\3\2\2\2\u1907\u1908\3\2\2\2\u1908\u190b\3\2\2\2\u1909"+
		"\u190a\7\u0095\2\2\u190a\u190c\7\u0450\2\2\u190b\u1909\3\2\2\2\u190b\u190c"+
		"\3\2\2\2\u190c\u190d\3\2\2\2\u190d\u190e\7\u0442\2\2\u190e\u1910\3\2\2"+
		"\2\u190f\u18d4\3\2\2\2\u190f\u18de\3\2\2\2\u190f\u18ed\3\2\2\2\u190f\u18f7"+
		"\3\2\2\2\u1910\u025d\3\2\2\2\u1911\u1912\tw\2\2\u1912\u1913\7\u0441\2"+
		"\2\u1913\u1916\5\u027a\u013e\2\u1914\u1915\7\u0443\2\2\u1915\u1917\5\u021e"+
		"\u0110\2\u1916\u1914\3\2\2\2\u1916\u1917\3\2\2\2\u1917\u191a\3\2\2\2\u1918"+
		"\u1919\7\u0443\2\2\u1919\u191b\5\u021e\u0110\2\u191a\u1918\3\2\2\2\u191a"+
		"\u191b\3\2\2\2\u191b\u191c\3\2\2\2\u191c\u191d\7\u0442\2\2\u191d\u191e"+
		"\5\u0260\u0131\2\u191e\u1938\3\2\2\2\u191f\u1920\tx\2\2\u1920\u1921\7"+
		"\u0441\2\2\u1921\u1922\5\u027a\u013e\2\u1922\u1923\7\u0442\2\2\u1923\u1924"+
		"\5\u0260\u0131\2\u1924\u1938\3\2\2\2\u1925\u1926\ty\2\2\u1926\u1927\7"+
		"\u0441\2\2\u1927\u1928\7\u0442\2\2\u1928\u1938\5\u0260\u0131\2\u1929\u192a"+
		"\7\u0122\2\2\u192a\u192b\7\u0441\2\2\u192b\u192c\5\u027a\u013e\2\u192c"+
		"\u192d\7\u0443\2\2\u192d\u192e\5\u021e\u0110\2\u192e\u192f\7\u0442\2\2"+
		"\u192f\u1930\5\u0260\u0131\2\u1930\u1938\3\2\2\2\u1931\u1932\7\u0121\2"+
		"\2\u1932\u1933\7\u0441\2\2\u1933\u1934\5\u021e\u0110\2\u1934\u1935\7\u0442"+
		"\2\2\u1935\u1936\5\u0260\u0131\2\u1936\u1938\3\2\2\2\u1937\u1911\3\2\2"+
		"\2\u1937\u191f\3\2\2\2\u1937\u1925\3\2\2\2\u1937\u1929\3\2\2\2\u1937\u1931"+
		"\3\2\2\2\u1938\u025f\3\2\2\2\u1939\u1940\7y\2\2\u193a\u193c\7\u0441\2"+
		"\2\u193b\u193d\5\u0262\u0132\2\u193c\u193b\3\2\2\2\u193c\u193d\3\2\2\2"+
		"\u193d\u193e\3\2\2\2\u193e\u1941\7\u0442\2\2\u193f\u1941\5\u0264\u0133"+
		"\2\u1940\u193a\3\2\2\2\u1940\u193f\3\2\2\2\u1941\u0261\3\2\2\2\u1942\u1944"+
		"\5\u0264\u0133\2\u1943\u1942\3\2\2\2\u1943\u1944\3\2\2\2\u1944\u1946\3"+
		"\2\2\2\u1945\u1947\5\u0270\u0139\2\u1946\u1945\3\2\2\2\u1946\u1947\3\2"+
		"\2\2\u1947\u1949\3\2\2\2\u1948\u194a\5\u00d4k\2\u1949\u1948\3\2\2\2\u1949"+
		"\u194a\3\2\2\2\u194a\u194c\3\2\2\2\u194b\u194d\5\u0266\u0134\2\u194c\u194b"+
		"\3\2\2\2\u194c\u194d\3\2\2\2\u194d\u0263\3\2\2\2\u194e\u194f\5\u0218\u010d"+
		"\2\u194f\u0265\3\2\2\2\u1950\u1951\5\u0268\u0135\2\u1951\u1952\5\u026a"+
		"\u0136\2\u1952\u0267\3\2\2\2\u1953\u1954\tz\2\2\u1954\u0269\3\2\2\2\u1955"+
		"\u1958\5\u026e\u0138\2\u1956\u1958\5\u026c\u0137\2\u1957\u1955\3\2\2\2"+
		"\u1957\u1956\3\2\2\2\u1958\u026b\3\2\2\2\u1959\u195a\7\21\2\2\u195a\u195b"+
		"\5\u026e\u0138\2\u195b\u195c\7\f\2\2\u195c\u195d\5\u026e\u0138\2\u195d"+
		"\u026d\3\2\2\2\u195e\u195f\7$\2\2\u195f\u1966\7\u023a\2\2\u1960\u1961"+
		"\7\u0271\2\2\u1961\u1966\t{\2\2\u1962\u1963\5\u027a\u013e\2\u1963\u1964"+
		"\t{\2\2\u1964\u1966\3\2\2\2\u1965\u195e\3\2\2\2\u1965\u1960\3\2\2\2\u1965"+
		"\u1962\3\2\2\2\u1966\u026f\3\2\2\2\u1967\u1968\7|\2\2\u1968\u1969\7\24"+
		"\2\2\u1969\u196e\5\u027a\u013e\2\u196a\u196b\7\u0443\2\2\u196b\u196d\5"+
		"\u027a\u013e\2\u196c\u196a\3\2\2\2\u196d\u1970\3\2\2\2\u196e\u196c\3\2"+
		"\2\2\u196e\u196f\3\2\2\2\u196f\u0271\3\2\2\2\u1970\u196e\3\2\2\2\u1971"+
		"\u1989\5\u0298\u014d\2\u1972\u1989\7\u02c3\2\2\u1973\u1989\7\u0132\2\2"+
		"\u1974\u1989\7\u012e\2\2\u1975\u1989\7\u012f\2\2\u1976\u1989\7\u0130\2"+
		"\2\u1977\u1989\7\u0133\2\2\u1978\u1989\7\u0134\2\2\u1979\u1989\7\u0135"+
		"\2\2\u197a\u1989\7L\2\2\u197b\u1989\7S\2\2\u197c\u1989\7\u0131\2\2\u197d"+
		"\u1989\7\u0137\2\2\u197e\u1989\7\u01ea\2\2\u197f\u1989\7\u0138\2\2\u1980"+
		"\u1989\7\u0088\2\2\u1981\u1989\7\u013a\2\2\u1982\u1989\7\u013b\2\2\u1983"+
		"\u1989\7\u013c\2\2\u1984\u1989\7\u013d\2\2\u1985\u1989\7\u013e\2\2\u1986"+
		"\u1989\7\u013f\2\2\u1987\u1989\7\u0140\2\2\u1988\u1971\3\2\2\2\u1988\u1972"+
		"\3\2\2\2\u1988\u1973\3\2\2\2\u1988\u1974\3\2\2\2\u1988\u1975\3\2\2\2\u1988"+
		"\u1976\3\2\2\2\u1988\u1977\3\2\2\2\u1988\u1978\3\2\2\2\u1988\u1979\3\2"+
		"\2\2\u1988\u197a\3\2\2\2\u1988\u197b\3\2\2\2\u1988\u197c\3\2\2\2\u1988"+
		"\u197d\3\2\2\2\u1988\u197e\3\2\2\2\u1988\u197f\3\2\2\2\u1988\u1980\3\2"+
		"\2\2\u1988\u1981\3\2\2\2\u1988\u1982\3\2\2\2\u1988\u1983\3\2\2\2\u1988"+
		"\u1984\3\2\2\2\u1988\u1985\3\2\2\2\u1988\u1986\3\2\2\2\u1988\u1987\3\2"+
		"\2\2\u1989\u0273\3\2\2\2\u198a\u198b\t|\2\2\u198b\u198c\7\u0441\2\2\u198c"+
		"\u198d\5\u0278\u013d\2\u198d\u198e\7\u0442\2\2\u198e\u0275\3\2\2\2\u198f"+
		"\u1994\5\u022a\u0116\2\u1990\u1994\5\u0202\u0102\2\u1991\u1994\5\u0252"+
		"\u012a\2\u1992\u1994\5\u027a\u013e\2\u1993\u198f\3\2\2\2\u1993\u1990\3"+
		"\2\2\2\u1993\u1991\3\2\2\2\u1993\u1992\3\2\2\2\u1994\u199e\3\2\2\2\u1995"+
		"\u199a\7\u0443\2\2\u1996\u199b\5\u022a\u0116\2\u1997\u199b\5\u0202\u0102"+
		"\2\u1998\u199b\5\u0252\u012a\2\u1999\u199b\5\u027a\u013e\2\u199a\u1996"+
		"\3\2\2\2\u199a\u1997\3\2\2\2\u199a\u1998\3\2\2\2\u199a\u1999\3\2\2\2\u199b"+
		"\u199d\3\2\2\2\u199c\u1995\3\2\2\2\u199d\u19a0\3\2\2\2\u199e\u199c\3\2"+
		"\2\2\u199e\u199f\3\2\2\2\u199f\u0277\3\2\2\2\u19a0\u199e\3\2\2\2\u19a1"+
		"\u19a6\5\u022a\u0116\2\u19a2\u19a6\5\u0202\u0102\2\u19a3\u19a6\5\u0252"+
		"\u012a\2\u19a4\u19a6\5\u027a\u013e\2\u19a5\u19a1\3\2\2\2\u19a5\u19a2\3"+
		"\2\2\2\u19a5\u19a3\3\2\2\2\u19a5\u19a4\3\2\2\2\u19a6\u0279\3\2\2\2\u19a7"+
		"\u19a8\b\u013e\1\2\u19a8\u19a9\t}\2\2\u19a9\u19b3\5\u027a\u013e\6\u19aa"+
		"\u19ab\5\u027c\u013f\2\u19ab\u19ad\7V\2\2\u19ac\u19ae\7m\2\2\u19ad\u19ac"+
		"\3\2\2\2\u19ad\u19ae\3\2\2\2\u19ae\u19af\3\2\2\2\u19af\u19b0\t~\2\2\u19b0"+
		"\u19b3\3\2\2\2\u19b1\u19b3\5\u027c\u013f\2\u19b2\u19a7\3\2\2\2\u19b2\u19aa"+
		"\3\2\2\2\u19b2\u19b1\3\2\2\2\u19b3\u19ba\3\2\2\2\u19b4\u19b5\f\5\2\2\u19b5"+
		"\u19b6\5\u0284\u0143\2\u19b6\u19b7\5\u027a\u013e\6\u19b7\u19b9\3\2\2\2"+
		"\u19b8\u19b4\3\2\2\2\u19b9\u19bc\3\2\2\2\u19ba\u19b8\3\2\2\2\u19ba\u19bb"+
		"\3\2\2\2\u19bb\u027b\3\2\2\2\u19bc\u19ba\3\2\2\2\u19bd\u19c0\b\u013f\1"+
		"\2\u19be\u19bf\7\u045c\2\2\u19bf\u19c1\7\u0428\2\2\u19c0\u19be\3\2\2\2"+
		"\u19c0\u19c1\3\2\2\2\u19c1\u19c2\3\2\2\2\u19c2\u19c3\5\u027e\u0140\2\u19c3"+
		"\u1a04\3\2\2\2\u19c4\u19c5\f\n\2\2\u19c5\u19c6\5\u0282\u0142\2\u19c6\u19c7"+
		"\5\u027c\u013f\13\u19c7\u1a03\3\2\2\2\u19c8\u19ca\f\b\2\2\u19c9\u19cb"+
		"\7m\2\2\u19ca\u19c9\3\2\2\2\u19ca\u19cb\3\2\2\2\u19cb\u19cc\3\2\2\2\u19cc"+
		"\u19cd\7\21\2\2\u19cd\u19ce\5\u027c\u013f\2\u19ce\u19cf\7\f\2\2\u19cf"+
		"\u19d0\5\u027c\u013f\t\u19d0\u1a03\3\2\2\2\u19d1\u19d2\f\7\2\2\u19d2\u19d3"+
		"\7\u024c\2\2\u19d3\u19d4\7_\2\2\u19d4\u1a03\5\u027c\u013f\b\u19d5\u19d7"+
		"\f\5\2\2\u19d6\u19d8\7m\2\2\u19d7\u19d6\3\2\2\2\u19d7\u19d8\3\2\2\2\u19d8"+
		"\u19d9\3\2\2\2\u19d9\u19da\t\177\2\2\u19da\u1a03\5\u027c\u013f\6\u19db"+
		"\u19dd\f\f\2\2\u19dc\u19de\7m\2\2\u19dd\u19dc\3\2\2\2\u19dd\u19de\3\2"+
		"\2\2\u19de\u19df\3\2\2\2\u19df\u19e0\7N\2\2\u19e0\u19e3\7\u0441\2\2\u19e1"+
		"\u19e4\5\u00b8]\2\u19e2\u19e4\5\u023e\u0120\2\u19e3\u19e1\3\2\2\2\u19e3"+
		"\u19e2\3\2\2\2\u19e4\u19e5\3\2\2\2\u19e5\u19e6\7\u0442\2\2\u19e6\u1a03"+
		"\3\2\2\2\u19e7\u19e8\f\13\2\2\u19e8\u19e9\7V\2\2\u19e9\u1a03\5\u0228\u0115"+
		"\2\u19ea\u19eb\f\t\2\2\u19eb\u19ec\5\u0282\u0142\2\u19ec\u19ed\t\u0080"+
		"\2\2\u19ed\u19ee\7\u0441\2\2\u19ee\u19ef\5\u00b8]\2\u19ef\u19f0\7\u0442"+
		"\2\2\u19f0\u1a03\3\2\2\2\u19f1\u19f3\f\6\2\2\u19f2\u19f4\7m\2\2\u19f3"+
		"\u19f2\3\2\2\2\u19f3\u19f4\3\2\2\2\u19f4\u19f5\3\2\2\2\u19f5\u19f6\7_"+
		"\2\2\u19f6\u19f9\5\u027c\u013f\2\u19f7\u19f8\7\u018e\2\2\u19f8\u19fa\7"+
		"\u0450\2\2\u19f9\u19f7\3\2\2\2\u19f9\u19fa\3\2\2\2\u19fa\u1a03\3\2\2\2"+
		"\u19fb\u19fc\f\3\2\2\u19fc\u19fd\7\u01e7\2\2\u19fd\u19fe\7\u01fd\2\2\u19fe"+
		"\u19ff\7\u0441\2\2\u19ff\u1a00\5\u027c\u013f\2\u1a00\u1a01\7\u0442\2\2"+
		"\u1a01\u1a03\3\2\2\2\u1a02\u19c4\3\2\2\2\u1a02\u19c8\3\2\2\2\u1a02\u19d1"+
		"\3\2\2\2\u1a02\u19d5\3\2\2\2\u1a02\u19db\3\2\2\2\u1a02\u19e7\3\2\2\2\u1a02"+
		"\u19ea\3\2\2\2\u1a02\u19f1\3\2\2\2\u1a02\u19fb\3\2\2\2\u1a03\u1a06\3\2"+
		"\2\2\u1a04\u1a02\3\2\2\2\u1a04\u1a05\3\2\2\2\u1a05\u027d\3\2\2\2\u1a06"+
		"\u1a04\3\2\2\2\u1a07\u1a08\b\u0140\1\2\u1a08\u1a35\5\u022a\u0116\2\u1a09"+
		"\u1a35\5\u0202\u0102\2\u1a0a\u1a35\5\u0252\u012a\2\u1a0b\u1a35\5\u0208"+
		"\u0105\2\u1a0c\u1a0d\5\u0280\u0141\2\u1a0d\u1a0e\5\u027e\u0140\f\u1a0e"+
		"\u1a35\3\2\2\2\u1a0f\u1a10\7\u00da\2\2\u1a10\u1a35\5\u027e\u0140\13\u1a11"+
		"\u1a12\7\u0441\2\2\u1a12\u1a17\5\u027a\u013e\2\u1a13\u1a14\7\u0443\2\2"+
		"\u1a14\u1a16\5\u027a\u013e\2\u1a15\u1a13\3\2\2\2\u1a16\u1a19\3\2\2\2\u1a17"+
		"\u1a15\3\2\2\2\u1a17\u1a18\3\2\2\2\u1a18\u1a1a\3\2\2\2\u1a19\u1a17\3\2"+
		"\2\2\u1a1a\u1a1b\7\u0442\2\2\u1a1b\u1a35\3\2\2\2\u1a1c\u1a1d\7\u023a\2"+
		"\2\u1a1d\u1a1e\7\u0441\2\2\u1a1e\u1a21\5\u027a\u013e\2\u1a1f\u1a20\7\u0443"+
		"\2\2\u1a20\u1a22\5\u027a\u013e\2\u1a21\u1a1f\3\2\2\2\u1a22\u1a23\3\2\2"+
		"\2\u1a23\u1a21\3\2\2\2\u1a23\u1a24\3\2\2\2\u1a24\u1a25\3\2\2\2\u1a25\u1a26"+
		"\7\u0442\2\2\u1a26\u1a35\3\2\2\2\u1a27\u1a28\7;\2\2\u1a28\u1a29\7\u0441"+
		"\2\2\u1a29\u1a2a\5\u00b8]\2\u1a2a\u1a2b\7\u0442\2\2\u1a2b\u1a35\3\2\2"+
		"\2\u1a2c\u1a2d\7\u0441\2\2\u1a2d\u1a2e\5\u00b8]\2\u1a2e\u1a2f\7\u0442"+
		"\2\2\u1a2f\u1a35\3\2\2\2\u1a30\u1a31\7T\2\2\u1a31\u1a32\5\u027a\u013e"+
		"\2\u1a32\u1a33\5> \2\u1a33\u1a35\3\2\2\2\u1a34\u1a07\3\2\2\2\u1a34\u1a09"+
		"\3\2\2\2\u1a34\u1a0a\3\2\2\2\u1a34\u1a0b\3\2\2\2\u1a34\u1a0c\3\2\2\2\u1a34"+
		"\u1a0f\3\2\2\2\u1a34\u1a11\3\2\2\2\u1a34\u1a1c\3\2\2\2\u1a34\u1a27\3\2"+
		"\2\2\u1a34\u1a2c\3\2\2\2\u1a34\u1a30\3\2\2\2\u1a35\u1a47\3\2\2\2\u1a36"+
		"\u1a37\f\5\2\2\u1a37\u1a38\5\u0286\u0144\2\u1a38\u1a39\5\u027e\u0140\6"+
		"\u1a39\u1a46\3\2\2\2\u1a3a\u1a3b\f\4\2\2\u1a3b\u1a3c\5\u0288\u0145\2\u1a3c"+
		"\u1a3d\5\u027e\u0140\5\u1a3d\u1a46\3\2\2\2\u1a3e\u1a3f\f\3\2\2\u1a3f\u1a40"+
		"\5\u028a\u0146\2\u1a40\u1a41\5\u027e\u0140\4\u1a41\u1a46\3\2\2\2\u1a42"+
		"\u1a43\f\16\2\2\u1a43\u1a44\7\34\2\2\u1a44\u1a46\5\u020c\u0107\2\u1a45"+
		"\u1a36\3\2\2\2\u1a45\u1a3a\3\2\2\2\u1a45\u1a3e\3\2\2\2\u1a45\u1a42\3\2"+
		"\2\2\u1a46\u1a49\3\2\2\2\u1a47\u1a45\3\2\2\2\u1a47\u1a48\3\2\2\2\u1a48"+
		"\u027f\3\2\2\2\u1a49\u1a47\3\2\2\2\u1a4a\u1a4b\t\u0081\2\2\u1a4b\u0281"+
		"\3\2\2\2\u1a4c\u1a5b\7\u0438\2\2\u1a4d\u1a5b\7\u0439\2\2\u1a4e\u1a5b\7"+
		"\u043a\2\2\u1a4f\u1a50\7\u043a\2\2\u1a50\u1a5b\7\u0438\2\2\u1a51\u1a52"+
		"\7\u0439\2\2\u1a52\u1a5b\7\u0438\2\2\u1a53\u1a54\7\u043a\2\2\u1a54\u1a5b"+
		"\7\u0439\2\2\u1a55\u1a56\7\u043b\2\2\u1a56\u1a5b\7\u0438\2\2\u1a57\u1a58"+
		"\7\u043a\2\2\u1a58\u1a59\7\u0438\2\2\u1a59\u1a5b\7\u0439\2\2\u1a5a\u1a4c"+
		"\3\2\2\2\u1a5a\u1a4d\3\2\2\2\u1a5a\u1a4e\3\2\2\2\u1a5a\u1a4f\3\2\2\2\u1a5a"+
		"\u1a51\3\2\2\2\u1a5a\u1a53\3\2\2\2\u1a5a\u1a55\3\2\2\2\u1a5a\u1a57\3\2"+
		"\2\2\u1a5b\u0283\3\2\2\2\u1a5c\u1a64\7\f\2\2\u1a5d\u1a5e\7\u043e\2\2\u1a5e"+
		"\u1a64\7\u043e\2\2\u1a5f\u1a64\7\u00ba\2\2\u1a60\u1a64\7v\2\2\u1a61\u1a62"+
		"\7\u043d\2\2\u1a62\u1a64\7\u043d\2\2\u1a63\u1a5c\3\2\2\2\u1a63\u1a5d\3"+
		"\2\2\2\u1a63\u1a5f\3\2\2\2\u1a63\u1a60\3\2\2\2\u1a63\u1a61\3\2\2\2\u1a64"+
		"\u0285\3\2\2\2\u1a65\u1a66\7\u043a\2\2\u1a66\u1a6d\7\u043a\2\2\u1a67\u1a68"+
		"\7\u0439\2\2\u1a68\u1a6d\7\u0439\2\2\u1a69\u1a6d\7\u043e\2\2\u1a6a\u1a6d"+
		"\7\u043f\2\2\u1a6b\u1a6d\7\u043d\2\2\u1a6c\u1a65\3\2\2\2\u1a6c\u1a67\3"+
		"\2\2\2\u1a6c\u1a69\3\2\2\2\u1a6c\u1a6a\3\2\2\2\u1a6c\u1a6b\3\2\2\2\u1a6d"+
		"\u0287\3\2\2\2\u1a6e\u1a6f\t\u0082\2\2\u1a6f\u0289\3\2\2\2\u1a70\u1a71"+
		"\7\u0435\2\2\u1a71\u1a76\7\u0439\2\2\u1a72\u1a73\7\u0435\2\2\u1a73\u1a74"+
		"\7\u0439\2\2\u1a74\u1a76\7\u0439\2\2\u1a75\u1a70\3\2\2\2\u1a75\u1a72\3"+
		"\2\2\2\u1a76\u028b\3\2\2\2\u1a77\u1a78\t\u0083\2\2\u1a78\u028d\3\2\2\2"+
		"\u1a79\u1a7a\t\u0084\2\2\u1a7a\u028f\3\2\2\2\u1a7b\u1a7c\t\u0085\2\2\u1a7c"+
		"\u0291\3\2\2\2\u1a7d\u1a7e\t\u0086\2\2\u1a7e\u0293\3\2\2\2\u1a7f\u1a80"+
		"\t\u0087\2\2\u1a80\u0295\3\2\2\2\u1a81\u1a82\t\u0088\2\2\u1a82\u0297\3"+
		"\2\2\2\u1a83\u1a84\t\u0089\2\2\u1a84\u0299\3\2\2\2\u03d7\u029b\u029f\u02a6"+
		"\u02a9\u02ac\u02ae\u02b4\u02b7\u02ba\u02c3\u02ea\u02f6\u0301\u0312\u0317"+
		"\u0323\u033e\u0347\u034c\u0352\u0357\u035b\u0364\u0367\u036a\u036e\u0375"+
		"\u0378\u037d\u0385\u038a\u038f\u0392\u0394\u03a0\u03a3\u03a7\u03aa\u03ae"+
		"\u03b1\u03b5\u03b8\u03bb\u03bf\u03c2\u03c6\u03cc\u03d2\u03d8\u03df\u03e6"+
		"\u03ec\u03f2\u03fb\u0400\u0410\u0417\u041b\u0425\u0429\u042d\u0431\u0435"+
		"\u043a\u043d\u0440\u0443\u0446\u044c\u0450\u0456\u045b\u045e\u0461\u0463"+
		"\u046e\u0472\u0475\u0483\u0486\u048a\u048d\u0491\u0494\u0498\u049b\u049f"+
		"\u04a2\u04a5\u04a9\u04ac\u04b0\u04b6\u04c3\u04ca\u04cf\u04d2\u04d7\u04df"+
		"\u04e5\u04e9\u04ec\u04f0\u04f4\u04f7\u04fb\u04fe\u0505\u050d\u050f\u0516"+
		"\u051c\u0524\u0527\u052e\u0531\u0533\u0539\u053f\u0550\u0557\u055e\u0569"+
		"\u056c\u0579\u0586\u058b\u059b\u05a3\u05ad\u05b3\u05bf\u05c2\u05c7\u05d4"+
		"\u05db\u05e2\u05e4\u05eb\u05ef\u05f1\u05f6\u05f9\u05ff\u0604\u0606\u060a"+
		"\u060d\u0610\u0616\u061b\u061d\u0622\u0629\u062b\u0632\u0637\u063b\u063e"+
		"\u0646\u064e\u0650\u0658\u065c\u065f\u0665\u066a\u066d\u0673\u0676\u067a"+
		"\u067d\u0681\u0686\u068a\u068e\u0692\u0696\u069a\u069e\u06a3\u06a8\u06ad"+
		"\u06b3\u06b8\u06bd\u06c3\u06c8\u06cd\u06d2\u06d7\u06dc\u06e1\u06e6\u06eb"+
		"\u06f0\u06f5\u06fb\u0703\u0709\u0715\u071c\u071e\u0726\u072b\u072e\u0736"+
		"\u073c\u074c\u0758\u075a\u075d\u0765\u076b\u0771\u077e\u0785\u078e\u0793"+
		"\u079e\u07a7\u07ac\u07b8\u07bf\u07c8\u07cd\u07d9\u07e0\u07e9\u07ee\u07f5"+
		"\u07fe\u0803\u0805\u080a\u0812\u081b\u081f\u0822\u0826\u082b\u0831\u0837"+
		"\u083c\u0841\u0846\u084b\u084e\u0853\u0858\u0862\u0866\u086d\u0872\u0875"+
		"\u087a\u087d\u0881\u0885\u088d\u08a0\u08a3\u08a6\u08aa\u08b4\u08c1\u08c8"+
		"\u08cb\u08d4\u08d7\u08da\u08e5\u08e8\u08ec\u08f4\u08f7\u08fc\u0904\u090a"+
		"\u090e\u0912\u0917\u091c\u0923\u0927\u0932\u093a\u093d\u0943\u0949\u094b"+
		"\u0950\u0953\u0959\u095f\u0961\u0965\u0968\u096b\u0971\u0977\u097a\u0980"+
		"\u0986\u0988\u098d\u0995\u0997\u09a0\u09a5\u09ad\u09b1\u09b9\u09c3\u09c8"+
		"\u09cf\u09d3\u09d7\u09f7\u09fb\u0a07\u0a0a\u0a13\u0a24\u0a30\u0a37\u0a3e"+
		"\u0a4d\u0a5a\u0a60\u0a66\u0a6c\u0a72\u0a78\u0a7e\u0a83\u0a8a\u0a91\u0a98"+
		"\u0a9d\u0aa0\u0aa2\u0ab0\u0ab7\u0abe\u0ac4\u0ac8\u0acc\u0ad3\u0ad6\u0adb"+
		"\u0ae2\u0ae9\u0aed\u0af6\u0aff\u0b08\u0b0b\u0b0f\u0b18\u0b1c\u0b1f\u0b22"+
		"\u0b28\u0b2b\u0b31\u0b3a\u0b3d\u0b48\u0b4b\u0b50\u0b53\u0b58\u0b62\u0b67"+
		"\u0b6d\u0b6f\u0b75\u0b77\u0b7d\u0b85\u0b8a\u0b92\u0b95\u0b9a\u0b9d\u0ba2"+
		"\u0baa\u0bb2\u0bb8\u0bc0\u0bc5\u0bcd\u0bd0\u0bd4\u0bd7\u0bdf\u0be5\u0bee"+
		"\u0bf1\u0bf5\u0bf9\u0bff\u0c03\u0c07\u0c09\u0c0c\u0c0f\u0c12\u0c18\u0c1c"+
		"\u0c1f\u0c22\u0c25\u0c28\u0c2a\u0c2e\u0c34\u0c3a\u0c3f\u0c42\u0c48\u0c4c"+
		"\u0c54\u0c58\u0c5b\u0c5e\u0c67\u0c6b\u0c6e\u0c72\u0c76\u0c79\u0c7c\u0c81"+
		"\u0c87\u0c8b\u0c95\u0c9b\u0c9f\u0ca5\u0ca9\u0caf\u0cb2\u0cbe\u0cc2\u0cc6"+
		"\u0cce\u0cd2\u0cda\u0cdd\u0ce1\u0ce4\u0cec\u0cf1\u0cf4\u0cf7\u0cfb\u0cfe"+
		"\u0d07\u0d0c\u0d15\u0d1a\u0d21\u0d28\u0d30\u0d35\u0d3d\u0d40\u0d43\u0d4a"+
		"\u0d4d\u0d54\u0d57\u0d5f\u0d65\u0d70\u0d73\u0d7e\u0d84\u0d88\u0d93\u0d98"+
		"\u0d9a\u0d9e\u0da8\u0db2\u0db8\u0dbd\u0dc0\u0dc3\u0dc6\u0dc9\u0dcc\u0dcf"+
		"\u0dd5\u0dda\u0ddd\u0de0\u0de3\u0de6\u0de9\u0dec\u0dee\u0df4\u0df9\u0dfc"+
		"\u0dff\u0e02\u0e05\u0e08\u0e0c\u0e12\u0e16\u0e20\u0e24\u0e2a\u0e33\u0e36"+
		"\u0e3a\u0e3d\u0e41\u0e45\u0e48\u0e4a\u0e52\u0e5e\u0e64\u0e66\u0e6c\u0e6e"+
		"\u0e70\u0e76\u0e7e\u0e86\u0e8a\u0e8e\u0e97\u0e9c\u0eb0\u0eb5\u0ebb\u0ec2"+
		"\u0ec7\u0ed0\u0ed3\u0ed7\u0edb\u0edf\u0ee2\u0ee5\u0ee8\u0eec\u0ef0\u0ef3"+
		"\u0ef6\u0ef9\u0f00\u0f04\u0f13\u0f20\u0f28\u0f32\u0f36\u0f39\u0f3f\u0f42"+
		"\u0f45\u0f4e\u0f57\u0f61\u0f65\u0f6f\u0f79\u0f81\u0f84\u0f8d\u0f90\u0f94"+
		"\u0f99\u0f9d\u0fa6\u0fa9\u0fc8\u0fcb\u0fce\u1006\u100b\u1027\u1035\u103c"+
		"\u1040\u1046\u104e\u1050\u105b\u1065\u106c\u1072\u107a\u107f\u1087\u108f"+
		"\u1097\u109f\u10a5\u10a8\u10ac\u10b1\u10b6\u10bc\u10be\u10c9\u10ce\u10d5"+
		"\u10d7\u10e5\u10eb\u10f0\u10f5\u10fb\u1102\u110a\u1112\u1117\u111d\u1120"+
		"\u1128\u112f\u1138\u113b\u114c\u1154\u115c\u1160\u1167\u116d\u1175\u117e"+
		"\u1184\u118b\u1192\u1197\u119a\u119c\u11a2\u11a4\u11a8\u11aa\u11ad\u11b6"+
		"\u11bc\u11c3\u11ca\u11cf\u11d2\u11d4\u11da\u11dc\u11e0\u11e2\u11e5\u11ea"+
		"\u11f1\u11fa\u11ff\u1208\u120f\u1214\u1217\u1219\u121f\u1221\u1224\u122c"+
		"\u1231\u1236\u123a\u1240\u1245\u1249\u124f\u1251\u125c\u125f\u1266\u1269"+
		"\u1275\u127b\u1284\u128d\u1292\u129b\u12a1\u12ac\u12b5\u12bb\u12c0\u12c4"+
		"\u12c7\u12d3\u12da\u12df\u12ee\u12f5\u12fd\u1300\u130a\u1314\u131e\u1328"+
		"\u132c\u1330\u133a\u133f\u1379\u138b\u1393\u139f\u13a6\u13a8\u13b2\u13b5"+
		"\u13bd\u13c4\u13c8\u13cf\u13d4\u13d7\u13da\u13e3\u13e7\u1405\u140c\u1413"+
		"\u1416\u1426\u1429\u1433\u1437\u143d\u1440\u1445\u1449\u1450\u1453\u1459"+
		"\u1471\u1474\u1480\u1483\u148d\u1495\u1499\u14a0\u14a3\u14ac\u14b2\u14b8"+
		"\u14c2\u14c4\u14ca\u14cd\u14d0\u14dc\u14df\u14e5\u14e8\u14f0\u14f8\u14fe"+
		"\u1502\u1510\u151c\u1523\u1526\u152d\u1534\u1539\u153e\u1549\u1554\u155a"+
		"\u155f\u156c\u156e\u1573\u1577\u157a\u157c\u1583\u158a\u158d\u1590\u1596"+
		"\u159a\u15a0\u15a6\u15b3\u15b8\u15c0\u15c3\u15c8\u15cd\u15d5\u15d8\u15e0"+
		"\u15e4\u15f1\u15f7\u1603\u1606\u160f\u1614\u161a\u1621\u1623\u1628\u162a"+
		"\u162e\u1634\u1637\u163a\u1644\u1648\u165c\u1663\u1665\u166c\u166e\u1672"+
		"\u1677\u1682\u1687\u168d\u1690\u1694\u1699\u169c\u16a0\u16a4\u16a6\u16ab"+
		"\u16b0\u16bd\u16c0\u16c4\u16c7\u16ca\u16cf\u16d4\u16d9\u16dc\u16e1\u16e4"+
		"\u16ea\u16ed\u16f1\u16f6\u16fb\u1700\u1705\u1708\u170d\u1712\u1717\u171d"+
		"\u1722\u1727\u172c\u172f\u1734\u1738\u173c\u1744\u174b\u174f\u1754\u1759"+
		"\u175d\u175f\u1762\u1772\u177b\u1783\u178c\u1796\u179e\u17a6\u17ae\u17b6"+
		"\u17bb\u17c3\u17c8\u17cd\u17d0\u17d5\u17d8\u17dc\u17eb\u17f2\u17f7\u17fc"+
		"\u181d\u1821\u1829\u182d\u1836\u183e\u1843\u184b\u1850\u1855\u1857\u1860"+
		"\u1865\u186d\u1872\u187a\u1882\u1885\u188f\u18a1\u18a7\u18ab\u18b1\u18b5"+
		"\u18b9\u18c6\u18ce\u18d2\u18d7\u18dc\u18e2\u18e7\u18eb\u18f0\u18f5\u18fa"+
		"\u1904\u1907\u190b\u190f\u1916\u191a\u1937\u193c\u1940\u1943\u1946\u1949"+
		"\u194c\u1957\u1965\u196e\u1988\u1993\u199a\u199e\u19a5\u19ad\u19b2\u19ba"+
		"\u19c0\u19ca\u19d7\u19dd\u19e3\u19f3\u19f9\u1a02\u1a04\u1a17\u1a23\u1a34"+
		"\u1a45\u1a47\u1a5a\u1a63\u1a6c\u1a75";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}